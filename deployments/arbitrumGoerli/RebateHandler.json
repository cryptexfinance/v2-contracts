{
  "address": "0xD4Ff33F926D84645a5Fc5B1dcbF59f3Cea77b39A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rebateTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_merkleRootAdmin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxUsersToClaim",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeElapsedForUpdate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeToReclaimRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxAmountToClaim",
          "type": "uint256"
        }
      ],
      "name": "MerkleRootUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claimedAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxAmountToClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxUsersToClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleRootAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebateToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "reclaimUnusedReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeElapsedForUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeToReclaimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxUsersToClaim",
          "type": "uint256"
        }
      ],
      "name": "updateMaxUsersToClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maxAmountToClaim",
          "type": "uint256"
        }
      ],
      "name": "updateMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timeElapsedForUpdate",
          "type": "uint256"
        }
      ],
      "name": "updateTimeElapsedForUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timeToReclaimRewards",
          "type": "uint256"
        }
      ],
      "name": "updateTimeToReclaimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x37fda061bdeaaae4ba5738035cd440bac6b7abb0468189c6927d219fe76befb2",
  "receipt": {
    "to": null,
    "from": "0xEA8b3DF14B0bad2F6DD0Ed847DCc54Fc100e40C3",
    "contractAddress": "0xD4Ff33F926D84645a5Fc5B1dcbF59f3Cea77b39A",
    "transactionIndex": 1,
    "gasUsed": "13073812",
    "logsBloom": "0x
    "blockHash": "0x0c3ddc855b3727620b6c2d5f4599dcc2a7384800dd002a31256904bb9eb682c6",
    "transactionHash": "0x37fda061bdeaaae4ba5738035cd440bac6b7abb0468189c6927d219fe76befb2",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 23430675,
        "transactionHash": "0x37fda061bdeaaae4ba5738035cd440bac6b7abb0468189c6927d219fe76befb2",
        "address": "0xD4Ff33F926D84645a5Fc5B1dcbF59f3Cea77b39A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ea8b3df14b0bad2f6dd0ed847dcc54fc100e40c3"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0c3ddc855b3727620b6c2d5f4599dcc2a7384800dd002a31256904bb9eb682c6"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 23430675,
        "transactionHash": "0x37fda061bdeaaae4ba5738035cd440bac6b7abb0468189c6927d219fe76befb2",
        "address": "0xD4Ff33F926D84645a5Fc5B1dcbF59f3Cea77b39A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000ea8b3df14b0bad2f6dd0ed847dcc54fc100e40c3",
          "0x000000000000000000000000ea8b3df14b0bad2f6dd0ed847dcc54fc100e40c3"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x0c3ddc855b3727620b6c2d5f4599dcc2a7384800dd002a31256904bb9eb682c6"
      }
    ],
    "blockNumber": 23430675,
    "cumulativeGasUsed": "13073812",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6775842AE82BF2F0f987b10526768Ad89d79536E",
    "0xEA8b3DF14B0bad2F6DD0Ed847DCc54Fc100e40C3",
    "0xEA8b3DF14B0bad2F6DD0Ed847DCc54Fc100e40C3",
    100,
    1,
    259200
  ],
  "numDeployments": 1,
  "solcInputHash": "e490f85fdfe5ff439899f6c2f833ac14",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rebateTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_merkleRootAdmin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxUsersToClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeElapsedForUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeToReclaimRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAmountToClaim\",\"type\":\"uint256\"}],\"name\":\"MerkleRootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimedAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmountToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxUsersToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRootAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebateToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"reclaimUnusedReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeElapsedForUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeToReclaimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxUsersToClaim\",\"type\":\"uint256\"}],\"name\":\"updateMaxUsersToClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmountToClaim\",\"type\":\"uint256\"}],\"name\":\"updateMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeElapsedForUpdate\",\"type\":\"uint256\"}],\"name\":\"updateTimeElapsedForUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeToReclaimRewards\",\"type\":\"uint256\"}],\"name\":\"updateTimeToReclaimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract that distributes rewards to users based on a merkle proof that is computed offchain and updated on a regular basis by the admin. The contract assumes that rebateToken balance will be transferred directly by the program creator. The merkle root can be updated by the admin only if block.timestamp >= _timeElapsedForUpdate. Rewards will be claimed on a first cum first serve basis until the total amount claimed is less than the cap set for the ongoing epoch. There is also a cap on the total number of users that can claim tokens in a given epoch. This is done because of gas limitation while resetting the addressExists variable. Admin can reclaim unused rewards after a certain amount of inactivity\",\"kind\":\"dev\",\"methods\":{\"claimReward(bytes32[],uint256)\":{\"params\":{\"amount\":\"The amount that can be claimed by msg.sender.\",\"proof\":\"The merkle proof for msg.senders distribution.\"}},\"constructor\":{\"params\":{\"_maxUsersToClaim\":\"Maximum numbers of users that can claim fees during an epoch.\",\"_timeElapsedForUpdate\":\"The time after which the next distribution can be updated.\",\"_timeToReclaimRewards\":\"The time after which an admin can claim unused rewards.\",\"owner\":\"address of the owner.\",\"rebateTokenAddress\":\"address of the token that will be used to pay rebates.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"reclaimUnusedReward(address)\":{\"params\":{\"account\":\"The address of the account to which the unused tokens need to be transferred.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateMaxUsersToClaim(uint256)\":{\"params\":{\"_maxUsersToClaim\":\"new maxUsersToClaim value.\"}},\"updateMerkleRoot(bytes32,uint256)\":{\"params\":{\"_maxAmountToClaim\":\"Total amount of tokens that can be claimed during an epoch.\",\"_merkleRoot\":\"The merkleRoot of the reward distribution.\"}},\"updateTimeElapsedForUpdate(uint256)\":{\"params\":{\"_timeElapsedForUpdate\":\"new timeElapsedForUpdate value.\"}},\"updateTimeToReclaimRewards(uint256)\":{\"params\":{\"_timeToReclaimRewards\":\"new timeToReclaimRewards value.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"MerkleRootUpdated(bytes32,uint256)\":{\"notice\":\"Emitted when the merkle root is updated.\"},\"RewardPaid(address,uint256)\":{\"notice\":\"Emitted when reward is paid to a user.\"}},\"kind\":\"user\",\"methods\":{\"addressExists(address)\":{\"notice\":\"This mapping is used to check if an address has already claimed amount.\"},\"amountClaimed()\":{\"notice\":\"the number of tokens claimed in a given epoch.\"},\"claimReward(bytes32[],uint256)\":{\"notice\":\"Users can claim the rewards allocated to them.\"},\"claimedAddresses(uint256)\":{\"notice\":\"List of addresses that have already claimed rebate for a given epoch.\"},\"lastUpdated()\":{\"notice\":\"The time when the merkleRoot was updated.\"},\"maxAmountToClaim()\":{\"notice\":\"The maximum amount of tokens that can be claimed in a given epoch.\"},\"maxUsersToClaim()\":{\"notice\":\"The maximum number of users that can claim rebates in a given epoch.\"},\"merkleRoot()\":{\"notice\":\"The merkle root of the distribution for the current epoch.\"},\"merkleRootAdmin()\":{\"notice\":\"Address that can update the merkel root\"},\"rebateToken()\":{\"notice\":\"Address of the token used to give rebates.\"},\"reclaimUnusedReward(address)\":{\"notice\":\"Allows admin to reclaim unused rewards after a period of inactivity.\"},\"timeElapsedForUpdate()\":{\"notice\":\"The time after which the merkle root can be updated.\"},\"timeToReclaimRewards()\":{\"notice\":\"the time after which an admin claim unused rewards.\"},\"updateMaxUsersToClaim(uint256)\":{\"notice\":\"allows admin to update maxUsersToClaim variable.\"},\"updateMerkleRoot(bytes32,uint256)\":{\"notice\":\"Admin updates the merkleRoot and maximum amount to claim for a particular period.\"},\"updateTimeElapsedForUpdate(uint256)\":{\"notice\":\"allows admin to update timeElapsedForUpdate variable\"},\"updateTimeToReclaimRewards(uint256)\":{\"notice\":\"allows admin to update timeToReclaimRewards variable\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RebateHandler.sol\":\"RebateHandler\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa504ac17eb0298dcdf5733ce24021b4914f035b97f4400b92827341d3facb3\",\"license\":\"MIT\"},\"contracts/RebateHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\nimport \\\"./interfaces/IRebateHandler.sol\\\";\\n\\n/**\\n * @dev Contract that distributes rewards to users based on a merkle proof\\n * that is computed offchain and updated on a regular basis by the admin.\\n *\\n * The contract assumes that rebateToken balance will be transferred directly by the program creator.\\n *\\n * The merkle root can be updated by the admin only if block.timestamp >= _timeElapsedForUpdate.\\n *\\n * Rewards will be claimed on a first cum first serve basis until the total amount claimed\\n * is less than the cap set for the ongoing epoch.\\n *\\n * There is also a cap on the total number of users that can claim tokens in a given epoch.\\n * This is done because of gas limitation while resetting the addressExists variable.\\n *\\n * Admin can reclaim unused rewards after a certain amount of inactivity\\n */\\ncontract RebateHandler is IRebateHandler, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice This mapping is used to check if an address has already claimed amount.\\n    mapping(address => bool) public addressExists;\\n    /// @notice Address of the token used to give rebates.\\n    IERC20 public immutable rebateToken;\\n    /// @notice Address that can update the merkel root\\n    address public merkleRootAdmin;\\n    /// @notice List of addresses that have already claimed rebate for a given epoch.\\n    address[] public claimedAddresses;\\n    /// @notice The merkle root of the distribution for the current epoch.\\n    bytes32 public merkleRoot;\\n    /// @notice The time when the merkleRoot was updated.\\n    uint256 public lastUpdated;\\n    /// @notice The maximum number of users that can claim rebates in a given epoch.\\n    uint256 public maxUsersToClaim;\\n    /// @notice The time after which the merkle root can be updated.\\n    uint256 public timeElapsedForUpdate;\\n    /// @notice The maximum amount of tokens that can be claimed in a given epoch.\\n    uint256 public maxAmountToClaim;\\n    /// @notice the number of tokens claimed in a given epoch.\\n    uint256 public amountClaimed;\\n    /// @notice the time after which an admin claim unused rewards.\\n    uint256 public timeToReclaimRewards;\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n    */\\n    modifier onlyMerkleRootAdmin() {\\n        require(merkleRootAdmin == _msgSender(), \\\"caller can't update merkle root\\\");\\n        _;\\n    }\\n\\n    /// @param rebateTokenAddress address of the token that will be used to pay rebates.\\n    /// @param owner address of the owner.\\n    /// @param _maxUsersToClaim Maximum numbers of users that can claim fees during an epoch.\\n    /// @param _timeElapsedForUpdate The time after which the next distribution can be updated.\\n    /// @param _timeToReclaimRewards The time after which an admin can claim unused rewards.\\n    constructor(\\n        address rebateTokenAddress,\\n        address owner,\\n        address _merkleRootAdmin,\\n        uint256 _maxUsersToClaim,\\n        uint256 _timeElapsedForUpdate,\\n        uint256 _timeToReclaimRewards\\n    ) {\\n        require(\\n            _timeToReclaimRewards > _timeElapsedForUpdate,\\n            \\\"_timeToReclaimRewards less than timeElapsedForUpdate\\\"\\n        );\\n        rebateToken = IERC20(rebateTokenAddress);\\n        merkleRootAdmin = _merkleRootAdmin;\\n        maxUsersToClaim = _maxUsersToClaim;\\n        timeElapsedForUpdate = _timeElapsedForUpdate;\\n        timeToReclaimRewards = _timeToReclaimRewards;\\n        transferOwnership(owner);\\n    }\\n\\n    /// @inheritdoc IRebateHandler\\n    function updateMerkleRoot(\\n        bytes32 _merkleRoot,\\n        uint256 _maxAmountToClaim\\n    ) external onlyMerkleRootAdmin {\\n        require(\\n            (block.timestamp - lastUpdated >= timeElapsedForUpdate) ||\\n                (lastUpdated == uint256(0)),\\n            \\\"Cannot update before timeElapsedForUpdate\\\"\\n        );\\n        require(\\n            rebateToken.balanceOf(address(this)) >= _maxAmountToClaim,\\n            \\\"Balance less than maxAmountToClaim\\\"\\n        );\\n        lastUpdated = block.timestamp;\\n        _resetAddressExists();\\n        delete claimedAddresses;\\n        amountClaimed = 0;\\n        maxAmountToClaim = _maxAmountToClaim;\\n        merkleRoot = _merkleRoot;\\n        emit MerkleRootUpdated(_merkleRoot, _maxAmountToClaim);\\n    }\\n\\n    /// @inheritdoc IRebateHandler\\n    function claimReward(bytes32[] memory proof, uint256 amount) external {\\n        require(merkleRoot != bytes32(0), \\\"Empty Merkle Root\\\");\\n        require(!addressExists[msg.sender], \\\"Rebate already claimed\\\");\\n        uint256 amountLeftToClaim = maxAmountToClaim - amountClaimed;\\n        require(amountLeftToClaim > 0, \\\"All rebates have been Claimed\\\");\\n        require(_verifyProof(proof, msg.sender, amount), \\\"Invalid Proof\\\");\\n        addressExists[msg.sender] = true;\\n        claimedAddresses.push(msg.sender);\\n        require(\\n            claimedAddresses.length <= maxUsersToClaim,\\n            \\\"Exceeded Max number claims\\\"\\n        );\\n        uint256 ClaimableAmount = amount < amountLeftToClaim\\n            ? amount\\n            : amountLeftToClaim;\\n        amountClaimed += ClaimableAmount;\\n        // Follows checks effects pattern. So there should be no re-entrancy exploit\\n        rebateToken.safeTransfer(msg.sender, ClaimableAmount);\\n        emit RewardPaid(msg.sender, ClaimableAmount);\\n    }\\n\\n    /// @inheritdoc IRebateHandler\\n    function reclaimUnusedReward(address account) external onlyOwner {\\n        require(\\n            (block.timestamp - lastUpdated >= timeToReclaimRewards),\\n            \\\"time less than timeToReclaimRewards\\\"\\n        );\\n        rebateToken.safeTransfer(account, rebateToken.balanceOf(address(this)));\\n    }\\n\\n    /// @notice allows admin to update maxUsersToClaim variable.\\n    /// @param _maxUsersToClaim new maxUsersToClaim value.\\n    function updateMaxUsersToClaim(\\n        uint256 _maxUsersToClaim\\n    ) external onlyOwner {\\n        require(_maxUsersToClaim != 0, \\\"_maxUsersToClaim can't be 0\\\");\\n        maxUsersToClaim = _maxUsersToClaim;\\n    }\\n\\n    /// @notice allows admin to update timeElapsedForUpdate variable\\n    /// @param _timeElapsedForUpdate new timeElapsedForUpdate value.\\n    function updateTimeElapsedForUpdate(\\n        uint256 _timeElapsedForUpdate\\n    ) external onlyOwner {\\n        require(_timeElapsedForUpdate != 0, \\\"_timeElapsedForUpdate can't be 0\\\");\\n        timeElapsedForUpdate = _timeElapsedForUpdate;\\n    }\\n\\n    /// @notice allows admin to update timeToReclaimRewards variable\\n    /// @param _timeToReclaimRewards new timeToReclaimRewards value.\\n    function updateTimeToReclaimRewards(\\n        uint256 _timeToReclaimRewards\\n    ) external onlyOwner {\\n        require(_timeToReclaimRewards != 0, \\\"_timeToReclaimRewards can't be 0\\\");\\n        require(\\n            _timeToReclaimRewards > timeElapsedForUpdate,\\n            \\\"value less than timeElapsedForUpdate\\\"\\n        );\\n        timeToReclaimRewards = _timeToReclaimRewards;\\n    }\\n\\n    function _resetAddressExists() internal {\\n        uint256 length = claimedAddresses.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            delete addressExists[claimedAddresses[i]];\\n        }\\n    }\\n\\n    function _verifyProof(\\n        bytes32[] memory proof,\\n        address account,\\n        uint256 amount\\n    ) internal view returns (bool) {\\n        bytes32 leaf = keccak256(\\n            bytes.concat(keccak256(abi.encode(account, amount)))\\n        );\\n        return MerkleProof.verify(proof, merkleRoot, leaf);\\n    }\\n}\\n\",\"keccak256\":\"0xca495e5ab869aceb13f84e3e2361680edb228324b80a40eb737c88a9aef49cff\",\"license\":\"MIT\"},\"contracts/interfaces/IRebateHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IRebateHandler {\\n    /// @notice Emitted when the merkle root is updated.\\n    event MerkleRootUpdated(bytes32 merkleRoot, uint256 maxAmountToClaim);\\n    /// @notice Emitted when reward is paid to a user.\\n    event RewardPaid(address indexed user, uint256 reward);\\n\\n    /// @notice Admin updates the merkleRoot and maximum amount to claim for a particular period.\\n    /// @param _merkleRoot The merkleRoot of the reward distribution.\\n    /// @param _maxAmountToClaim Total amount of tokens that can be claimed during an epoch.\\n    function updateMerkleRoot(\\n        bytes32 _merkleRoot,\\n        uint256 _maxAmountToClaim\\n    ) external;\\n\\n    /// @notice Users can claim the rewards allocated to them.\\n    /// @param proof The merkle proof for msg.senders distribution.\\n    /// @param amount The amount that can be claimed by msg.sender.\\n    function claimReward(bytes32[] memory proof, uint256 amount) external;\\n\\n    /// @notice Allows admin to reclaim unused rewards after a period of inactivity.\\n    /// @param account The address of the account to which the unused tokens need to be transferred.\\n    function reclaimUnusedReward(address account) external;\\n}\\n\",\"keccak256\":\"0xa14070ea64b567ae8565795015bb6dd09485a2ed76a79f5a19eb976fde387b66\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620015c8380380620015c8833981016040819052620000349162000243565b6200003f3362000105565b818111620000ba5760405162461bcd60e51b815260206004820152603460248201527f5f74696d65546f5265636c61696d52657761726473206c657373207468616e2060448201527f74696d65456c6170736564466f7255706461746500000000000000000000000060648201526084015b60405180910390fd5b6001600160a01b03868116608052600280546001600160a01b03191691861691909117905560068390556007829055600a819055620000f98562000155565b505050505050620002a9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b03163314620001b15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620000b1565b6001600160a01b038116620002185760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620000b1565b620002238162000105565b50565b80516001600160a01b03811681146200023e57600080fd5b919050565b60008060008060008060c087890312156200025d57600080fd5b620002688762000226565b9550620002786020880162000226565b9450620002886040880162000226565b9350606087015192506080870151915060a087015190509295509295509295565b6080516112e7620002e1600039600081816101a10152818161048c01528181610673015281816106e80152610b3601526112e76000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80636d983800116100ad578063ad6b5d0411610071578063ad6b5d041461027a578063d0b06f5d14610283578063dc08be911461028c578063f2fde38b14610295578063f3094297146102a857600080fd5b80636d983800146102085780636fdba0b01461021b578063715018a61461022e5780638da5cb5b14610236578063a50252221461024757600080fd5b80632eb4a7ab116100f45780632eb4a7ab146101c357806332923a57146101da57806346577f0b146101ed5780635745c329146101f65780635eeaa8d0146101ff57600080fd5b806303bdbbd51461013157806303c159571461014657806309423cb5146101595780630e90c1591461016c5780631d3462681461019c575b600080fd5b61014461013f366004611025565b6102bb565b005b61014461015436600461103e565b6103a0565b610144610167366004611060565b6105bc565b61017f61017a366004611025565b610712565b6040516001600160a01b0390911681526020015b60405180910390f35b61017f7f000000000000000000000000000000000000000000000000000000000000000081565b6101cc60045481565b604051908152602001610193565b60025461017f906001600160a01b031681565b6101cc60085481565b6101cc600a5481565b6101cc60075481565b610144610216366004611025565b61073c565b610144610229366004611025565b6107bb565b61014461083a565b6000546001600160a01b031661017f565b61026a610255366004611060565b60016020526000908152604090205460ff1681565b6040519015158152602001610193565b6101cc60095481565b6101cc60055481565b6101cc60065481565b6101446102a3366004611060565b610870565b6101446102b636600461109f565b610908565b6000546001600160a01b031633146102ee5760405162461bcd60e51b81526004016102e590611163565b60405180910390fd5b8060000361033e5760405162461bcd60e51b815260206004820181905260248201527f5f74696d65546f5265636c61696d526577617264732063616e2774206265203060448201526064016102e5565b600754811161039b5760405162461bcd60e51b8152602060048201526024808201527f76616c7565206c657373207468616e2074696d65456c6170736564466f7255706044820152636461746560e01b60648201526084016102e5565b600a55565b6002546001600160a01b031633146103fa5760405162461bcd60e51b815260206004820152601f60248201527f63616c6c65722063616e277420757064617465206d65726b6c6520726f6f740060448201526064016102e5565b60075460055461040a90426111ae565b1015806104175750600554155b6104755760405162461bcd60e51b815260206004820152602960248201527f43616e6e6f7420757064617465206265666f72652074696d65456c6170736564604482015268466f7255706461746560b81b60648201526084016102e5565b6040516370a0823160e01b815230600482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156104db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ff91906111c1565b10156105585760405162461bcd60e51b815260206004820152602260248201527f42616c616e6365206c657373207468616e206d6178416d6f756e74546f436c61604482015261696d60f01b60648201526084016102e5565b42600555610564610b98565b61057060036000610ff3565b60006009556008819055600482905560408051838152602081018390527fecb6e184c8c1ff50ab199b30650a76b7eb56fe2f261becc6284e0a3a1707be48910160405180910390a15050565b6000546001600160a01b031633146105e65760405162461bcd60e51b81526004016102e590611163565b600a546005546105f690426111ae565b10156106505760405162461bcd60e51b815260206004820152602360248201527f74696d65206c657373207468616e2074696d65546f5265636c61696d5265776160448201526272647360e81b60648201526084016102e5565b6040516370a0823160e01b815230600482015261070f9082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156106ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106de91906111c1565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190610bff565b50565b6003818154811061072257600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b031633146107665760405162461bcd60e51b81526004016102e590611163565b806000036107b65760405162461bcd60e51b815260206004820181905260248201527f5f74696d65456c6170736564466f725570646174652063616e2774206265203060448201526064016102e5565b600755565b6000546001600160a01b031633146107e55760405162461bcd60e51b81526004016102e590611163565b806000036108355760405162461bcd60e51b815260206004820152601b60248201527f5f6d61785573657273546f436c61696d2063616e27742062652030000000000060448201526064016102e5565b600655565b6000546001600160a01b031633146108645760405162461bcd60e51b81526004016102e590611163565b61086e6000610c56565b565b6000546001600160a01b0316331461089a5760405162461bcd60e51b81526004016102e590611163565b6001600160a01b0381166108ff5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102e5565b61070f81610c56565b60045461094b5760405162461bcd60e51b8152602060048201526011602482015270115b5c1d1e4813595c9adb1948149bdbdd607a1b60448201526064016102e5565b3360009081526001602052604090205460ff16156109a45760405162461bcd60e51b8152602060048201526016602482015275149958985d1948185b1c9958591e4818db185a5b595960521b60448201526064016102e5565b60006009546008546109b691906111ae565b905060008111610a085760405162461bcd60e51b815260206004820152601d60248201527f416c6c20726562617465732068617665206265656e20436c61696d656400000060448201526064016102e5565b610a13833384610ca6565b610a4f5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210283937b7b360991b60448201526064016102e5565b3360008181526001602081905260408220805460ff191682179055600380549182018155918290527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b03191690921790915560065490541115610afe5760405162461bcd60e51b815260206004820152601a60248201527f4578636565646564204d6178206e756d62657220636c61696d7300000000000060448201526064016102e5565b6000818310610b0d5781610b0f565b825b90508060096000828254610b2391906111da565b90915550610b5d90506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383610bff565b60405181815233907fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e04869060200160405180910390a250505050565b60035460005b81811015610bfb576001600060038381548110610bbd57610bbd6111ed565b60009182526020808320909101546001600160a01b031683528201929092526040019020805460ff1916905580610bf381611203565b915050610b9e565b5050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610c51908490610d14565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604080516001600160a01b0384166020820152908101829052600090819060600160408051601f1981840301815282825280516020918201209083015201604051602081830303815290604052805190602001209050610d098560045483610de6565b9150505b9392505050565b6000610d69826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610dfc9092919063ffffffff16565b805190915015610c515780806020019051810190610d87919061121c565b610c515760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102e5565b600082610df38584610e13565b14949350505050565b6060610e0b8484600085610e89565b949350505050565b600081815b8451811015610e7f576000858281518110610e3557610e356111ed565b60200260200101519050808311610e5b5760008381526020829052604090209250610e6c565b600081815260208490526040902092505b5080610e7781611203565b915050610e18565b5090505b92915050565b606082471015610eea5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016102e5565b6001600160a01b0385163b610f415760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102e5565b600080866001600160a01b03168587604051610f5d9190611262565b60006040518083038185875af1925050503d8060008114610f9a576040519150601f19603f3d011682016040523d82523d6000602084013e610f9f565b606091505b5091509150610faf828286610fba565b979650505050505050565b60608315610fc9575081610d0d565b825115610fd95782518084602001fd5b8160405162461bcd60e51b81526004016102e5919061127e565b508054600082559060005260206000209081019061070f91905b80821115611021576000815560010161100d565b5090565b60006020828403121561103757600080fd5b5035919050565b6000806040838503121561105157600080fd5b50508035926020909101359150565b60006020828403121561107257600080fd5b81356001600160a01b0381168114610d0d57600080fd5b634e487b7160e01b600052604160045260246000fd5b600080604083850312156110b257600080fd5b823567ffffffffffffffff808211156110ca57600080fd5b818501915085601f8301126110de57600080fd5b81356020828211156110f2576110f2611089565b8160051b604051601f19603f8301168101818110868211171561111757611117611089565b60405292835281830193508481018201928984111561113557600080fd5b948201945b838610156111535785358552948201949382019361113a565b9997909101359750505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b81810381811115610e8357610e83611198565b6000602082840312156111d357600080fd5b5051919050565b80820180821115610e8357610e83611198565b634e487b7160e01b600052603260045260246000fd5b60006001820161121557611215611198565b5060010190565b60006020828403121561122e57600080fd5b81518015158114610d0d57600080fd5b60005b83811015611259578181015183820152602001611241565b50506000910152565b6000825161127481846020870161123e565b9190910192915050565b602081526000825180602084015261129d81604085016020870161123e565b601f01601f1916919091016040019291505056fea2646970667358221220bab0631f11006e8304b959163373400c7211ade8485fdf38bbc2d319705f352864736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c80636d983800116100ad578063ad6b5d0411610071578063ad6b5d041461027a578063d0b06f5d14610283578063dc08be911461028c578063f2fde38b14610295578063f3094297146102a857600080fd5b80636d983800146102085780636fdba0b01461021b578063715018a61461022e5780638da5cb5b14610236578063a50252221461024757600080fd5b80632eb4a7ab116100f45780632eb4a7ab146101c357806332923a57146101da57806346577f0b146101ed5780635745c329146101f65780635eeaa8d0146101ff57600080fd5b806303bdbbd51461013157806303c159571461014657806309423cb5146101595780630e90c1591461016c5780631d3462681461019c575b600080fd5b61014461013f366004611025565b6102bb565b005b61014461015436600461103e565b6103a0565b610144610167366004611060565b6105bc565b61017f61017a366004611025565b610712565b6040516001600160a01b0390911681526020015b60405180910390f35b61017f7f000000000000000000000000000000000000000000000000000000000000000081565b6101cc60045481565b604051908152602001610193565b60025461017f906001600160a01b031681565b6101cc60085481565b6101cc600a5481565b6101cc60075481565b610144610216366004611025565b61073c565b610144610229366004611025565b6107bb565b61014461083a565b6000546001600160a01b031661017f565b61026a610255366004611060565b60016020526000908152604090205460ff1681565b6040519015158152602001610193565b6101cc60095481565b6101cc60055481565b6101cc60065481565b6101446102a3366004611060565b610870565b6101446102b636600461109f565b610908565b6000546001600160a01b031633146102ee5760405162461bcd60e51b81526004016102e590611163565b60405180910390fd5b8060000361033e5760405162461bcd60e51b815260206004820181905260248201527f5f74696d65546f5265636c61696d526577617264732063616e2774206265203060448201526064016102e5565b600754811161039b5760405162461bcd60e51b8152602060048201526024808201527f76616c7565206c657373207468616e2074696d65456c6170736564466f7255706044820152636461746560e01b60648201526084016102e5565b600a55565b6002546001600160a01b031633146103fa5760405162461bcd60e51b815260206004820152601f60248201527f63616c6c65722063616e277420757064617465206d65726b6c6520726f6f740060448201526064016102e5565b60075460055461040a90426111ae565b1015806104175750600554155b6104755760405162461bcd60e51b815260206004820152602960248201527f43616e6e6f7420757064617465206265666f72652074696d65456c6170736564604482015268466f7255706461746560b81b60648201526084016102e5565b6040516370a0823160e01b815230600482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156104db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ff91906111c1565b10156105585760405162461bcd60e51b815260206004820152602260248201527f42616c616e6365206c657373207468616e206d6178416d6f756e74546f436c61604482015261696d60f01b60648201526084016102e5565b42600555610564610b98565b61057060036000610ff3565b60006009556008819055600482905560408051838152602081018390527fecb6e184c8c1ff50ab199b30650a76b7eb56fe2f261becc6284e0a3a1707be48910160405180910390a15050565b6000546001600160a01b031633146105e65760405162461bcd60e51b81526004016102e590611163565b600a546005546105f690426111ae565b10156106505760405162461bcd60e51b815260206004820152602360248201527f74696d65206c657373207468616e2074696d65546f5265636c61696d5265776160448201526272647360e81b60648201526084016102e5565b6040516370a0823160e01b815230600482015261070f9082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156106ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106de91906111c1565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190610bff565b50565b6003818154811061072257600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b031633146107665760405162461bcd60e51b81526004016102e590611163565b806000036107b65760405162461bcd60e51b815260206004820181905260248201527f5f74696d65456c6170736564466f725570646174652063616e2774206265203060448201526064016102e5565b600755565b6000546001600160a01b031633146107e55760405162461bcd60e51b81526004016102e590611163565b806000036108355760405162461bcd60e51b815260206004820152601b60248201527f5f6d61785573657273546f436c61696d2063616e27742062652030000000000060448201526064016102e5565b600655565b6000546001600160a01b031633146108645760405162461bcd60e51b81526004016102e590611163565b61086e6000610c56565b565b6000546001600160a01b0316331461089a5760405162461bcd60e51b81526004016102e590611163565b6001600160a01b0381166108ff5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102e5565b61070f81610c56565b60045461094b5760405162461bcd60e51b8152602060048201526011602482015270115b5c1d1e4813595c9adb1948149bdbdd607a1b60448201526064016102e5565b3360009081526001602052604090205460ff16156109a45760405162461bcd60e51b8152602060048201526016602482015275149958985d1948185b1c9958591e4818db185a5b595960521b60448201526064016102e5565b60006009546008546109b691906111ae565b905060008111610a085760405162461bcd60e51b815260206004820152601d60248201527f416c6c20726562617465732068617665206265656e20436c61696d656400000060448201526064016102e5565b610a13833384610ca6565b610a4f5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210283937b7b360991b60448201526064016102e5565b3360008181526001602081905260408220805460ff191682179055600380549182018155918290527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b03191690921790915560065490541115610afe5760405162461bcd60e51b815260206004820152601a60248201527f4578636565646564204d6178206e756d62657220636c61696d7300000000000060448201526064016102e5565b6000818310610b0d5781610b0f565b825b90508060096000828254610b2391906111da565b90915550610b5d90506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383610bff565b60405181815233907fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e04869060200160405180910390a250505050565b60035460005b81811015610bfb576001600060038381548110610bbd57610bbd6111ed565b60009182526020808320909101546001600160a01b031683528201929092526040019020805460ff1916905580610bf381611203565b915050610b9e565b5050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610c51908490610d14565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604080516001600160a01b0384166020820152908101829052600090819060600160408051601f1981840301815282825280516020918201209083015201604051602081830303815290604052805190602001209050610d098560045483610de6565b9150505b9392505050565b6000610d69826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610dfc9092919063ffffffff16565b805190915015610c515780806020019051810190610d87919061121c565b610c515760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102e5565b600082610df38584610e13565b14949350505050565b6060610e0b8484600085610e89565b949350505050565b600081815b8451811015610e7f576000858281518110610e3557610e356111ed565b60200260200101519050808311610e5b5760008381526020829052604090209250610e6c565b600081815260208490526040902092505b5080610e7781611203565b915050610e18565b5090505b92915050565b606082471015610eea5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016102e5565b6001600160a01b0385163b610f415760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102e5565b600080866001600160a01b03168587604051610f5d9190611262565b60006040518083038185875af1925050503d8060008114610f9a576040519150601f19603f3d011682016040523d82523d6000602084013e610f9f565b606091505b5091509150610faf828286610fba565b979650505050505050565b60608315610fc9575081610d0d565b825115610fd95782518084602001fd5b8160405162461bcd60e51b81526004016102e5919061127e565b508054600082559060005260206000209081019061070f91905b80821115611021576000815560010161100d565b5090565b60006020828403121561103757600080fd5b5035919050565b6000806040838503121561105157600080fd5b50508035926020909101359150565b60006020828403121561107257600080fd5b81356001600160a01b0381168114610d0d57600080fd5b634e487b7160e01b600052604160045260246000fd5b600080604083850312156110b257600080fd5b823567ffffffffffffffff808211156110ca57600080fd5b818501915085601f8301126110de57600080fd5b81356020828211156110f2576110f2611089565b8160051b604051601f19603f8301168101818110868211171561111757611117611089565b60405292835281830193508481018201928984111561113557600080fd5b948201945b838610156111535785358552948201949382019361113a565b9997909101359750505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b81810381811115610e8357610e83611198565b6000602082840312156111d357600080fd5b5051919050565b80820180821115610e8357610e83611198565b634e487b7160e01b600052603260045260246000fd5b60006001820161121557611215611198565b5060010190565b60006020828403121561122e57600080fd5b81518015158114610d0d57600080fd5b60005b83811015611259578181015183820152602001611241565b50506000910152565b6000825161127481846020870161123e565b9190910192915050565b602081526000825180602084015261129d81604085016020870161123e565b601f01601f1916919091016040019291505056fea2646970667358221220bab0631f11006e8304b959163373400c7211ade8485fdf38bbc2d319705f352864736f6c63430008110033",
  "devdoc": {
    "details": "Contract that distributes rewards to users based on a merkle proof that is computed offchain and updated on a regular basis by the admin. The contract assumes that rebateToken balance will be transferred directly by the program creator. The merkle root can be updated by the admin only if block.timestamp >= _timeElapsedForUpdate. Rewards will be claimed on a first cum first serve basis until the total amount claimed is less than the cap set for the ongoing epoch. There is also a cap on the total number of users that can claim tokens in a given epoch. This is done because of gas limitation while resetting the addressExists variable. Admin can reclaim unused rewards after a certain amount of inactivity",
    "kind": "dev",
    "methods": {
      "claimReward(bytes32[],uint256)": {
        "params": {
          "amount": "The amount that can be claimed by msg.sender.",
          "proof": "The merkle proof for msg.senders distribution."
        }
      },
      "constructor": {
        "params": {
          "_maxUsersToClaim": "Maximum numbers of users that can claim fees during an epoch.",
          "_timeElapsedForUpdate": "The time after which the next distribution can be updated.",
          "_timeToReclaimRewards": "The time after which an admin can claim unused rewards.",
          "owner": "address of the owner.",
          "rebateTokenAddress": "address of the token that will be used to pay rebates."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "reclaimUnusedReward(address)": {
        "params": {
          "account": "The address of the account to which the unused tokens need to be transferred."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateMaxUsersToClaim(uint256)": {
        "params": {
          "_maxUsersToClaim": "new maxUsersToClaim value."
        }
      },
      "updateMerkleRoot(bytes32,uint256)": {
        "params": {
          "_maxAmountToClaim": "Total amount of tokens that can be claimed during an epoch.",
          "_merkleRoot": "The merkleRoot of the reward distribution."
        }
      },
      "updateTimeElapsedForUpdate(uint256)": {
        "params": {
          "_timeElapsedForUpdate": "new timeElapsedForUpdate value."
        }
      },
      "updateTimeToReclaimRewards(uint256)": {
        "params": {
          "_timeToReclaimRewards": "new timeToReclaimRewards value."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "MerkleRootUpdated(bytes32,uint256)": {
        "notice": "Emitted when the merkle root is updated."
      },
      "RewardPaid(address,uint256)": {
        "notice": "Emitted when reward is paid to a user."
      }
    },
    "kind": "user",
    "methods": {
      "addressExists(address)": {
        "notice": "This mapping is used to check if an address has already claimed amount."
      },
      "amountClaimed()": {
        "notice": "the number of tokens claimed in a given epoch."
      },
      "claimReward(bytes32[],uint256)": {
        "notice": "Users can claim the rewards allocated to them."
      },
      "claimedAddresses(uint256)": {
        "notice": "List of addresses that have already claimed rebate for a given epoch."
      },
      "lastUpdated()": {
        "notice": "The time when the merkleRoot was updated."
      },
      "maxAmountToClaim()": {
        "notice": "The maximum amount of tokens that can be claimed in a given epoch."
      },
      "maxUsersToClaim()": {
        "notice": "The maximum number of users that can claim rebates in a given epoch."
      },
      "merkleRoot()": {
        "notice": "The merkle root of the distribution for the current epoch."
      },
      "merkleRootAdmin()": {
        "notice": "Address that can update the merkel root"
      },
      "rebateToken()": {
        "notice": "Address of the token used to give rebates."
      },
      "reclaimUnusedReward(address)": {
        "notice": "Allows admin to reclaim unused rewards after a period of inactivity."
      },
      "timeElapsedForUpdate()": {
        "notice": "The time after which the merkle root can be updated."
      },
      "timeToReclaimRewards()": {
        "notice": "the time after which an admin claim unused rewards."
      },
      "updateMaxUsersToClaim(uint256)": {
        "notice": "allows admin to update maxUsersToClaim variable."
      },
      "updateMerkleRoot(bytes32,uint256)": {
        "notice": "Admin updates the merkleRoot and maximum amount to claim for a particular period."
      },
      "updateTimeElapsedForUpdate(uint256)": {
        "notice": "allows admin to update timeElapsedForUpdate variable"
      },
      "updateTimeToReclaimRewards(uint256)": {
        "notice": "allows admin to update timeToReclaimRewards variable"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10071,
        "contract": "contracts/RebateHandler.sol:RebateHandler",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14047,
        "contract": "contracts/RebateHandler.sol:RebateHandler",
        "label": "addressExists",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 14054,
        "contract": "contracts/RebateHandler.sol:RebateHandler",
        "label": "merkleRootAdmin",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 14058,
        "contract": "contracts/RebateHandler.sol:RebateHandler",
        "label": "claimedAddresses",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 14061,
        "contract": "contracts/RebateHandler.sol:RebateHandler",
        "label": "merkleRoot",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      },
      {
        "astId": 14064,
        "contract": "contracts/RebateHandler.sol:RebateHandler",
        "label": "lastUpdated",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 14067,
        "contract": "contracts/RebateHandler.sol:RebateHandler",
        "label": "maxUsersToClaim",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 14070,
        "contract": "contracts/RebateHandler.sol:RebateHandler",
        "label": "timeElapsedForUpdate",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 14073,
        "contract": "contracts/RebateHandler.sol:RebateHandler",
        "label": "maxAmountToClaim",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 14076,
        "contract": "contracts/RebateHandler.sol:RebateHandler",
        "label": "amountClaimed",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 14079,
        "contract": "contracts/RebateHandler.sol:RebateHandler",
        "label": "timeToReclaimRewards",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}