{
  "address": "0x393024Ba0ECB3a684C9D0bc2BC023B8DD9Ed21c1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardsToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDuration",
          "type": "uint256"
        }
      ],
      "name": "RewardsDurationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardForDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_b",
          "type": "uint256"
        }
      ],
      "name": "min",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reward",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardsDuration",
          "type": "uint256"
        }
      ],
      "name": "setRewardsDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd531248a4cac5edeaa9901b128f8cd94bca19690f88b2b900cd39574452292cd",
  "receipt": {
    "to": null,
    "from": "0xEA8b3DF14B0bad2F6DD0Ed847DCc54Fc100e40C3",
    "contractAddress": "0x393024Ba0ECB3a684C9D0bc2BC023B8DD9Ed21c1",
    "transactionIndex": 1,
    "gasUsed": "22991643",
    "logsBloom": "0x
    "blockHash": "0xb090d5576529dbe8b81ab1407d2c395bc9b5cb70544a1ffc7c53176a4618508b",
    "transactionHash": "0xd531248a4cac5edeaa9901b128f8cd94bca19690f88b2b900cd39574452292cd",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 21974683,
        "transactionHash": "0xd531248a4cac5edeaa9901b128f8cd94bca19690f88b2b900cd39574452292cd",
        "address": "0x393024Ba0ECB3a684C9D0bc2BC023B8DD9Ed21c1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ea8b3df14b0bad2f6dd0ed847dcc54fc100e40c3"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb090d5576529dbe8b81ab1407d2c395bc9b5cb70544a1ffc7c53176a4618508b"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 21974683,
        "transactionHash": "0xd531248a4cac5edeaa9901b128f8cd94bca19690f88b2b900cd39574452292cd",
        "address": "0x393024Ba0ECB3a684C9D0bc2BC023B8DD9Ed21c1",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ea8b3df14b0bad2f6dd0ed847dcc54fc100e40c3",
          "0x000000000000000000000000ea8b3df14b0bad2f6dd0ed847dcc54fc100e40c3"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xb090d5576529dbe8b81ab1407d2c395bc9b5cb70544a1ffc7c53176a4618508b"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 21974683,
        "transactionHash": "0xd531248a4cac5edeaa9901b128f8cd94bca19690f88b2b900cd39574452292cd",
        "address": "0x393024Ba0ECB3a684C9D0bc2BC023B8DD9Ed21c1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000ea8b3df14b0bad2f6dd0ed847dcc54fc100e40c3",
          "0x000000000000000000000000ea8b3df14b0bad2f6dd0ed847dcc54fc100e40c3"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xb090d5576529dbe8b81ab1407d2c395bc9b5cb70544a1ffc7c53176a4618508b"
      }
    ],
    "blockNumber": 21974683,
    "cumulativeGasUsed": "22991643",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xEA8b3DF14B0bad2F6DD0Ed847DCc54Fc100e40C3",
    "0x6775842AE82BF2F0f987b10526768Ad89d79536E",
    "0xE4c55aad5b60f0C1983De54f00D28Fc887abc472"
  ],
  "numDeployments": 1,
  "solcInputHash": "be1d1bb26e5f8c2eb6d321420643781e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_b\",\"type\":\"uint256\"}],\"name\":\"min\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"params\":{\"_account\":\"address\"}},\"constructor\":{\"params\":{\"_owner\":\"address\",\"_rewardsToken\":\"address\",\"_stakingToken\":\"uint256\"}},\"earned(address)\":{\"params\":{\"_account\":\"address\"}},\"getReward()\":{\"details\":\"updates rewards on callfrom the total reward a vestingRatio amount is locked into vesting and the rest is transferedif vesting period has passed transfer all rewards\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"min(uint256,uint256)\":{\"params\":{\"_a\":\"uint\",\"_b\":\"uint\"}},\"notifyRewardAmount(uint256)\":{\"details\":\"Only owner  can call itIncreases duration of rewards\",\"params\":{\"_reward\":\"uint\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"recoverERC20(address,uint256)\":{\"details\":\"Only owner  can call it\",\"params\":{\"_tokenAddress\":\"address\",\"_tokenAmount\":\"uint\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setRewardsDuration(uint256)\":{\"details\":\"Only owner  can call itPrevious rewards must be complete\",\"params\":{\"_rewardsDuration\":\"uint\"}},\"stake(uint256)\":{\"details\":\"updates rewards on call\",\"params\":{\"_amount\":\"uint\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256)\":{\"details\":\"updates rewards on call\",\"params\":{\"_amount\":\"uint\"}}},\"stateVariables\":{\"_balances\":{\"details\":\"Tracks the amount of staked tokens per user\"},\"_totalSupply\":{\"details\":\"Tracks the total supply of staked tokens\"}},\"version\":1},\"userdoc\":{\"events\":{\"Recovered(address,uint256)\":{\"notice\":\"An event emitted when a erc20 token is recovered\"},\"RewardAdded(uint256)\":{\"notice\":\"An event emitted when a reward is added\"},\"RewardPaid(address,uint256)\":{\"notice\":\"An event emitted when reward is paid to a user\"},\"RewardsDurationUpdated(uint256)\":{\"notice\":\"An event emitted when the rewards duration is updated\"},\"Staked(address,uint256)\":{\"notice\":\"An event emitted when tokens are staked to earn rewards\"},\"Withdrawn(address,uint256)\":{\"notice\":\"An event emitted when staked tokens are withdrawn\"}},\"kind\":\"user\",\"methods\":{\"balanceOf(address)\":{\"notice\":\"Returns the amount of staked tokens from specific user.\"},\"constructor\":{\"notice\":\"Constructor\"},\"earned(address)\":{\"notice\":\"Returns the amount of reward tokens a user has earned.\"},\"exit()\":{\"notice\":\"Removes all stake and transfers all rewards to the staker.\"},\"getReward()\":{\"notice\":\"Transfers to the caller the current amount of rewards tokens earned.\"},\"lastTimeRewardApplicable()\":{\"notice\":\"Returns the minimun between current block timestamp or the finish period of rewards.\"},\"lastUpdateTime()\":{\"notice\":\"Last time rewards were updated\"},\"min(uint256,uint256)\":{\"notice\":\"Returns the minimun between two variables\"},\"notifyRewardAmount(uint256)\":{\"notice\":\"Notifies the contract that reward has been added to be given.\"},\"periodFinish()\":{\"notice\":\"Tracks the period where users stop earning rewards\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\"},\"rewardPerToken()\":{\"notice\":\"Returns the calculated reward per token deposited.\"},\"rewardPerTokenStored()\":{\"notice\":\"Amount of reward calculated per token stored\"},\"rewards(address)\":{\"notice\":\"Tracks the user rewards\"},\"rewardsDuration()\":{\"notice\":\"How long the rewards lasts, it updates when more rewards are added\"},\"rewardsToken()\":{\"notice\":\"Address of the reward\"},\"setRewardsDuration(uint256)\":{\"notice\":\"Updates the reward duration\"},\"stake(uint256)\":{\"notice\":\"Transfer staking token to contract\"},\"stakingToken()\":{\"notice\":\"Address of the staking token\"},\"totalSupply()\":{\"notice\":\"Returns the total amount of staked tokens.\"},\"userRewardPerTokenPaid(address)\":{\"notice\":\"Track the rewards paid to users\"},\"withdraw(uint256)\":{\"notice\":\"Remove staking token and transfer back to staker\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LiquidityReward.sol\":\"LiquidityReward\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/LiquidityReward.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n   ____            __   __        __   _\\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\\n _\\\\ \\\\ / // // _ \\\\/ __// _ \\\\/ -_)/ __// / \\\\ \\\\ /\\n/___/ \\\\_, //_//_/\\\\__//_//_/\\\\__/ \\\\__//_/ /_\\\\_\\\\\\n     /___/\\n\\n* Based on Synthetix Staking Rewards contract\\n* Synthetix: StakingRewards.sol\\n*\\n* Latest source (may be newer): https://github.com/Synthetixio/synthetix/blob/v2.37.0/contracts/StakingRewards.sol\\n* Docs: https://docs.synthetix.io/contracts/source/contracts/StakingRewards/\\n*/\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract LiquidityReward is Ownable, AccessControl, ReentrancyGuard, Pausable {\\n  /// @notice Open Zeppelin libraries\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  /// @notice Address of the reward\\n  IERC20 public immutable rewardsToken;\\n\\n  /// @notice Address of the staking token\\n  IERC20 public immutable stakingToken;\\n\\n  /// @notice Tracks the period where users stop earning rewards\\n  uint256 public periodFinish = 0;\\n\\n  uint256 public rewardRate = 0;\\n\\n  /// @notice How long the rewards lasts, it updates when more rewards are added\\n  uint256 public rewardsDuration = 30 days;\\n\\n  /// @notice Last time rewards were updated\\n  uint256 public lastUpdateTime;\\n\\n  /// @notice Amount of reward calculated per token stored\\n  uint256 public rewardPerTokenStored;\\n\\n  /// @notice Track the rewards paid to users\\n  mapping(address => uint256) public userRewardPerTokenPaid;\\n\\n  /// @notice Tracks the user rewards\\n  mapping(address => uint256) public rewards;\\n\\n  /// @dev Tracks the total supply of staked tokens\\n  uint256 private _totalSupply;\\n\\n  /// @dev Tracks the amount of staked tokens per user\\n  mapping(address => uint256) private _balances;\\n\\n  /// @notice An event emitted when a reward is added\\n  event RewardAdded(uint256 reward);\\n\\n  /// @notice An event emitted when tokens are staked to earn rewards\\n  event Staked(address indexed user, uint256 amount);\\n\\n  /// @notice An event emitted when staked tokens are withdrawn\\n  event Withdrawn(address indexed user, uint256 amount);\\n\\n  /// @notice An event emitted when reward is paid to a user\\n  event RewardPaid(address indexed user, uint256 reward);\\n\\n  /// @notice An event emitted when the rewards duration is updated\\n  event RewardsDurationUpdated(uint256 newDuration);\\n\\n  /// @notice An event emitted when a erc20 token is recovered\\n  event Recovered(address token, uint256 amount);\\n\\n  /**\\n   * @notice Constructor\\n   * @param _owner address\\n   * @param _rewardsToken address\\n   * @param _stakingToken uint256\\n   */\\n  constructor(\\n    address _owner,\\n    address _rewardsToken,\\n    address _stakingToken\\n  ) {\\n    rewardsToken = IERC20(_rewardsToken);\\n    stakingToken = IERC20(_stakingToken);\\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    transferOwnership(_owner);\\n  }\\n\\n  /**\\n   * @notice Updates the reward and time on call.\\n   * @param _account address\\n   */\\n  modifier updateReward(address _account) {\\n    rewardPerTokenStored = rewardPerToken();\\n    lastUpdateTime = lastTimeRewardApplicable();\\n\\n    if (_account != address(0)) {\\n      rewards[_account] = earned(_account);\\n      userRewardPerTokenPaid[_account] = rewardPerTokenStored;\\n    }\\n    _;\\n  }\\n\\n  /// @notice Returns the total amount of staked tokens.\\n  function totalSupply() external view returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @notice Returns the amount of staked tokens from specific user.\\n   * @param _account address\\n   */\\n  function balanceOf(address _account) external view returns (uint256) {\\n    return _balances[_account];\\n  }\\n\\n  function getRewardForDuration() external view returns (uint256) {\\n    return rewardRate.mul(rewardsDuration);\\n  }\\n\\n  /**\\n   * @notice Transfer staking token to contract\\n   * @param _amount uint\\n   * @dev updates rewards on call\\n   */\\n  function stake(uint256 _amount)\\n    external\\n    nonReentrant\\n    whenNotPaused\\n    updateReward(msg.sender)\\n  {\\n    require(_amount > 0, \\\"LiquidityReward::Stake:Cannot stake 0\\\");\\n    _totalSupply = _totalSupply.add(_amount);\\n    _balances[msg.sender] = _balances[msg.sender].add(_amount);\\n    stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\\n    emit Staked(msg.sender, _amount);\\n  }\\n\\n  /// @notice Removes all stake and transfers all rewards to the staker.\\n  function exit() external {\\n    withdraw(_balances[msg.sender]);\\n    getReward();\\n  }\\n\\n  /**\\n   * @notice Notifies the contract that reward has been added to be given.\\n   * @param _reward uint\\n   * @dev Only owner  can call it\\n   * @dev Increases duration of rewards\\n   */\\n  function notifyRewardAmount(uint256 _reward)\\n    external\\n    onlyOwner\\n    updateReward(address(0))\\n  {\\n    if (block.timestamp >= periodFinish) {\\n      rewardRate = _reward.div(rewardsDuration);\\n    } else {\\n      uint256 remaining = periodFinish.sub(block.timestamp);\\n      uint256 leftover = remaining.mul(rewardRate);\\n      rewardRate = _reward.add(leftover).div(rewardsDuration);\\n    }\\n\\n    // Ensure the provided reward amount is not more than the balance in the contract.\\n    // This keeps the reward rate in the right range, preventing overflows due to\\n    // very high values of rewardRate in the earned and rewardsPerToken functions;\\n    // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n    uint256 balance = rewardsToken.balanceOf(address(this));\\n    require(\\n      rewardRate <= balance.div(rewardsDuration),\\n      \\\"LiquidityReward::notifyRewardAmount: Provided reward too high\\\"\\n    );\\n\\n    lastUpdateTime = block.timestamp;\\n    periodFinish = block.timestamp.add(rewardsDuration);\\n    emit RewardAdded(_reward);\\n  }\\n\\n  /**\\n   * @notice  Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\n   * @param _tokenAddress address\\n   * @param _tokenAmount uint\\n   * @dev Only owner  can call it\\n   */\\n  function recoverERC20(address _tokenAddress, uint256 _tokenAmount)\\n    external\\n    onlyOwner\\n  {\\n    // Cannot recover the staking token or the rewards token\\n    require(\\n      _tokenAddress != address(rewardsToken) &&\\n        _tokenAddress != address(stakingToken),\\n      \\\"LiquidityReward::recoverERC20: Cannot withdraw the staking or rewards tokens\\\"\\n    );\\n    IERC20(_tokenAddress).safeTransfer(owner(), _tokenAmount);\\n    emit Recovered(_tokenAddress, _tokenAmount);\\n  }\\n\\n  /**\\n   * @notice  Updates the reward duration\\n   * @param _rewardsDuration uint\\n   * @dev Only owner  can call it\\n   * @dev Previous rewards must be complete\\n   */\\n  function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {\\n    require(\\n      block.timestamp > periodFinish,\\n      \\\"LiquidityReward::setRewardsDuration: Previous rewards period must be complete before changing the duration for the new period\\\"\\n    );\\n    rewardsDuration = _rewardsDuration;\\n    emit RewardsDurationUpdated(rewardsDuration);\\n  }\\n\\n  /// @notice Returns the minimun between current block timestamp or the finish period of rewards.\\n  function lastTimeRewardApplicable() public view returns (uint256) {\\n    return min(block.timestamp, periodFinish);\\n  }\\n\\n  /// @notice Returns the calculated reward per token deposited.\\n  function rewardPerToken() public view returns (uint256) {\\n    if (_totalSupply == 0) {\\n      return rewardPerTokenStored;\\n    }\\n\\n    return\\n      rewardPerTokenStored.add(\\n        lastTimeRewardApplicable()\\n          .sub(lastUpdateTime)\\n          .mul(rewardRate)\\n          .mul(1e18)\\n          .div(_totalSupply)\\n      );\\n  }\\n\\n  /**\\n   * @notice Returns the amount of reward tokens a user has earned.\\n   * @param _account address\\n   */\\n  function earned(address _account) public view returns (uint256) {\\n    return\\n      _balances[_account]\\n        .mul(rewardPerToken().sub(userRewardPerTokenPaid[_account]))\\n        .div(1e18)\\n        .add(rewards[_account]);\\n  }\\n\\n  /**\\n   * @notice Returns the minimun between two variables\\n   * @param _a uint\\n   * @param _b uint\\n   */\\n  function min(uint256 _a, uint256 _b) public pure returns (uint256) {\\n    return _a < _b ? _a : _b;\\n  }\\n\\n  /**\\n   * @notice Remove staking token and transfer back to staker\\n   * @param _amount uint\\n   * @dev updates rewards on call\\n   */\\n  function withdraw(uint256 _amount)\\n    public\\n    nonReentrant\\n    updateReward(msg.sender)\\n  {\\n    require(_amount > 0, \\\"LiquidityReward::withdraw: Cannot withdraw 0\\\");\\n    _totalSupply = _totalSupply.sub(_amount);\\n    _balances[msg.sender] = _balances[msg.sender].sub(_amount);\\n    stakingToken.safeTransfer(msg.sender, _amount);\\n    emit Withdrawn(msg.sender, _amount);\\n  }\\n\\n  /**\\n   * @notice Transfers to the caller the current amount of rewards tokens earned.\\n   * @dev updates rewards on call\\n   * @dev from the total reward a vestingRatio amount is locked into vesting and the rest is transfered\\n   * @dev if vesting period has passed transfer all rewards\\n   */\\n  function getReward() public nonReentrant updateReward(msg.sender) {\\n    uint256 reward = rewards[msg.sender];\\n    if (reward > 0) {\\n      rewards[msg.sender] = 0;\\n      rewardsToken.safeTransfer(msg.sender, reward);\\n      emit RewardPaid(msg.sender, reward);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x2a91957498eaf6a2e0bb021ab013eb2429dba21a1fba19b0f75dd1ed56864d63\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040526000600455600060055562278d006006553480156200002257600080fd5b5060405162001e1c38038062001e1c83398101604081905262000045916200026d565b620000503362000093565b60016002556003805460ff191690556001600160a01b03808316608052811660a0526200007f600033620000e3565b6200008a83620000f3565b505050620002b7565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620000ef8282620001c8565b5050565b6000546001600160a01b03163314620001535760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b038116620001ba5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200014a565b620001c58162000093565b50565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16620000ef5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b80516001600160a01b03811681146200026857600080fd5b919050565b6000806000606084860312156200028357600080fd5b6200028e8462000250565b92506200029e6020850162000250565b9150620002ae6040850162000250565b90509250925092565b60805160a051611b156200030760003960008181610347015281816106a401528181610be50152610e9f015260008181610440015281816108bb01528181610ab60152610ba80152611b156000f3fe608060405234801561001057600080fd5b50600436106102055760003560e01c80637b0a47ee1161011a578063c8f33c91116100ad578063d547741f1161007c578063d547741f14610462578063df136d6514610475578063e9fad8ee1461047e578063ebe2b12b14610486578063f2fde38b1461048f57600080fd5b8063c8f33c9114610417578063cc1a378f14610420578063cd3daf9d14610433578063d1af0c7d1461043b57600080fd5b80638da5cb5b116100e95780638da5cb5b146103d857806391d14854146103e9578063a217fddf146103fc578063a694fc3a1461040457600080fd5b80637b0a47ee1461039457806380faa57d1461039d5780638980f11f146103a55780638b876347146103b857600080fd5b806336568abe1161019d5780635c975abb1161016c5780635c975abb1461030657806370a0823114610311578063715018a61461033a57806372f702f3146103425780637ae2b5c71461038157600080fd5b806336568abe146102cf578063386a9525146102e25780633c6b16ab146102eb5780633d18b912146102fe57600080fd5b80631c1f78eb116101d95780631c1f78eb1461027b578063248a9ca3146102835780632e1a7d4d146102a75780632f2ff15d146102bc57600080fd5b80628cc2621461020a57806301ffc9a7146102305780630700037d1461025357806318160ddd14610273575b600080fd5b61021d6102183660046117c2565b6104a2565b6040519081526020015b60405180910390f35b61024361023e3660046117dd565b610520565b6040519015158152602001610227565b61021d6102613660046117c2565b600a6020526000908152604090205481565b600b5461021d565b61021d610555565b61021d610291366004611807565b6000908152600160208190526040909120015490565b6102ba6102b5366004611807565b610573565b005b6102ba6102ca366004611820565b610712565b6102ba6102dd366004611820565b61073d565b61021d60065481565b6102ba6102f9366004611807565b6107bb565b6102ba610a0a565b60035460ff16610243565b61021d61031f3660046117c2565b6001600160a01b03166000908152600c602052604090205490565b6102ba610b20565b6103697f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610227565b61021d61038f36600461184c565b610b56565b61021d60055481565b61021d610b6e565b6102ba6103b336600461186e565b610b7c565b61021d6103c63660046117c2565b60096020526000908152604090205481565b6000546001600160a01b0316610369565b6102436103f7366004611820565b610d0d565b61021d600081565b6102ba610412366004611807565b610d38565b61021d60075481565b6102ba61042e366004611807565b610f01565b61021d611029565b6103697f000000000000000000000000000000000000000000000000000000000000000081565b6102ba610470366004611820565b611074565b61021d60085481565b6102ba61109a565b61021d60045481565b6102ba61049d3660046117c2565b6110bb565b6001600160a01b0381166000908152600a6020908152604080832054600990925282205461051a919061051490670de0b6b3a76400009061050e906104ef906104e9611029565b90611156565b6001600160a01b0388166000908152600c602052604090205490611162565b9061116e565b9061117a565b92915050565b60006001600160e01b03198216637965db0b60e01b148061051a57506301ffc9a760e01b6001600160e01b031983161461051a565b600061056e60065460055461116290919063ffffffff16565b905090565b600280540361059d5760405162461bcd60e51b815260040161059490611898565b60405180910390fd5b60028055336105aa611029565b6008556105b5610b6e565b6007556001600160a01b038116156105fc576105d0816104a2565b6001600160a01b0382166000908152600a60209081526040808320939093556008546009909152919020555b600082116106615760405162461bcd60e51b815260206004820152602c60248201527f4c69717569646974795265776172643a3a77697468647261773a2043616e6e6f60448201526b07420776974686472617720360a41b6064820152608401610594565b600b5461066e9083611156565b600b55336000908152600c602052604090205461068b9083611156565b336000818152600c60205260409020919091556106d3907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169084611186565b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5906020015b60405180910390a250506001600255565b6000828152600160208190526040909120015461072e816111e9565b61073883836111f3565b505050565b6001600160a01b03811633146107ad5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610594565b6107b7828261125e565b5050565b6000546001600160a01b031633146107e55760405162461bcd60e51b8152600401610594906118cf565b60006107ef611029565b6008556107fa610b6e565b6007556001600160a01b0381161561084157610815816104a2565b6001600160a01b0382166000908152600a60209081526040808320939093556008546009909152919020555b60045442106108605760065461085890839061116e565b6005556108a3565b6004546000906108709042611156565b905060006108896005548361116290919063ffffffff16565b60065490915061089d9061050e868461117a565b60055550505b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561090a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092e9190611904565b90506109456006548261116e90919063ffffffff16565b60055411156109bc5760405162461bcd60e51b815260206004820152603d60248201527f4c69717569646974795265776172643a3a6e6f74696679526577617264416d6f60448201527f756e743a2050726f76696465642072657761726420746f6f20686967680000006064820152608401610594565b4260078190556006546109cf919061117a565b6004556040518381527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a1505050565b6002805403610a2b5760405162461bcd60e51b815260040161059490611898565b6002805533610a38611029565b600855610a43610b6e565b6007556001600160a01b03811615610a8a57610a5e816104a2565b6001600160a01b0382166000908152600a60209081526040808320939093556008546009909152919020555b336000908152600a60205260409020548015610b1757336000818152600a6020526040812055610ae5907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169083611186565b60405181815233907fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e048690602001610701565b50506001600255565b6000546001600160a01b03163314610b4a5760405162461bcd60e51b8152600401610594906118cf565b610b5460006112c5565b565b6000818310610b655781610b67565b825b9392505050565b600061056e42600454610b56565b6000546001600160a01b03163314610ba65760405162461bcd60e51b8152600401610594906118cf565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614158015610c1a57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b610ca15760405162461bcd60e51b815260206004820152604c60248201527f4c69717569646974795265776172643a3a7265636f76657245524332303a204360448201527f616e6e6f7420776974686472617720746865207374616b696e67206f7220726560648201526b776172647320746f6b656e7360a01b608482015260a401610594565b610cc7610cb66000546001600160a01b031690565b6001600160a01b0384169083611186565b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28910160405180910390a15050565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6002805403610d595760405162461bcd60e51b815260040161059490611898565b6002805560035460ff1615610da35760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610594565b33610dac611029565b600855610db7610b6e565b6007556001600160a01b03811615610dfe57610dd2816104a2565b6001600160a01b0382166000908152600a60209081526040808320939093556008546009909152919020555b60008211610e5c5760405162461bcd60e51b815260206004820152602560248201527f4c69717569646974795265776172643a3a5374616b653a43616e6e6f742073746044820152640616b6520360dc1b6064820152608401610594565b600b54610e69908361117a565b600b55336000908152600c6020526040902054610e86908361117a565b336000818152600c6020526040902091909155610ecf907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316903085611315565b60405182815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d90602001610701565b6000546001600160a01b03163314610f2b5760405162461bcd60e51b8152600401610594906118cf565b6004544211610fee5760405162461bcd60e51b815260206004820152607d60248201527f4c69717569646974795265776172643a3a73657452657761726473447572617460448201527f696f6e3a2050726576696f7573207265776172647320706572696f64206d757360648201527f7420626520636f6d706c657465206265666f7265206368616e67696e6720746860848201527f65206475726174696f6e20666f7220746865206e657720706572696f6400000060a482015260c401610594565b60068190556040518181527ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d39060200160405180910390a150565b6000600b5460000361103c575060085490565b61056e61106b600b5461050e670de0b6b3a76400006110656005546110656007546104e9610b6e565b90611162565b6008549061117a565b60008281526001602081905260409091200154611090816111e9565b610738838361125e565b336000908152600c60205260409020546110b390610573565b610b54610a0a565b6000546001600160a01b031633146110e55760405162461bcd60e51b8152600401610594906118cf565b6001600160a01b03811661114a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610594565b611153816112c5565b50565b6000610b678284611933565b6000610b678284611946565b6000610b67828461195d565b6000610b67828461197f565b6040516001600160a01b03831660248201526044810182905261073890849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611353565b6111538133611425565b6111fd8282610d0d565b6107b75760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6112688282610d0d565b156107b75760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b038085166024830152831660448201526064810182905261134d9085906323b872dd60e01b906084016111b2565b50505050565b60006113a8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166114899092919063ffffffff16565b80519091501561073857808060200190518101906113c69190611992565b6107385760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610594565b61142f8282610d0d565b6107b757611447816001600160a01b031660146114a0565b6114528360206114a0565b6040516020016114639291906119d8565b60408051601f198184030181529082905262461bcd60e51b825261059491600401611a4d565b6060611498848460008561163c565b949350505050565b606060006114af836002611946565b6114ba90600261197f565b67ffffffffffffffff8111156114d2576114d2611a80565b6040519080825280601f01601f1916602001820160405280156114fc576020820181803683370190505b509050600360fc1b8160008151811061151757611517611a96565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061154657611546611a96565b60200101906001600160f81b031916908160001a905350600061156a846002611946565b61157590600161197f565b90505b60018111156115ed576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106115a9576115a9611a96565b1a60f81b8282815181106115bf576115bf611a96565b60200101906001600160f81b031916908160001a90535060049490941c936115e681611aac565b9050611578565b508315610b675760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610594565b60608247101561169d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610594565b6001600160a01b0385163b6116f45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610594565b600080866001600160a01b031685876040516117109190611ac3565b60006040518083038185875af1925050503d806000811461174d576040519150601f19603f3d011682016040523d82523d6000602084013e611752565b606091505b509150915061176282828661176d565b979650505050505050565b6060831561177c575081610b67565b82511561178c5782518084602001fd5b8160405162461bcd60e51b81526004016105949190611a4d565b80356001600160a01b03811681146117bd57600080fd5b919050565b6000602082840312156117d457600080fd5b610b67826117a6565b6000602082840312156117ef57600080fd5b81356001600160e01b031981168114610b6757600080fd5b60006020828403121561181957600080fd5b5035919050565b6000806040838503121561183357600080fd5b82359150611843602084016117a6565b90509250929050565b6000806040838503121561185f57600080fd5b50508035926020909101359150565b6000806040838503121561188157600080fd5b61188a836117a6565b946020939093013593505050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561191657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561051a5761051a61191d565b808202811582820484141761051a5761051a61191d565b60008261197a57634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561051a5761051a61191d565b6000602082840312156119a457600080fd5b81518015158114610b6757600080fd5b60005b838110156119cf5781810151838201526020016119b7565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611a108160178501602088016119b4565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611a418160288401602088016119b4565b01602801949350505050565b6020815260008251806020840152611a6c8160408501602087016119b4565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081611abb57611abb61191d565b506000190190565b60008251611ad58184602087016119b4565b919091019291505056fea264697066735822122060e2aa0ba42307d9c8e63fe3c8ec9c8fde2b2dfc4344bc2705f6e914488232f464736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102055760003560e01c80637b0a47ee1161011a578063c8f33c91116100ad578063d547741f1161007c578063d547741f14610462578063df136d6514610475578063e9fad8ee1461047e578063ebe2b12b14610486578063f2fde38b1461048f57600080fd5b8063c8f33c9114610417578063cc1a378f14610420578063cd3daf9d14610433578063d1af0c7d1461043b57600080fd5b80638da5cb5b116100e95780638da5cb5b146103d857806391d14854146103e9578063a217fddf146103fc578063a694fc3a1461040457600080fd5b80637b0a47ee1461039457806380faa57d1461039d5780638980f11f146103a55780638b876347146103b857600080fd5b806336568abe1161019d5780635c975abb1161016c5780635c975abb1461030657806370a0823114610311578063715018a61461033a57806372f702f3146103425780637ae2b5c71461038157600080fd5b806336568abe146102cf578063386a9525146102e25780633c6b16ab146102eb5780633d18b912146102fe57600080fd5b80631c1f78eb116101d95780631c1f78eb1461027b578063248a9ca3146102835780632e1a7d4d146102a75780632f2ff15d146102bc57600080fd5b80628cc2621461020a57806301ffc9a7146102305780630700037d1461025357806318160ddd14610273575b600080fd5b61021d6102183660046117c2565b6104a2565b6040519081526020015b60405180910390f35b61024361023e3660046117dd565b610520565b6040519015158152602001610227565b61021d6102613660046117c2565b600a6020526000908152604090205481565b600b5461021d565b61021d610555565b61021d610291366004611807565b6000908152600160208190526040909120015490565b6102ba6102b5366004611807565b610573565b005b6102ba6102ca366004611820565b610712565b6102ba6102dd366004611820565b61073d565b61021d60065481565b6102ba6102f9366004611807565b6107bb565b6102ba610a0a565b60035460ff16610243565b61021d61031f3660046117c2565b6001600160a01b03166000908152600c602052604090205490565b6102ba610b20565b6103697f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610227565b61021d61038f36600461184c565b610b56565b61021d60055481565b61021d610b6e565b6102ba6103b336600461186e565b610b7c565b61021d6103c63660046117c2565b60096020526000908152604090205481565b6000546001600160a01b0316610369565b6102436103f7366004611820565b610d0d565b61021d600081565b6102ba610412366004611807565b610d38565b61021d60075481565b6102ba61042e366004611807565b610f01565b61021d611029565b6103697f000000000000000000000000000000000000000000000000000000000000000081565b6102ba610470366004611820565b611074565b61021d60085481565b6102ba61109a565b61021d60045481565b6102ba61049d3660046117c2565b6110bb565b6001600160a01b0381166000908152600a6020908152604080832054600990925282205461051a919061051490670de0b6b3a76400009061050e906104ef906104e9611029565b90611156565b6001600160a01b0388166000908152600c602052604090205490611162565b9061116e565b9061117a565b92915050565b60006001600160e01b03198216637965db0b60e01b148061051a57506301ffc9a760e01b6001600160e01b031983161461051a565b600061056e60065460055461116290919063ffffffff16565b905090565b600280540361059d5760405162461bcd60e51b815260040161059490611898565b60405180910390fd5b60028055336105aa611029565b6008556105b5610b6e565b6007556001600160a01b038116156105fc576105d0816104a2565b6001600160a01b0382166000908152600a60209081526040808320939093556008546009909152919020555b600082116106615760405162461bcd60e51b815260206004820152602c60248201527f4c69717569646974795265776172643a3a77697468647261773a2043616e6e6f60448201526b07420776974686472617720360a41b6064820152608401610594565b600b5461066e9083611156565b600b55336000908152600c602052604090205461068b9083611156565b336000818152600c60205260409020919091556106d3907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169084611186565b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5906020015b60405180910390a250506001600255565b6000828152600160208190526040909120015461072e816111e9565b61073883836111f3565b505050565b6001600160a01b03811633146107ad5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610594565b6107b7828261125e565b5050565b6000546001600160a01b031633146107e55760405162461bcd60e51b8152600401610594906118cf565b60006107ef611029565b6008556107fa610b6e565b6007556001600160a01b0381161561084157610815816104a2565b6001600160a01b0382166000908152600a60209081526040808320939093556008546009909152919020555b60045442106108605760065461085890839061116e565b6005556108a3565b6004546000906108709042611156565b905060006108896005548361116290919063ffffffff16565b60065490915061089d9061050e868461117a565b60055550505b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561090a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092e9190611904565b90506109456006548261116e90919063ffffffff16565b60055411156109bc5760405162461bcd60e51b815260206004820152603d60248201527f4c69717569646974795265776172643a3a6e6f74696679526577617264416d6f60448201527f756e743a2050726f76696465642072657761726420746f6f20686967680000006064820152608401610594565b4260078190556006546109cf919061117a565b6004556040518381527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a1505050565b6002805403610a2b5760405162461bcd60e51b815260040161059490611898565b6002805533610a38611029565b600855610a43610b6e565b6007556001600160a01b03811615610a8a57610a5e816104a2565b6001600160a01b0382166000908152600a60209081526040808320939093556008546009909152919020555b336000908152600a60205260409020548015610b1757336000818152600a6020526040812055610ae5907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169083611186565b60405181815233907fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e048690602001610701565b50506001600255565b6000546001600160a01b03163314610b4a5760405162461bcd60e51b8152600401610594906118cf565b610b5460006112c5565b565b6000818310610b655781610b67565b825b9392505050565b600061056e42600454610b56565b6000546001600160a01b03163314610ba65760405162461bcd60e51b8152600401610594906118cf565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614158015610c1a57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b610ca15760405162461bcd60e51b815260206004820152604c60248201527f4c69717569646974795265776172643a3a7265636f76657245524332303a204360448201527f616e6e6f7420776974686472617720746865207374616b696e67206f7220726560648201526b776172647320746f6b656e7360a01b608482015260a401610594565b610cc7610cb66000546001600160a01b031690565b6001600160a01b0384169083611186565b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28910160405180910390a15050565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6002805403610d595760405162461bcd60e51b815260040161059490611898565b6002805560035460ff1615610da35760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610594565b33610dac611029565b600855610db7610b6e565b6007556001600160a01b03811615610dfe57610dd2816104a2565b6001600160a01b0382166000908152600a60209081526040808320939093556008546009909152919020555b60008211610e5c5760405162461bcd60e51b815260206004820152602560248201527f4c69717569646974795265776172643a3a5374616b653a43616e6e6f742073746044820152640616b6520360dc1b6064820152608401610594565b600b54610e69908361117a565b600b55336000908152600c6020526040902054610e86908361117a565b336000818152600c6020526040902091909155610ecf907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316903085611315565b60405182815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d90602001610701565b6000546001600160a01b03163314610f2b5760405162461bcd60e51b8152600401610594906118cf565b6004544211610fee5760405162461bcd60e51b815260206004820152607d60248201527f4c69717569646974795265776172643a3a73657452657761726473447572617460448201527f696f6e3a2050726576696f7573207265776172647320706572696f64206d757360648201527f7420626520636f6d706c657465206265666f7265206368616e67696e6720746860848201527f65206475726174696f6e20666f7220746865206e657720706572696f6400000060a482015260c401610594565b60068190556040518181527ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d39060200160405180910390a150565b6000600b5460000361103c575060085490565b61056e61106b600b5461050e670de0b6b3a76400006110656005546110656007546104e9610b6e565b90611162565b6008549061117a565b60008281526001602081905260409091200154611090816111e9565b610738838361125e565b336000908152600c60205260409020546110b390610573565b610b54610a0a565b6000546001600160a01b031633146110e55760405162461bcd60e51b8152600401610594906118cf565b6001600160a01b03811661114a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610594565b611153816112c5565b50565b6000610b678284611933565b6000610b678284611946565b6000610b67828461195d565b6000610b67828461197f565b6040516001600160a01b03831660248201526044810182905261073890849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611353565b6111538133611425565b6111fd8282610d0d565b6107b75760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6112688282610d0d565b156107b75760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b038085166024830152831660448201526064810182905261134d9085906323b872dd60e01b906084016111b2565b50505050565b60006113a8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166114899092919063ffffffff16565b80519091501561073857808060200190518101906113c69190611992565b6107385760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610594565b61142f8282610d0d565b6107b757611447816001600160a01b031660146114a0565b6114528360206114a0565b6040516020016114639291906119d8565b60408051601f198184030181529082905262461bcd60e51b825261059491600401611a4d565b6060611498848460008561163c565b949350505050565b606060006114af836002611946565b6114ba90600261197f565b67ffffffffffffffff8111156114d2576114d2611a80565b6040519080825280601f01601f1916602001820160405280156114fc576020820181803683370190505b509050600360fc1b8160008151811061151757611517611a96565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061154657611546611a96565b60200101906001600160f81b031916908160001a905350600061156a846002611946565b61157590600161197f565b90505b60018111156115ed576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106115a9576115a9611a96565b1a60f81b8282815181106115bf576115bf611a96565b60200101906001600160f81b031916908160001a90535060049490941c936115e681611aac565b9050611578565b508315610b675760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610594565b60608247101561169d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610594565b6001600160a01b0385163b6116f45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610594565b600080866001600160a01b031685876040516117109190611ac3565b60006040518083038185875af1925050503d806000811461174d576040519150601f19603f3d011682016040523d82523d6000602084013e611752565b606091505b509150915061176282828661176d565b979650505050505050565b6060831561177c575081610b67565b82511561178c5782518084602001fd5b8160405162461bcd60e51b81526004016105949190611a4d565b80356001600160a01b03811681146117bd57600080fd5b919050565b6000602082840312156117d457600080fd5b610b67826117a6565b6000602082840312156117ef57600080fd5b81356001600160e01b031981168114610b6757600080fd5b60006020828403121561181957600080fd5b5035919050565b6000806040838503121561183357600080fd5b82359150611843602084016117a6565b90509250929050565b6000806040838503121561185f57600080fd5b50508035926020909101359150565b6000806040838503121561188157600080fd5b61188a836117a6565b946020939093013593505050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561191657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561051a5761051a61191d565b808202811582820484141761051a5761051a61191d565b60008261197a57634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561051a5761051a61191d565b6000602082840312156119a457600080fd5b81518015158114610b6757600080fd5b60005b838110156119cf5781810151838201526020016119b7565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611a108160178501602088016119b4565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611a418160288401602088016119b4565b01602801949350505050565b6020815260008251806020840152611a6c8160408501602087016119b4565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081611abb57611abb61191d565b506000190190565b60008251611ad58184602087016119b4565b919091019291505056fea264697066735822122060e2aa0ba42307d9c8e63fe3c8ec9c8fde2b2dfc4344bc2705f6e914488232f464736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "params": {
          "_account": "address"
        }
      },
      "constructor": {
        "params": {
          "_owner": "address",
          "_rewardsToken": "address",
          "_stakingToken": "uint256"
        }
      },
      "earned(address)": {
        "params": {
          "_account": "address"
        }
      },
      "getReward()": {
        "details": "updates rewards on callfrom the total reward a vestingRatio amount is locked into vesting and the rest is transferedif vesting period has passed transfer all rewards"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "min(uint256,uint256)": {
        "params": {
          "_a": "uint",
          "_b": "uint"
        }
      },
      "notifyRewardAmount(uint256)": {
        "details": "Only owner  can call itIncreases duration of rewards",
        "params": {
          "_reward": "uint"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "recoverERC20(address,uint256)": {
        "details": "Only owner  can call it",
        "params": {
          "_tokenAddress": "address",
          "_tokenAmount": "uint"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setRewardsDuration(uint256)": {
        "details": "Only owner  can call itPrevious rewards must be complete",
        "params": {
          "_rewardsDuration": "uint"
        }
      },
      "stake(uint256)": {
        "details": "updates rewards on call",
        "params": {
          "_amount": "uint"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256)": {
        "details": "updates rewards on call",
        "params": {
          "_amount": "uint"
        }
      }
    },
    "stateVariables": {
      "_balances": {
        "details": "Tracks the amount of staked tokens per user"
      },
      "_totalSupply": {
        "details": "Tracks the total supply of staked tokens"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Recovered(address,uint256)": {
        "notice": "An event emitted when a erc20 token is recovered"
      },
      "RewardAdded(uint256)": {
        "notice": "An event emitted when a reward is added"
      },
      "RewardPaid(address,uint256)": {
        "notice": "An event emitted when reward is paid to a user"
      },
      "RewardsDurationUpdated(uint256)": {
        "notice": "An event emitted when the rewards duration is updated"
      },
      "Staked(address,uint256)": {
        "notice": "An event emitted when tokens are staked to earn rewards"
      },
      "Withdrawn(address,uint256)": {
        "notice": "An event emitted when staked tokens are withdrawn"
      }
    },
    "kind": "user",
    "methods": {
      "balanceOf(address)": {
        "notice": "Returns the amount of staked tokens from specific user."
      },
      "constructor": {
        "notice": "Constructor"
      },
      "earned(address)": {
        "notice": "Returns the amount of reward tokens a user has earned."
      },
      "exit()": {
        "notice": "Removes all stake and transfers all rewards to the staker."
      },
      "getReward()": {
        "notice": "Transfers to the caller the current amount of rewards tokens earned."
      },
      "lastTimeRewardApplicable()": {
        "notice": "Returns the minimun between current block timestamp or the finish period of rewards."
      },
      "lastUpdateTime()": {
        "notice": "Last time rewards were updated"
      },
      "min(uint256,uint256)": {
        "notice": "Returns the minimun between two variables"
      },
      "notifyRewardAmount(uint256)": {
        "notice": "Notifies the contract that reward has been added to be given."
      },
      "periodFinish()": {
        "notice": "Tracks the period where users stop earning rewards"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders"
      },
      "rewardPerToken()": {
        "notice": "Returns the calculated reward per token deposited."
      },
      "rewardPerTokenStored()": {
        "notice": "Amount of reward calculated per token stored"
      },
      "rewards(address)": {
        "notice": "Tracks the user rewards"
      },
      "rewardsDuration()": {
        "notice": "How long the rewards lasts, it updates when more rewards are added"
      },
      "rewardsToken()": {
        "notice": "Address of the reward"
      },
      "setRewardsDuration(uint256)": {
        "notice": "Updates the reward duration"
      },
      "stake(uint256)": {
        "notice": "Transfer staking token to contract"
      },
      "stakingToken()": {
        "notice": "Address of the staking token"
      },
      "totalSupply()": {
        "notice": "Returns the total amount of staked tokens."
      },
      "userRewardPerTokenPaid(address)": {
        "notice": "Track the rewards paid to users"
      },
      "withdraw(uint256)": {
        "notice": "Remove staking token and transfer back to staker"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10071,
        "contract": "contracts/LiquidityReward.sol:LiquidityReward",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9545,
        "contract": "contracts/LiquidityReward.sol:LiquidityReward",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)9540_storage)"
      },
      {
        "astId": 11014,
        "contract": "contracts/LiquidityReward.sol:LiquidityReward",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 10929,
        "contract": "contracts/LiquidityReward.sol:LiquidityReward",
        "label": "_paused",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 14321,
        "contract": "contracts/LiquidityReward.sol:LiquidityReward",
        "label": "periodFinish",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 14324,
        "contract": "contracts/LiquidityReward.sol:LiquidityReward",
        "label": "rewardRate",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 14328,
        "contract": "contracts/LiquidityReward.sol:LiquidityReward",
        "label": "rewardsDuration",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 14331,
        "contract": "contracts/LiquidityReward.sol:LiquidityReward",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 14334,
        "contract": "contracts/LiquidityReward.sol:LiquidityReward",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 14339,
        "contract": "contracts/LiquidityReward.sol:LiquidityReward",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14344,
        "contract": "contracts/LiquidityReward.sol:LiquidityReward",
        "label": "rewards",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14347,
        "contract": "contracts/LiquidityReward.sol:LiquidityReward",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 14352,
        "contract": "contracts/LiquidityReward.sol:LiquidityReward",
        "label": "_balances",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)9540_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)9540_storage"
      },
      "t_struct(RoleData)9540_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 9537,
            "contract": "contracts/LiquidityReward.sol:LiquidityReward",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 9539,
            "contract": "contracts/LiquidityReward.sol:LiquidityReward",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}