{
  "address": "0xA98C047C827758AF23E044c0Aa4859D1b11eA7ad",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "Token18",
          "name": "asset_",
          "type": "address"
        },
        {
          "internalType": "contract IController",
          "name": "controller_",
          "type": "address"
        },
        {
          "internalType": "contract IProduct",
          "name": "long_",
          "type": "address"
        },
        {
          "internalType": "contract IProduct",
          "name": "short_",
          "type": "address"
        },
        {
          "internalType": "UFixed18",
          "name": "targetLeverage_",
          "type": "uint256"
        },
        {
          "internalType": "UFixed18",
          "name": "maxCollateral_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BalancedVaultDepositLimitExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalancedVaultRedemptionLimitExceeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Fixed18OverflowError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "value",
          "type": "int256"
        }
      ],
      "name": "UFixed18UnderflowError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "UInitializableAlreadyInitializedError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UInitializableNotInitializingError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UInitializableZeroVersionError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "UFixed18",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "UFixed18",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "UFixed18",
          "name": "targetCollateral",
          "type": "uint256"
        }
      ],
      "name": "CollateralUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "UFixed18",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IProduct",
          "name": "product",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "UFixed18",
          "name": "targetPosition",
          "type": "uint256"
        }
      ],
      "name": "PositionUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "UFixed18",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Redemption",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "UFixed18",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "UFixed18",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "Token18",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "contract ICollateral",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "UFixed18",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "convertToAssets",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "UFixed18",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "convertToShares",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "UFixed18",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "long",
      "outputs": [
        {
          "internalType": "contract IProduct",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxCollateral",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxDeposit",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "maxRedeem",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "UFixed18",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "short",
      "outputs": [
        {
          "internalType": "contract IProduct",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sync",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetLeverage",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUnclaimed",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "UFixed18",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "UFixed18",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "unclaimed",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc382f522e5bb7ac8c034d4f11318b10a46de6ba5db05da92fcd4cd3f23adc786",
  "receipt": {
    "to": null,
    "from": "0xEA8b3DF14B0bad2F6DD0Ed847DCc54Fc100e40C3",
    "contractAddress": "0xA98C047C827758AF23E044c0Aa4859D1b11eA7ad",
    "transactionIndex": 1,
    "gasUsed": "6438516",
    "logsBloom": "0x
    "blockHash": "0x4b645c972cc00b21654c91712144bcbd1591f78d4f12a8d85792915c428a6f7c",
    "transactionHash": "0xc382f522e5bb7ac8c034d4f11318b10a46de6ba5db05da92fcd4cd3f23adc786",
    "logs": [],
    "blockNumber": 14028958,
    "cumulativeGasUsed": "6438516",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x52C64b8998eB7C80b6F526E99E29ABdcC86B841b",
    "0x6cF1A4373ba7D10bC37fAeC4694807B626B7f161",
    "0xD0a5561EbC96A48378a0A6457c01dEfBA3C464e9",
    "0x5d3D5A4cf46103B30262134c0b3e99392f5FAEA5",
    "2500000000000000000",
    "3000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "063188de8aaadb23411720861c2c6c65",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"Token18\",\"name\":\"asset_\",\"type\":\"address\"},{\"internalType\":\"contract IController\",\"name\":\"controller_\",\"type\":\"address\"},{\"internalType\":\"contract IProduct\",\"name\":\"long_\",\"type\":\"address\"},{\"internalType\":\"contract IProduct\",\"name\":\"short_\",\"type\":\"address\"},{\"internalType\":\"UFixed18\",\"name\":\"targetLeverage_\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"maxCollateral_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BalancedVaultDepositLimitExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalancedVaultRedemptionLimitExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Fixed18OverflowError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"UFixed18UnderflowError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"UInitializableAlreadyInitializedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UInitializableNotInitializingError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UInitializableZeroVersionError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"UFixed18\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"UFixed18\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"UFixed18\",\"name\":\"targetCollateral\",\"type\":\"uint256\"}],\"name\":\"CollateralUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"UFixed18\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IProduct\",\"name\":\"product\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"UFixed18\",\"name\":\"targetPosition\",\"type\":\"uint256\"}],\"name\":\"PositionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"UFixed18\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Redemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"UFixed18\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"UFixed18\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"Token18\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"contract ICollateral\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"UFixed18\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"UFixed18\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"UFixed18\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"long\",\"outputs\":[{\"internalType\":\"contract IProduct\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCollateral\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"UFixed18\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"short\",\"outputs\":[{\"internalType\":\"contract IProduct\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetLeverage\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnclaimed\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"UFixed18\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"UFixed18\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unclaimed\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Vault deploys and rebalances collateral between the corresponding long and short markets, while attempting to      maintain `targetLeverage` with its open positions at any given time. Deposits are only gated in so much as to cap      the maximum amount of assets in the vault.      The vault has a \\\"delayed mint\\\" mechanism for shares on deposit. After depositing to the vault, a user must wait      until the next settlement of the underlying products in order for shares to be reflected in the getters.      The shares will be fully reflected in contract state when the next settlement occurs on the vault itself.      Similarly, when redeeming shares, underlying assets are not claimable until a settlement occurs.      Each state changing interaction triggers the `settle` flywheel in order to bring the vault to the      desired state.      In the event that there is not a settlement for a long period of time, keepers can call the `sync` method to      force settlement and rebalancing. This is most useful to prevent vault liquidation due to PnL changes      causing the vault to be in an unhealthy state (far away from target leverage)\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"params\":{\"amount\":\"Amount of shares that spender can operate on\",\"spender\":\"Address which can spend operate on shares\"},\"returns\":{\"_0\":\"bool true if the approval was successful, otherwise reverts\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"Account to query balance of\"},\"returns\":{\"_0\":\"Number of shares held by `account`\"}},\"claim(address)\":{\"params\":{\"account\":\"The account to claim for\"}},\"convertToAssets(uint256)\":{\"params\":{\"shares\":\"Number of shares to convert to assets\"},\"returns\":{\"_0\":\"Amount of assets for the given shares\"}},\"convertToShares(uint256)\":{\"params\":{\"assets\":\"Number of assets to convert to shares\"},\"returns\":{\"_0\":\"Amount of shares for the given assets\"}},\"decimals()\":{\"returns\":{\"_0\":\"Decimal places of the share share token\"}},\"deposit(uint256,address)\":{\"params\":{\"account\":\"The account to deposit on behalf of\",\"assets\":\"The amount of assets to deposit\"}},\"initialize(string,string)\":{\"params\":{\"name_\":\"ERC20 asset name\",\"symbol_\":\"ERC20 asset symbol\"}},\"maxDeposit(address)\":{\"details\":\"Only exact when vault is synced, otherwise approximate\",\"returns\":{\"_0\":\"Maximum available deposit amount\"}},\"maxRedeem(address)\":{\"details\":\"Only exact when vault is synced, otherwise approximate\",\"params\":{\"account\":\"The account to redeem for\"},\"returns\":{\"_0\":\"Maximum available redeemable amount\"}},\"redeem(uint256,address)\":{\"details\":\"Does not return any assets to the user due to delayed settlement. Use `claim` to claim assets      If account is not msg.sender, requires prior spending approval\",\"params\":{\"account\":\"The account to redeem on behalf of\",\"shares\":\"The amount of shares to redeem\"}},\"sync()\":{\"details\":\"Should be called by a keeper when the vault approaches a liquidation state on either side\"},\"totalAssets()\":{\"returns\":{\"_0\":\"Amount of assets held by the vault\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"Amount of shares currently issued\"}},\"totalUnclaimed()\":{\"returns\":{\"_0\":\"Total unclaimed assets in vault\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"Amount of shares to send\",\"to\":\"Address to send shares to\"},\"returns\":{\"_0\":\"bool true if the transfer was successful, otherwise reverts\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"Amount of shares to send\",\"from\":\"Address to send shares from\",\"to\":\"Address to send shares to\"},\"returns\":{\"_0\":\"bool true if the transfer was successful, otherwise reverts\"}},\"unclaimed(address)\":{\"params\":{\"account\":\"Account to query unclaimed balance of\"},\"returns\":{\"_0\":\"`account`'s unclaimed assets\"}}},\"stateVariables\":{\"_balanceOf\":{\"details\":\"Mapping of shares of the vault per user\"},\"_deposit\":{\"details\":\"Deposits that have not been settled, or have been settled but not yet processed by this contract\"},\"_deposits\":{\"details\":\"Mapping of pending (not yet converted to shares) per user\"},\"_latestVersion\":{\"details\":\"The latest version that a pending deposit or redemption has been placed\"},\"_latestVersions\":{\"details\":\"Mapping of the latest version that a pending deposit or redemption has been placed per user\"},\"_redemption\":{\"details\":\"Redemptions that have not been settled, or have been settled but not yet processed by this contract\"},\"_redemptions\":{\"details\":\"Mapping of pending (not yet withdrawn) per user\"},\"_totalSupply\":{\"details\":\"Total number of shares across all users\"},\"_totalUnclaimed\":{\"details\":\"Mapping of unclaimed underlying of the vault per user\"},\"_unclaimed\":{\"details\":\"Mapping of unclaimed underlying of the vault per user\"},\"_versions\":{\"details\":\"Mapping of versions of the vault state at a given oracle version\"},\"allowance\":{\"details\":\"Mapping of allowance across all users\"},\"asset\":{\"details\":\"The underlying asset of the vault\"},\"collateral\":{\"details\":\"The address of the Perennial collateral contract\"},\"controller\":{\"details\":\"The address of the Perennial controller contract\"},\"long\":{\"details\":\"The address of the Perennial product on the long side\"},\"maxCollateral\":{\"details\":\"The collateral cap for the vault\"},\"name\":{\"details\":\"The ERC20 name of the vault\"},\"short\":{\"details\":\"The address of the Perennial product on the short side\"},\"symbol\":{\"details\":\"The ERC20 symbol of the vault\"},\"targetLeverage\":{\"details\":\"The target leverage amount for the vault\"}},\"title\":\"BalancedVault\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Sets `amount` as the allowance of `spender` over the caller's shares\"},\"balanceOf(address)\":{\"notice\":\"Number of shares held by `account`\"},\"claim(address)\":{\"notice\":\"Claims all claimable assets for account, sending assets to account\"},\"convertToAssets(uint256)\":{\"notice\":\"Converts a given amount of shares to assets\"},\"convertToShares(uint256)\":{\"notice\":\"Converts a given amount of assets to shares\"},\"decimals()\":{\"notice\":\"Returns the decimals places of the share token\"},\"deposit(uint256,address)\":{\"notice\":\"Deposits `assets` assets into the vault, returning shares to `account` after the deposit settles.\"},\"initialize(string,string)\":{\"notice\":\"Initializes the contract state\"},\"maxDeposit(address)\":{\"notice\":\"The maximum available deposit amount\"},\"maxRedeem(address)\":{\"notice\":\"The maximum available redeemable amount\"},\"redeem(uint256,address)\":{\"notice\":\"Redeems `shares` shares from the vault\"},\"sync()\":{\"notice\":\"Rebalances the collateral and position of the vault without a deposit or withdraw\"},\"totalAssets()\":{\"notice\":\"The total amount of assets currently held by the vault\"},\"totalSupply()\":{\"notice\":\"The total amount of shares currently issued\"},\"totalUnclaimed()\":{\"notice\":\"Total unclaimed assets in vault\"},\"transfer(address,uint256)\":{\"notice\":\"Moves `amount` shares from the caller's account to `to`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Moves `amount` shares from `from to `to`\"},\"unclaimed(address)\":{\"notice\":\"`account`'s unclaimed assets\"}},\"notice\":\"ERC4626 vault that manages a 50-50 position between long-short markets of the same payoff on Perennial.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@equilibria/perennial-vaults/contracts/BalancedVault.sol\":\"BalancedVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@equilibria/emptyset-batcher/interfaces/IBatcher.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"@equilibria/root/token/types/Token18.sol\\\";\\nimport \\\"@equilibria/root/token/types/Token6.sol\\\";\\nimport \\\"../interfaces/IEmptySetReserve.sol\\\";\\n\\ninterface IBatcher {\\n    event Wrap(address indexed to, UFixed18 amount);\\n    event Unwrap(address indexed to, UFixed18 amount);\\n    event Rebalance(UFixed18 newMinted, UFixed18 newRedeemed);\\n    event Close(UFixed18 amount);\\n\\n    error BatcherNotImplementedError();\\n    error BatcherBalanceMismatchError(UFixed18 oldBalance, UFixed18 newBalance);\\n\\n    function RESERVE() external view returns (IEmptySetReserve); // solhint-disable-line func-name-mixedcase\\n    function USDC() external view returns (Token6); // solhint-disable-line func-name-mixedcase\\n    function DSU() external view returns (Token18); // solhint-disable-line func-name-mixedcase\\n    function totalBalance() external view returns (UFixed18);\\n    function wrap(UFixed18 amount, address to) external;\\n    function unwrap(UFixed18 amount, address to) external;\\n    function rebalance() external;\\n}\\n\",\"keccak256\":\"0xb9c0b0fc0dfcd44492b029ede04d304f6906b030cb925dc0fc2579e8c58d9734\",\"license\":\"Apache-2.0\"},\"@equilibria/emptyset-batcher/interfaces/IEmptySetReserve.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\n\\ninterface IEmptySetReserve {\\n    event Redeem(address indexed account, uint256 costAmount, uint256 redeemAmount);\\n    event Mint(address indexed account, uint256 mintAmount, uint256 costAmount);\\n    event Repay(address indexed account, uint256 repayAmount);\\n\\n    function debt(address borrower) external view returns (UFixed18);\\n    function repay(address borrower, UFixed18 amount) external;\\n    function mint(UFixed18 amount) external;\\n    function redeem(UFixed18 amount) external;\\n}\\n\",\"keccak256\":\"0xdb96e26082a471c7803e892ecd8d2877f23cd9e31f13a3e407dd5f8909078864\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-oracle/contracts/interfaces/IOracleProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/Fixed18.sol\\\";\\n\\ninterface IOracleProvider {\\n    /// @dev Error for invalid oracle round\\n    error InvalidOracleRound();\\n\\n    /// @dev A singular oracle version with its corresponding data\\n    struct OracleVersion {\\n        /// @dev The iterative version\\n        uint256 version;\\n\\n        /// @dev the timestamp of the oracle update\\n        uint256 timestamp;\\n\\n        /// @dev The oracle price of the corresponding version\\n        Fixed18 price;\\n    }\\n\\n    function sync() external returns (OracleVersion memory);\\n    function currentVersion() external view returns (OracleVersion memory);\\n    function atVersion(uint256 oracleVersion) external view returns (OracleVersion memory);\\n}\\n\",\"keccak256\":\"0x11e8ebb40917dcce08a6366e6fa8d25b037552d4ea66b96c13e6f45b1f817c52\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-vaults/contracts/BalancedVault.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./interfaces/IBalancedVault.sol\\\";\\nimport \\\"@equilibria/root/control/unstructured/UInitializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/**\\n * @title BalancedVault\\n * @notice ERC4626 vault that manages a 50-50 position between long-short markets of the same payoff on Perennial.\\n * @dev Vault deploys and rebalances collateral between the corresponding long and short markets, while attempting to\\n *      maintain `targetLeverage` with its open positions at any given time. Deposits are only gated in so much as to cap\\n *      the maximum amount of assets in the vault.\\n *\\n *      The vault has a \\\"delayed mint\\\" mechanism for shares on deposit. After depositing to the vault, a user must wait\\n *      until the next settlement of the underlying products in order for shares to be reflected in the getters.\\n *      The shares will be fully reflected in contract state when the next settlement occurs on the vault itself.\\n *      Similarly, when redeeming shares, underlying assets are not claimable until a settlement occurs.\\n *      Each state changing interaction triggers the `settle` flywheel in order to bring the vault to the\\n *      desired state.\\n *      In the event that there is not a settlement for a long period of time, keepers can call the `sync` method to\\n *      force settlement and rebalancing. This is most useful to prevent vault liquidation due to PnL changes\\n *      causing the vault to be in an unhealthy state (far away from target leverage)\\n */\\ncontract BalancedVault is IBalancedVault, UInitializable {\\n    UFixed18 constant private TWO = UFixed18.wrap(2e18);\\n\\n    /// @dev The address of the Perennial controller contract\\n    IController public immutable controller;\\n\\n    /// @dev The address of the Perennial collateral contract\\n    ICollateral public immutable collateral;\\n\\n    /// @dev The address of the Perennial product on the long side\\n    IProduct public immutable long;\\n\\n    /// @dev The address of the Perennial product on the short side\\n    IProduct public immutable short;\\n\\n    /// @dev The target leverage amount for the vault\\n    UFixed18 public immutable targetLeverage;\\n\\n    /// @dev The collateral cap for the vault\\n    UFixed18 public immutable maxCollateral;\\n\\n    /// @dev The underlying asset of the vault\\n    Token18 public immutable asset;\\n\\n    /// @dev The ERC20 name of the vault\\n    string public name;\\n\\n    /// @dev The ERC20 symbol of the vault\\n    string public symbol;\\n\\n    /// @dev Mapping of allowance across all users\\n    mapping(address => mapping(address => UFixed18)) public allowance;\\n\\n    /// @dev Mapping of shares of the vault per user\\n    mapping(address => UFixed18) private _balanceOf;\\n\\n    /// @dev Total number of shares across all users\\n    UFixed18 private _totalSupply;\\n\\n    /// @dev Mapping of unclaimed underlying of the vault per user\\n    mapping(address => UFixed18) private _unclaimed;\\n\\n    /// @dev Mapping of unclaimed underlying of the vault per user\\n    UFixed18 private _totalUnclaimed;\\n\\n    /// @dev Deposits that have not been settled, or have been settled but not yet processed by this contract\\n    UFixed18 private _deposit;\\n\\n    /// @dev Redemptions that have not been settled, or have been settled but not yet processed by this contract\\n    UFixed18 private _redemption;\\n\\n    /// @dev The latest version that a pending deposit or redemption has been placed\\n    uint256 private _latestVersion;\\n\\n    /// @dev Mapping of pending (not yet converted to shares) per user\\n    mapping(address => UFixed18) private _deposits;\\n\\n    /// @dev Mapping of pending (not yet withdrawn) per user\\n    mapping(address => UFixed18) private _redemptions;\\n\\n    /// @dev Mapping of the latest version that a pending deposit or redemption has been placed per user\\n    mapping(address => uint256) private _latestVersions;\\n\\n    /// @dev Mapping of versions of the vault state at a given oracle version\\n    mapping(uint256 => Version) private _versions;\\n\\n    constructor(\\n        Token18 asset_,\\n        IController controller_,\\n        IProduct long_,\\n        IProduct short_,\\n        UFixed18 targetLeverage_,\\n        UFixed18 maxCollateral_\\n    ) {\\n        asset = asset_;\\n        controller = controller_;\\n        collateral = controller_.collateral();\\n        long = long_;\\n        short = short_;\\n        targetLeverage = targetLeverage_;\\n        maxCollateral = maxCollateral_;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract state\\n     * @param name_ ERC20 asset name\\n     * @param symbol_ ERC20 asset symbol\\n     */\\n    function initialize(string memory name_, string memory symbol_) external initializer(1) {\\n        name = name_;\\n        symbol = symbol_;\\n\\n        asset.approve(address(collateral));\\n    }\\n\\n    /**\\n     * @notice Rebalances the collateral and position of the vault without a deposit or withdraw\\n     * @dev Should be called by a keeper when the vault approaches a liquidation state on either side\\n     */\\n    function sync() external {\\n        (VersionContext memory context, ) = _settle(address(0));\\n        _rebalance(context, UFixed18Lib.ZERO);\\n    }\\n\\n    /**\\n     * @notice Deposits `assets` assets into the vault, returning shares to `account` after the deposit settles.\\n     * @param assets The amount of assets to deposit\\n     * @param account The account to deposit on behalf of\\n     */\\n    function deposit(UFixed18 assets, address account) external {\\n        (VersionContext memory context, ) = _settle(account);\\n        if (assets.gt(_maxDepositAtVersion(context))) revert BalancedVaultDepositLimitExceeded();\\n\\n        _deposit = _deposit.add(assets);\\n        _latestVersion = context.version;\\n        _deposits[account] = _deposits[account].add(assets);\\n        _latestVersions[account] = context.version;\\n        emit Deposit(msg.sender, account, context.version, assets);\\n\\n        asset.pull(msg.sender, assets);\\n\\n        _rebalance(context, UFixed18Lib.ZERO);\\n    }\\n\\n    /**\\n     * @notice Redeems `shares` shares from the vault\\n     * @dev Does not return any assets to the user due to delayed settlement. Use `claim` to claim assets\\n     *      If account is not msg.sender, requires prior spending approval\\n     * @param shares The amount of shares to redeem\\n     * @param account The account to redeem on behalf of\\n     */\\n    function redeem(UFixed18 shares, address account) external {\\n        if (msg.sender != account) _consumeAllowance(account, msg.sender, shares);\\n\\n        (VersionContext memory context, VersionContext memory accountContext) = _settle(account);\\n        if (shares.gt(_maxRedeemAtVersion(context, accountContext, account))) revert BalancedVaultRedemptionLimitExceeded();\\n\\n        _redemption = _redemption.add(shares);\\n        _latestVersion = context.version;\\n        _redemptions[account] = _redemptions[account].add(shares);\\n        _latestVersions[account] = context.version;\\n        emit Redemption(msg.sender, account, context.version, shares);\\n\\n        _burn(account, shares);\\n\\n        _rebalance(context, UFixed18Lib.ZERO);\\n    }\\n\\n    /**\\n     * @notice Claims all claimable assets for account, sending assets to account\\n     * @param account The account to claim for\\n     */\\n    function claim(address account) external {\\n        (VersionContext memory context, ) = _settle(account);\\n\\n        UFixed18 unclaimedAmount = _unclaimed[account];\\n        UFixed18 unclaimedTotal = _totalUnclaimed;\\n        _unclaimed[account] = UFixed18Lib.ZERO;\\n        _totalUnclaimed = unclaimedTotal.sub(unclaimedAmount);\\n        emit Claim(msg.sender, account, unclaimedAmount);\\n\\n        // pro-rate if vault has less collateral than unclaimed\\n        UFixed18 claimAmount = unclaimedAmount;\\n        (UFixed18 longCollateral, UFixed18 shortCollateral, UFixed18 idleCollateral) = _collateral();\\n        UFixed18 totalCollateral = longCollateral.add(shortCollateral).add(idleCollateral);\\n        if (totalCollateral.lt(unclaimedTotal)) claimAmount = claimAmount.muldiv(totalCollateral, unclaimedTotal);\\n\\n        _rebalance(context, claimAmount);\\n\\n        asset.push(account, claimAmount);\\n    }\\n\\n    /**\\n     * @notice Sets `amount` as the allowance of `spender` over the caller's shares\\n     * @param spender Address which can spend operate on shares\\n     * @param amount Amount of shares that spender can operate on\\n     * @return bool true if the approval was successful, otherwise reverts\\n     */\\n    function approve(address spender, UFixed18 amount) external returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Moves `amount` shares from the caller's account to `to`\\n     * @param to Address to send shares to\\n     * @param amount Amount of shares to send\\n     * @return bool true if the transfer was successful, otherwise reverts\\n     */\\n    function transfer(address to, UFixed18 amount) external returns (bool) {\\n        _settle(msg.sender);\\n        _transfer(msg.sender, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Moves `amount` shares from `from to `to`\\n     * @param from Address to send shares from\\n     * @param to Address to send shares to\\n     * @param amount Amount of shares to send\\n     * @return bool true if the transfer was successful, otherwise reverts\\n     */\\n    function transferFrom(address from, address to, UFixed18 amount) external returns (bool) {\\n        _settle(from);\\n        _consumeAllowance(from, msg.sender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Returns the decimals places of the share token\\n     * @return Decimal places of the share share token\\n     */\\n    function decimals() external pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @notice The maximum available deposit amount\\n     * @dev Only exact when vault is synced, otherwise approximate\\n     * @return Maximum available deposit amount\\n     */\\n    function maxDeposit(address) external view returns (UFixed18) {\\n        (VersionContext memory context, ) = _loadContextForRead(address(0));\\n        return _maxDepositAtVersion(context);\\n    }\\n\\n    /**\\n     * @notice The maximum available redeemable amount\\n     * @dev Only exact when vault is synced, otherwise approximate\\n     * @param account The account to redeem for\\n     * @return Maximum available redeemable amount\\n     */\\n    function maxRedeem(address account) external view returns (UFixed18) {\\n        (VersionContext memory context, VersionContext memory accountContext) = _loadContextForRead(account);\\n        return _maxRedeemAtVersion(context, accountContext, account);\\n    }\\n\\n    /**\\n     * @notice The total amount of assets currently held by the vault\\n     * @return Amount of assets held by the vault\\n     */\\n    function totalAssets() external view returns (UFixed18) {\\n        (VersionContext memory context, ) = _loadContextForRead(address(0));\\n        return _totalAssetsAtVersion(context);\\n    }\\n\\n    /**\\n     * @notice The total amount of shares currently issued\\n     * @return Amount of shares currently issued\\n     */\\n    function totalSupply() external view returns (UFixed18) {\\n        (VersionContext memory context, ) = _loadContextForRead(address(0));\\n        return _totalSupplyAtVersion(context);\\n    }\\n\\n    /**\\n     * @notice Number of shares held by `account`\\n     * @param account Account to query balance of\\n     * @return Number of shares held by `account`\\n     */\\n    function balanceOf(address account) external view returns (UFixed18) {\\n        (, VersionContext memory accountContext) = _loadContextForRead(account);\\n        return _balanceOfAtVersion(accountContext, account);\\n    }\\n\\n    /**\\n     * @notice Total unclaimed assets in vault\\n     * @return Total unclaimed assets in vault\\n     */\\n    function totalUnclaimed() external view returns (UFixed18) {\\n        (VersionContext memory context, ) = _loadContextForRead(address(0));\\n        return _totalUnclaimedAtVersion(context);\\n    }\\n\\n    /**\\n     * @notice `account`'s unclaimed assets\\n     * @param account Account to query unclaimed balance of\\n     * @return `account`'s unclaimed assets\\n     */\\n    function unclaimed(address account) external view returns (UFixed18) {\\n        (, VersionContext memory accountContext) = _loadContextForRead(account);\\n        return _unclaimedAtVersion(accountContext, account);\\n    }\\n\\n    /**\\n     * @notice Converts a given amount of assets to shares\\n     * @param assets Number of assets to convert to shares\\n     * @return Amount of shares for the given assets\\n     */\\n    function convertToShares(UFixed18 assets) external view returns (UFixed18) {\\n        (VersionContext memory context, ) = _loadContextForRead(address(0));\\n        (context.latestCollateral, context.latestShares) =\\n            (_totalAssetsAtVersion(context), _totalSupplyAtVersion(context));\\n        return _convertToSharesAtVersion(context, assets);\\n    }\\n\\n    /**\\n     * @notice Converts a given amount of shares to assets\\n     * @param shares Number of shares to convert to assets\\n     * @return Amount of assets for the given shares\\n     */\\n    function convertToAssets(UFixed18 shares) external view returns (UFixed18) {\\n        (VersionContext memory context, ) = _loadContextForRead(address(0));\\n        (context.latestCollateral, context.latestShares) =\\n            (_totalAssetsAtVersion(context), _totalSupplyAtVersion(context));\\n        return _convertToAssetsAtVersion(context, shares);\\n    }\\n\\n    /**\\n     * @notice Hook that is called before every stateful operation\\n     * @dev Settles the vault's account on both the long and short product, along with any global or user-specific deposits/redemptions\\n     * @param account The account that called the operation, or 0 if called by a keeper.\\n     * @return context The current version context\\n     */\\n    function _settle(address account) private returns (VersionContext memory context, VersionContext memory accountContext) {\\n        (context, accountContext) = _loadContextForWrite(account);\\n\\n        if (context.version > _latestVersion) {\\n            _delayedMint(_totalSupplyAtVersion(context).sub(_totalSupply));\\n            _totalUnclaimed = _totalUnclaimedAtVersion(context);\\n            _deposit = UFixed18Lib.ZERO;\\n            _redemption = UFixed18Lib.ZERO;\\n            _latestVersion = context.version;\\n\\n            _versions[context.version] = Version({\\n                longPosition: long.position(address(this)).maker,\\n                shortPosition: short.position(address(this)).maker,\\n                totalShares: _totalSupply,\\n                longAssets: collateral.collateral(address(this), long),\\n                shortAssets: collateral.collateral(address(this), short),\\n                totalAssets: _totalAssetsAtVersion(context)\\n            });\\n        }\\n\\n        if (account != address(0) && accountContext.version > _latestVersions[account]) {\\n            _delayedMintAccount(account, _balanceOfAtVersion(accountContext, account).sub(_balanceOf[account]));\\n            _unclaimed[account] = _unclaimedAtVersion(accountContext, account);\\n            _deposits[account] = UFixed18Lib.ZERO;\\n            _redemptions[account] = UFixed18Lib.ZERO;\\n            _latestVersions[account] = accountContext.version;\\n        }\\n    }\\n\\n    /**\\n     * @notice Rebalances the collateral and position of the vault\\n     * @dev Rebalance is executed on best-effort, any failing legs of the strategy will not cause a revert\\n     * @param claimAmount The amount of assets that will be withdrawn from the vault at the end of the operation\\n     */\\n    function _rebalance(VersionContext memory context, UFixed18 claimAmount) private {\\n        _rebalanceCollateral(claimAmount);\\n        _rebalancePosition(context, claimAmount);\\n    }\\n\\n    /**\\n     * @notice Rebalances the collateral of the vault\\n     * @param claimAmount The amount of assets that will be withdrawn from the vault at the end of the operation\\n     */\\n    function _rebalanceCollateral(UFixed18 claimAmount) private {\\n        (UFixed18 longCollateral, UFixed18 shortCollateral, UFixed18 idleCollateral) = _collateral();\\n        UFixed18 currentCollateral = longCollateral.add(shortCollateral).add(idleCollateral).sub(claimAmount);\\n        UFixed18 targetCollateral = currentCollateral.div(TWO);\\n        if (targetCollateral.lt(controller.minCollateral())) targetCollateral = UFixed18Lib.ZERO;\\n\\n        (IProduct greaterProduct, IProduct lesserProduct) =\\n            longCollateral.gt(shortCollateral) ? (long, short) : (short, long);\\n\\n        _updateCollateral(greaterProduct, greaterProduct == long ? longCollateral : shortCollateral, targetCollateral);\\n        _updateCollateral(lesserProduct, lesserProduct == long ? longCollateral : shortCollateral, targetCollateral);\\n    }\\n\\n    /**\\n     * @notice Rebalances the position of the vault\\n     */\\n    function _rebalancePosition(VersionContext memory context, UFixed18 claimAmount) private {\\n        UFixed18 currentAssets = _totalAssetsAtVersion(context).sub(claimAmount);\\n        UFixed18 currentUtilized = _totalSupply.add(_redemption).isZero() ?\\n            _deposit.add(currentAssets) :\\n            _deposit.add(currentAssets.muldiv(_totalSupply, _totalSupply.add(_redemption)));\\n        if (currentUtilized.lt(controller.minCollateral().mul(TWO))) currentUtilized = UFixed18Lib.ZERO;\\n\\n        UFixed18 currentPrice = long.atVersion(context.version).price.abs();\\n        UFixed18 targetPosition = currentUtilized.mul(targetLeverage).div(currentPrice).div(TWO);\\n\\n        _updateMakerPosition(long, targetPosition);\\n        _updateMakerPosition(short, targetPosition);\\n    }\\n\\n    /**\\n     * @notice Adjusts the collateral on `product` to `targetCollateral`\\n     * @param product The product to adjust the vault's collateral on\\n     * @param currentCollateral The current collateral of the product\\n     * @param targetCollateral The new collateral to target\\n     */\\n    function _updateCollateral(IProduct product, UFixed18 currentCollateral, UFixed18 targetCollateral) private {\\n        if (currentCollateral.gt(targetCollateral))\\n            collateral.withdrawTo(address(this), product, currentCollateral.sub(targetCollateral));\\n        if (currentCollateral.lt(targetCollateral))\\n            collateral.depositTo(address(this), product, targetCollateral.sub(currentCollateral));\\n\\n        emit CollateralUpdated(product, targetCollateral);\\n    }\\n\\n    /**\\n     * @notice Adjusts the position on `product` to `targetPosition`\\n     * @param product The product to adjust the vault's position on\\n     * @param targetPosition The new position to target\\n     */\\n    function _updateMakerPosition(IProduct product, UFixed18 targetPosition) private {\\n        UFixed18 currentPosition = product.position(address(this)).next(product.pre(address(this))).maker;\\n        UFixed18 currentMaker = product.positionAtVersion(product.latestVersion()).next(product.pre()).maker;\\n        UFixed18 makerLimit = product.makerLimit();\\n        UFixed18 makerAvailable = makerLimit.gt(currentMaker) ? makerLimit.sub(currentMaker) : UFixed18Lib.ZERO;\\n\\n        if (targetPosition.lt(currentPosition))\\n            product.closeMake(currentPosition.sub(targetPosition));\\n        if (targetPosition.gt(currentPosition))\\n            product.openMake(targetPosition.sub(currentPosition).min(makerAvailable));\\n\\n        emit PositionUpdated(product, targetPosition);\\n    }\\n\\n    /**\\n     * @notice Moves `amount` shares from `from` to `to`\\n     * @param from Address to send shares from\\n     * @param to Address to send shares to\\n     * @param amount Amount of shares to move\\n     */\\n    function _transfer(address from, address to, UFixed18 amount) private {\\n        _balanceOf[from] = _balanceOf[from].sub(amount);\\n        _balanceOf[to] = _balanceOf[to].add(amount);\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    /**\\n     * @notice Burns `amount` shares from `from`, adjusting totalSupply\\n     * @param from Address to burn shares from\\n     * @param amount Amount of shares to burn\\n     */\\n    function _burn(address from, UFixed18 amount) private {\\n        _balanceOf[from] = _balanceOf[from].sub(amount);\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(from, address(0), amount);\\n    }\\n\\n    /**\\n     * @notice Mints `amount` shares, adjusting totalSupply\\n     * @param amount Amount of shares to mint\\n     */\\n    function _delayedMint(UFixed18 amount) private {\\n        _totalSupply = _totalSupply.add(amount);\\n    }\\n\\n    /**\\n     * @notice Mints `amount` shares to `to`\\n     * @param to Address to mint shares to\\n     * @param amount Amount of shares to mint\\n     */\\n    function _delayedMintAccount(address to, UFixed18 amount) private {\\n        _balanceOf[to] = _balanceOf[to].add(amount);\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    /**\\n     * @notice Decrements `spender`s allowance for `account` by `amount`\\n     * @dev Does not decrement if approval is for -1\\n     * @param account Address of allower\\n     * @param spender Address of spender\\n     * @param amount Amount to decrease allowance by\\n     */\\n    function _consumeAllowance(address account, address spender, UFixed18 amount) private {\\n        if (allowance[account][spender].eq(UFixed18Lib.MAX)) return;\\n        allowance[account][spender] = allowance[account][spender].sub(amount);\\n    }\\n\\n    /**\\n     * @notice Loads the context for the given `account`, settling the vault first\\n     * @param account Account to load the context for\\n     * @return global version context\\n     * @return account version context\\n     */\\n    function _loadContextForWrite(address account) private returns (VersionContext memory, VersionContext memory) {\\n        long.settleAccount(address(this));\\n        short.settleAccount(address(this));\\n        uint256 currentVersion = long.latestVersion(address(this));\\n\\n        return (\\n            VersionContext(currentVersion, _assetsAt(_latestVersion), _sharesAt(_latestVersion)),\\n            VersionContext(currentVersion, _assetsAt(_latestVersions[account]), _sharesAt(_latestVersions[account]))\\n        );\\n    }\\n\\n    /**\\n     * @notice Loads the context for the given `account`\\n     * @param account Account to load the context for\\n     * @return global version context\\n     * @return account version context\\n     */\\n    function _loadContextForRead(address account) private view returns (VersionContext memory, VersionContext memory) {\\n        uint256 currentVersion = Math.min(long.latestVersion(), short.latestVersion()); // latest version that both products are settled to\\n\\n        return (\\n            VersionContext(currentVersion, _assetsAt(_latestVersion), _sharesAt(_latestVersion)),\\n            VersionContext(currentVersion, _assetsAt(_latestVersions[account]), _sharesAt(_latestVersions[account]))\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculates whether or not the vault is in an unhealthy state at the provided version\\n     * @param context Version context to calculate health\\n     * @return bool true if unhealthy, false if healthy\\n     */\\n    function _unhealthyAtVersion(VersionContext memory context) private view returns (bool) {\\n        return collateral.liquidatable(address(this), long)\\n            || collateral.liquidatable(address(this), short)\\n            || long.isLiquidating(address(this))\\n            || short.isLiquidating(address(this))\\n            || (!context.latestShares.isZero() && context.latestCollateral.isZero());\\n    }\\n\\n    /**\\n     * @notice The maximum available deposit amount at the given version\\n     * @param context Version context to use in calculation\\n     * @return Maximum available deposit amount at version\\n     */\\n    function _maxDepositAtVersion(VersionContext memory context) private view returns (UFixed18) {\\n        if (_unhealthyAtVersion(context)) return UFixed18Lib.ZERO;\\n        UFixed18 currentCollateral = _totalAssetsAtVersion(context).add(_deposit);\\n        return maxCollateral.gt(currentCollateral) ? maxCollateral.sub(currentCollateral) : UFixed18Lib.ZERO;\\n    }\\n\\n    /**\\n     * @notice The maximum available redeemable amount at the given version for `account`\\n     * @param context Version context to use in calculation\\n     * @param accountContext Account version context to use in calculation\\n     * @param account Account to calculate redeemable amount\\n     * @return Maximum available redeemable amount at version\\n     */\\n    function _maxRedeemAtVersion(\\n        VersionContext memory context,\\n        VersionContext memory accountContext,\\n        address account\\n    ) private view returns (UFixed18) {\\n        if (_unhealthyAtVersion(context)) return UFixed18Lib.ZERO;\\n        return _balanceOfAtVersion(accountContext, account);\\n    }\\n\\n    /**\\n     * @notice The total assets at the given version\\n     * @param context Version context to use in calculation\\n     * @return Total assets amount at version\\n     */\\n    function _totalAssetsAtVersion(VersionContext memory context) private view returns (UFixed18) {\\n        (UFixed18 longCollateral, UFixed18 shortCollateral, UFixed18 idleCollateral) = _collateral();\\n        (UFixed18 totalCollateral, UFixed18 totalDebt) =\\n            (longCollateral.add(shortCollateral).add(idleCollateral), _totalUnclaimedAtVersion(context).add(_deposit));\\n        return totalCollateral.gt(totalDebt) ? totalCollateral.sub(totalDebt) : UFixed18Lib.ZERO;\\n    }\\n\\n    /**\\n     * @notice The total supply at the given version\\n     * @param context Version context to use in calculation\\n     * @return Total supply amount at version\\n     */\\n    function _totalSupplyAtVersion(VersionContext memory context) private view returns (UFixed18) {\\n        if (context.version == _latestVersion) return _totalSupply;\\n        return _totalSupply.add(_convertToSharesAtVersion(context, _deposit));\\n    }\\n\\n    /**\\n     * @notice The balance of `account` at the given version\\n     * @param accountContext Account version context to use in calculation\\n     * @param account Account to calculate balance of amount\\n     * @return Account balance at version\\n     */\\n    function _balanceOfAtVersion(VersionContext memory accountContext, address account) private view returns (UFixed18) {\\n        if (accountContext.version == _latestVersions[account]) return _balanceOf[account];\\n        return _balanceOf[account].add(_convertToSharesAtVersion(accountContext, _deposits[account]));\\n    }\\n\\n    /**\\n     * @notice The total unclaimed assets at the given version\\n     * @param context Version context to use in calculation\\n     * @return Total unclaimed asset amount at version\\n     */\\n    function _totalUnclaimedAtVersion(VersionContext memory context) private view returns (UFixed18) {\\n        if (context.version == _latestVersion) return _totalUnclaimed;\\n        return _totalUnclaimed.add(_convertToAssetsAtVersion(context, _redemption));\\n    }\\n\\n    /**\\n     * @notice The total unclaimed assets at the given version for `account`\\n     * @param accountContext Account version context to use in calculation\\n     * @param account Account to calculate unclaimed assets for\\n     * @return Total unclaimed asset amount for `account` at version\\n     */\\n    function _unclaimedAtVersion(VersionContext memory accountContext, address account) private view returns (UFixed18) {\\n        if (accountContext.version == _latestVersions[account]) return _unclaimed[account];\\n        return _unclaimed[account].add(_convertToAssetsAtVersion(accountContext, _redemptions[account]));\\n    }\\n\\n    /**\\n     * @notice Returns the amounts of the individual sources of assets in the vault\\n     * @return The amount of collateral in the long product\\n     * @return The amount of collateral in the short product\\n     * @return The amount of collateral idle in the vault contract\\n     */\\n    function _collateral() private view returns (UFixed18, UFixed18, UFixed18) {\\n        return (\\n            collateral.collateral(address(this), long),\\n            collateral.collateral(address(this), short),\\n            asset.balanceOf()\\n        );\\n    }\\n\\n    /**\\n     * @notice The total assets at the given version\\n     * @dev Calculates and adds accumulated PnL for `version` + 1\\n     * @param version Version to get total assets at\\n     * @return Total assets in the vault at the given version\\n     */\\n    function _assetsAt(uint256 version) private view returns (UFixed18) {\\n        Fixed18 longAccumulated = long.valueAtVersion(version + 1).maker.sub(long.valueAtVersion(version).maker)\\n            .mul(Fixed18Lib.from(_versions[version].longPosition))\\n            .max(Fixed18Lib.from(_versions[version].longAssets).mul(Fixed18Lib.NEG_ONE));  // collateral can't go negative on a product\\n        Fixed18 shortAccumulated = short.valueAtVersion(version + 1).maker.sub(short.valueAtVersion(version).maker)\\n            .mul(Fixed18Lib.from(_versions[version].shortPosition))\\n            .max(Fixed18Lib.from(_versions[version].shortAssets).mul(Fixed18Lib.NEG_ONE)); // collateral can't go negative on a product\\n\\n        return UFixed18Lib.from(\\n            Fixed18Lib.from(_versions[version].totalAssets)\\n                .add(longAccumulated)\\n                .add(shortAccumulated)\\n                .max(Fixed18Lib.ZERO) // vault can't have negative assets, socializes into unclaimed if triggered\\n        );\\n    }\\n\\n    /**\\n     * @notice The total shares at the given version\\n     * @param version Version to get total shares at\\n     * @return Total shares at `version`\\n     */\\n    function _sharesAt(uint256 version) private view returns (UFixed18) {\\n        return _versions[version].totalShares;\\n    }\\n\\n    /**\\n     * @notice Converts a given amount of assets to shares at version\\n     * @param context Version context to use in calculation\\n     * @param assets Number of assets to convert to shares\\n     * @return Amount of shares for the given assets at version\\n     */\\n    function _convertToSharesAtVersion(VersionContext memory context, UFixed18 assets) private pure returns (UFixed18) {\\n        if (context.latestCollateral.isZero()) return assets;\\n        return assets.muldiv(context.latestShares, context.latestCollateral);\\n    }\\n\\n    /**\\n     * @notice Converts a given amount of shares to assets at version\\n     * @param context Version context to use in calculation\\n     * @param shares Number of shares to convert to shares\\n     * @return Amount of assets for the given shares at version\\n     */\\n    function _convertToAssetsAtVersion(VersionContext memory context, UFixed18 shares) private pure returns (UFixed18) {\\n        if (context.latestShares.isZero()) return shares;\\n        return shares.muldiv(context.latestCollateral, context.latestShares);\\n    }\\n}\\n\",\"keccak256\":\"0x7c4c4d02abf49036f64de3af72ad49d991f31d30c4d08db337addb0b3f6b2167\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-vaults/contracts/interfaces/IBalancedVault.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/perennial/contracts/interfaces/IController.sol\\\";\\nimport \\\"@equilibria/perennial/contracts/interfaces/ICollateral.sol\\\";\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\n\\ninterface IBalancedVault {\\n\\n    /* BalancedVault Interface */\\n\\n    struct Version {\\n        UFixed18 longPosition;\\n        UFixed18 shortPosition;\\n        UFixed18 totalShares;\\n        UFixed18 longAssets;\\n        UFixed18 shortAssets;\\n        UFixed18 totalAssets;\\n    }\\n\\n    struct VersionContext {\\n        uint256 version;\\n        UFixed18 latestCollateral;\\n        UFixed18 latestShares;\\n    }\\n\\n    event Deposit(address indexed sender, address indexed account, uint256 version, UFixed18 assets);\\n    event Redemption(address indexed sender, address indexed account, uint256 version, UFixed18 shares);\\n    event Claim(address indexed sender, address indexed account, UFixed18 assets);\\n    event PositionUpdated(IProduct product, UFixed18 targetPosition);\\n    event CollateralUpdated(IProduct product, UFixed18 targetCollateral);\\n\\n    error BalancedVaultDepositLimitExceeded();\\n    error BalancedVaultRedemptionLimitExceeded();\\n\\n    function initialize(string memory name_, string memory symbol_) external;\\n    function sync() external;\\n    function controller() external view returns (IController);\\n    function collateral() external view returns (ICollateral);\\n    function long() external view returns (IProduct);\\n    function short() external view returns (IProduct);\\n    function targetLeverage() external view returns (UFixed18);\\n    function maxCollateral() external view returns (UFixed18);\\n    function unclaimed(address account) external view returns (UFixed18);\\n    function totalUnclaimed() external view returns (UFixed18);\\n    function claim(address account) external;\\n\\n    /* Partial ERC4626 Interface */\\n\\n    function asset() external view returns (Token18);\\n    function totalAssets() external view returns (UFixed18);\\n    function convertToShares(UFixed18 assets) external view returns (UFixed18);\\n    function convertToAssets(UFixed18 shares) external view returns (UFixed18);\\n    function maxDeposit(address account) external view returns (UFixed18);\\n    function deposit(UFixed18 assets, address account) external;\\n    function maxRedeem(address account) external view returns (UFixed18);\\n    function redeem(UFixed18 shares, address account) external;\\n\\n    /* Partial ERC20 Interface */\\n\\n    event Transfer(address indexed from, address indexed to, UFixed18 value);\\n    event Approval(address indexed account, address indexed spender, UFixed18 value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (UFixed18);\\n    function balanceOf(address account) external view returns (UFixed18);\\n    function transfer(address to, UFixed18 amount) external returns (bool);\\n    function allowance(address account, address spender) external view returns (UFixed18);\\n    function approve(address spender, UFixed18 amount) external returns (bool);\\n    function transferFrom(address from, address to, UFixed18 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0xa6109b1eda80d9d323b3f80cb85daf93c9dfe4bd479ce76ae73842c4d58dcd1a\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial/contracts/interfaces/ICollateral.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"@equilibria/root/number/types/Fixed18.sol\\\";\\nimport \\\"@equilibria/root/token/types/Token18.sol\\\";\\nimport \\\"./IController.sol\\\";\\nimport \\\"./IProduct.sol\\\";\\n\\ninterface ICollateral {\\n    event Deposit(address indexed user, IProduct indexed product, UFixed18 amount);\\n    event Withdrawal(address indexed user, IProduct indexed product, UFixed18 amount);\\n    event AccountSettle(IProduct indexed product, address indexed account, Fixed18 amount, UFixed18 newShortfall);\\n    event ProductSettle(IProduct indexed product, UFixed18 protocolFee, UFixed18 productFee);\\n    event Liquidation(address indexed user, IProduct indexed product, address liquidator, UFixed18 fee);\\n    event ShortfallResolution(IProduct indexed product, UFixed18 amount);\\n    event FeeClaim(address indexed account, UFixed18 amount);\\n\\n    error CollateralCantLiquidate(UFixed18 totalMaintenance, UFixed18 totalCollateral);\\n    error CollateralInsufficientCollateralError();\\n    error CollateralUnderLimitError();\\n    error CollateralZeroAddressError();\\n    error CollateralAccountLiquidatingError(address account);\\n\\n    function token() external view returns (Token18);\\n    function fees(address account) external view returns (UFixed18);\\n    function initialize(IController controller_) external;\\n    function depositTo(address account, IProduct product, UFixed18 amount) external;\\n    function withdrawTo(address receiver, IProduct product, UFixed18 amount) external;\\n    function withdrawFrom(address account, address receiver, IProduct product, UFixed18 amount) external;\\n    function liquidate(address account, IProduct product) external;\\n    function settleAccount(address account, Fixed18 amount) external;\\n    function settleProduct(UFixed18 amount) external;\\n    function collateral(address account, IProduct product) external view returns (UFixed18);\\n    function collateral(IProduct product) external view returns (UFixed18);\\n    function shortfall(IProduct product) external view returns (UFixed18);\\n    function liquidatable(address account, IProduct product) external view returns (bool);\\n    function liquidatableNext(address account, IProduct product) external view returns (bool);\\n    function resolveShortfall(IProduct product, UFixed18 amount) external;\\n    function claimFee() external;\\n}\\n\",\"keccak256\":\"0x6fb67eb5fc3ed4a74522677da3349d75105389369892756a60fcab4c901d352b\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial/contracts/interfaces/IContractPayoffProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/Fixed18.sol\\\";\\n\\ninterface IContractPayoffProvider {\\n    function payoff(Fixed18 price) external view returns (Fixed18 payoff);\\n}\\n\",\"keccak256\":\"0xd73df106d032e976fd959ee6713240e36f54277ce5f215eaec8d5a2c6720a86b\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial/contracts/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\\\";\\nimport \\\"./ICollateral.sol\\\";\\nimport \\\"./IIncentivizer.sol\\\";\\nimport \\\"./IProduct.sol\\\";\\nimport \\\"./IMultiInvoker.sol\\\";\\nimport \\\"./types/PayoffDefinition.sol\\\";\\n\\ninterface IController {\\n    /// @dev Coordinator of a one or many products\\n    struct Coordinator {\\n        /// @dev Pending owner of the product, can accept ownership\\n        address pendingOwner;\\n\\n        /// @dev Owner of the product, allowed to update select parameters\\n        address owner;\\n\\n        /// @dev Treasury of the product, collects fees\\n        address treasury;\\n    }\\n\\n    event CollateralUpdated(ICollateral newCollateral);\\n    event IncentivizerUpdated(IIncentivizer newIncentivizer);\\n    event ProductBeaconUpdated(IBeacon newProductBeacon);\\n    event MultiInvokerUpdated(IMultiInvoker newMultiInvoker);\\n    event ProtocolFeeUpdated(UFixed18 newProtocolFee);\\n    event MinFundingFeeUpdated(UFixed18 newMinFundingFee);\\n    event LiquidationFeeUpdated(UFixed18 newLiquidationFee);\\n    event IncentivizationFeeUpdated(UFixed18 newIncentivizationFee);\\n    event MinCollateralUpdated(UFixed18 newMinCollateral);\\n    event ProgramsPerProductUpdated(uint256 newProgramsPerProduct);\\n    event PauserUpdated(address newPauser);\\n    event PausedUpdated(bool newPaused);\\n    event CoordinatorPendingOwnerUpdated(uint256 indexed coordinatorId, address newPendingOwner);\\n    event CoordinatorOwnerUpdated(uint256 indexed coordinatorId, address newOwner);\\n    event CoordinatorTreasuryUpdated(uint256 indexed coordinatorId, address newTreasury);\\n    event CoordinatorCreated(uint256 indexed coordinatorId, address owner);\\n    event ProductCreated(IProduct indexed product, IProduct.ProductInfo productInfo);\\n\\n    error ControllerNoZeroCoordinatorError();\\n    error ControllerNotPauserError();\\n    error ControllerNotOwnerError(uint256 controllerId);\\n    error ControllerNotPendingOwnerError(uint256 controllerId);\\n    error ControllerInvalidProtocolFeeError();\\n    error ControllerInvalidMinFundingFeeError();\\n    error ControllerInvalidLiquidationFeeError();\\n    error ControllerInvalidIncentivizationFeeError();\\n    error ControllerNotContractAddressError();\\n\\n    function collateral() external view returns (ICollateral);\\n    function incentivizer() external view returns (IIncentivizer);\\n    function productBeacon() external view returns (IBeacon);\\n    function multiInvoker() external view returns (IMultiInvoker);\\n    function coordinators(uint256 collateralId) external view returns (Coordinator memory);\\n    function coordinatorFor(IProduct product) external view returns (uint256);\\n    function protocolFee() external view returns (UFixed18);\\n    function minFundingFee() external view returns (UFixed18);\\n    function liquidationFee() external view returns (UFixed18);\\n    function incentivizationFee() external view returns (UFixed18);\\n    function minCollateral() external view returns (UFixed18);\\n    function programsPerProduct() external view returns (uint256);\\n    function pauser() external view returns (address);\\n    function paused() external view returns (bool);\\n    function initialize(ICollateral collateral_, IIncentivizer incentivizer_, IBeacon productBeacon_) external;\\n    function createCoordinator() external returns (uint256);\\n    function updateCoordinatorPendingOwner(uint256 coordinatorId, address newPendingOwner) external;\\n    function acceptCoordinatorOwner(uint256 coordinatorId) external;\\n    function updateCoordinatorTreasury(uint256 coordinatorId, address newTreasury) external;\\n    function createProduct(uint256 coordinatorId, IProduct.ProductInfo calldata productInfo) external returns (IProduct);\\n    function updateCollateral(ICollateral newCollateral) external;\\n    function updateIncentivizer(IIncentivizer newIncentivizer) external;\\n    function updateProductBeacon(IBeacon newProductBeacon) external;\\n    function updateMultiInvoker(IMultiInvoker newMultiInvoker) external;\\n    function updateProtocolFee(UFixed18 newProtocolFee) external;\\n    function updateMinFundingFee(UFixed18 newMinFundingFee) external;\\n    function updateLiquidationFee(UFixed18 newLiquidationFee) external;\\n    function updateIncentivizationFee(UFixed18 newIncentivizationFee) external;\\n    function updateMinCollateral(UFixed18 newMinCollateral) external;\\n    function updateProgramsPerProduct(uint256 newProductsPerProduct) external;\\n    function updatePauser(address newPauser) external;\\n    function updatePaused(bool newPaused) external;\\n    function isProduct(IProduct product) external view returns (bool);\\n    function owner() external view returns (address);\\n    function owner(uint256 coordinatorId) external view returns (address);\\n    function owner(IProduct product) external view returns (address);\\n    function treasury() external view returns (address);\\n    function treasury(uint256 coordinatorId) external view returns (address);\\n    function treasury(IProduct product) external view returns (address);\\n}\\n\",\"keccak256\":\"0xb6798b45b76edb91f6e56380eeeacdcfb37bbeb620a2d9c3e9993c39675bbd48\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial/contracts/interfaces/IIncentivizer.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/token/types/Token18.sol\\\";\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"@equilibria/perennial-oracle/contracts/interfaces/IOracleProvider.sol\\\";\\nimport \\\"./types/ProgramInfo.sol\\\";\\nimport \\\"./IController.sol\\\";\\nimport \\\"./IProduct.sol\\\";\\n\\ninterface IIncentivizer {\\n    event ProgramCreated(IProduct indexed product, uint256 indexed programId, ProgramInfo programInfo, UFixed18 programFeeAmount);\\n    event ProgramStarted(IProduct indexed product, uint256 indexed programId, uint256 version);\\n    event ProgramComplete(IProduct indexed product, uint256 indexed programId, uint256 version);\\n    event Claim(IProduct indexed product, address indexed account, uint256 indexed programId, UFixed18 amount);\\n    event FeeClaim(Token18 indexed token, UFixed18 amount);\\n\\n    error IncentivizerNotAllowedError(IProduct product);\\n    error IncentivizerTooManyProgramsError();\\n    error IncentivizerNotProgramOwnerError(IProduct product, uint256 programId);\\n    error IncentivizerInvalidProgramError(IProduct product, uint256 programId);\\n    error IncentivizerBatchClaimArgumentMismatchError();\\n\\n    function programInfos(IProduct product, uint256 programId) external view returns (ProgramInfo memory);\\n    function fees(Token18 token) external view returns (UFixed18);\\n    function initialize(IController controller_) external;\\n    function create(IProduct product, ProgramInfo calldata info) external returns (uint256);\\n    function complete(IProduct product, uint256 programId) external;\\n    function sync(IOracleProvider.OracleVersion memory currentOracleVersion) external;\\n    function syncAccount(address account, IOracleProvider.OracleVersion memory currentOracleVersion) external;\\n    function claim(IProduct product, uint256[] calldata programIds) external;\\n    function claimFor(address account, IProduct product, uint256[] calldata programIds) external;\\n    function claim(IProduct[] calldata products, uint256[][] calldata programIds) external;\\n    function claimFee(Token18[] calldata tokens) external;\\n    function active(IProduct product) external view returns (uint256);\\n    function count(IProduct product) external view returns (uint256);\\n    function unclaimed(IProduct product, address account, uint256 programId) external view returns (UFixed18);\\n    function available(IProduct product, uint256 programId) external view returns (UFixed18);\\n    function versionStarted(IProduct product, uint256 programId) external view returns (uint256);\\n    function versionComplete(IProduct product, uint256 programId) external view returns (uint256);\\n    function owner(IProduct product, uint256 programId) external view returns (address);\\n    function treasury(IProduct product, uint256 programId) external view returns (address);\\n}\\n\",\"keccak256\":\"0xd9d65d1190d830c8b797829f94194db86bb712e51f404e8c3e2c9b1df5645649\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial/contracts/interfaces/IMultiInvoker.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/token/types/Token6.sol\\\";\\nimport \\\"@equilibria/root/token/types/Token18.sol\\\";\\nimport \\\"@equilibria/emptyset-batcher/interfaces/IBatcher.sol\\\";\\nimport \\\"@equilibria/emptyset-batcher/interfaces/IEmptySetReserve.sol\\\";\\n\\nimport \\\"./IController.sol\\\";\\nimport \\\"./ICollateral.sol\\\";\\nimport \\\"./IProduct.sol\\\";\\n\\ninterface IMultiInvoker {\\n    /// @dev Core protocol actions that can be composed\\n    enum PerennialAction {\\n        NO_OP,\\n        DEPOSIT,\\n        WITHDRAW,\\n        OPEN_TAKE,\\n        CLOSE_TAKE,\\n        OPEN_MAKE,\\n        CLOSE_MAKE,\\n        CLAIM,\\n        WRAP,\\n        UNWRAP,\\n        WRAP_AND_DEPOSIT,\\n        WITHDRAW_AND_UNWRAP\\n    }\\n\\n    /// @dev Struct for action invocation\\n    struct Invocation {\\n        PerennialAction action;\\n        bytes args;\\n    }\\n\\n    function initialize() external;\\n    function USDC() external view returns (Token6); // solhint-disable-line func-name-mixedcase\\n    function DSU() external view returns (Token18); // solhint-disable-line func-name-mixedcase\\n    function batcher() external view returns (IBatcher);\\n    function controller() external view returns (IController);\\n    function collateral() external view returns (ICollateral);\\n    function reserve() external view returns (IEmptySetReserve);\\n    function invoke(Invocation[] calldata invocations) external;\\n}\\n\",\"keccak256\":\"0x80e035472b990b026888f326b4dcceb7526491607b61e50592ceb8d36cc99728\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial/contracts/interfaces/IParamProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"@equilibria/root/curve/types/JumpRateUtilizationCurve.sol\\\";\\nimport \\\"./types/PendingFeeUpdates.sol\\\";\\n\\ninterface IParamProvider {\\n    event MaintenanceUpdated(UFixed18 newMaintenance, uint256 version);\\n    event FundingFeeUpdated(UFixed18 newFundingFee, uint256 version);\\n    event MakerFeeUpdated(UFixed18 newMakerFee, uint256 version);\\n    event PendingMakerFeeUpdated(UFixed18 newMakerFee);\\n    event TakerFeeUpdated(UFixed18 newTakerFee, uint256 version);\\n    event PendingTakerFeeUpdated(UFixed18 newTakerFee);\\n    event PositionFeeUpdated(UFixed18 newPositionFee, uint256 version);\\n    event PendingPositionFeeUpdated(UFixed18 newPositionFee);\\n    event MakerLimitUpdated(UFixed18 newMakerLimit, uint256 version);\\n    event JumpRateUtilizationCurveUpdated(\\n        JumpRateUtilizationCurve,\\n        uint256 version\\n    );\\n\\n    error ParamProviderInvalidParamValue();\\n\\n    function maintenance() external view returns (UFixed18);\\n    function updateMaintenance(UFixed18 newMaintenance) external;\\n    function fundingFee() external view returns (UFixed18);\\n    function updateFundingFee(UFixed18 newFundingFee) external;\\n    function makerFee() external view returns (UFixed18);\\n    function updateMakerFee(UFixed18 newMakerFee) external;\\n    function takerFee() external view returns (UFixed18);\\n    function updateTakerFee(UFixed18 newTakerFee) external;\\n    function positionFee() external view returns (UFixed18);\\n    function updatePositionFee(UFixed18 newPositionFee) external;\\n    function makerLimit() external view returns (UFixed18);\\n    function updateMakerLimit(UFixed18 newMakerLimit) external;\\n    function utilizationCurve() external view returns (JumpRateUtilizationCurve memory);\\n    function updateUtilizationCurve(JumpRateUtilizationCurve memory newUtilizationCurve) external;\\n    function pendingFeeUpdates() external view returns (PendingFeeUpdates memory);\\n}\\n\",\"keccak256\":\"0x21584bd07296eb4e8bd6076fd20afad320e781c19c60b479c9340c69b0f37517\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial/contracts/interfaces/IPayoffProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/Fixed18.sol\\\";\\nimport \\\"@equilibria/perennial-oracle/contracts/interfaces/IOracleProvider.sol\\\";\\nimport \\\"./types/PayoffDefinition.sol\\\";\\n\\ninterface IPayoffProvider {\\n    event OracleUpdated(address newOracle, uint256 oracleVersion);\\n\\n    error PayoffProviderInvalidOracle();\\n    error PayoffProviderInvalidPayoffDefinitionError();\\n\\n    function oracle() external view returns (IOracleProvider);\\n    function payoffDefinition() external view returns (PayoffDefinition memory);\\n    function currentVersion() external view returns (IOracleProvider.OracleVersion memory);\\n    function atVersion(uint256 oracleVersion) external view returns (IOracleProvider.OracleVersion memory);\\n}\\n\",\"keccak256\":\"0x803d22f7513c2c5186f77f6bc7cc34673ed762e40f106f9aef512eb9b57018af\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial/contracts/interfaces/IProduct.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"@equilibria/root/curve/types/JumpRateUtilizationCurve.sol\\\";\\nimport \\\"./IPayoffProvider.sol\\\";\\nimport \\\"./IParamProvider.sol\\\";\\nimport \\\"./types/PayoffDefinition.sol\\\";\\nimport \\\"./types/Position.sol\\\";\\nimport \\\"./types/PrePosition.sol\\\";\\nimport \\\"./types/Accumulator.sol\\\";\\n\\ninterface IProduct is IPayoffProvider, IParamProvider {\\n    /// @dev Product Creation parameters\\n    struct ProductInfo {\\n        /// @dev name of the product\\n        string name;\\n\\n        /// @dev symbol of the product\\n        string symbol;\\n\\n        /// @dev product payoff definition\\n        PayoffDefinition payoffDefinition;\\n\\n        /// @dev oracle address\\n        IOracleProvider oracle;\\n\\n        /// @dev product maintenance ratio\\n        UFixed18 maintenance;\\n\\n        /// @dev product funding fee\\n        UFixed18 fundingFee;\\n\\n        /// @dev product maker fee\\n        UFixed18 makerFee;\\n\\n        /// @dev product taker fee\\n        UFixed18 takerFee;\\n\\n        /// @dev product position fee share\\n        UFixed18 positionFee;\\n\\n        /// @dev product maker limit\\n        UFixed18 makerLimit;\\n\\n        /// @dev utulization curve definition\\n        JumpRateUtilizationCurve utilizationCurve;\\n    }\\n\\n    event Settle(uint256 preVersion, uint256 toVersion);\\n    event AccountSettle(address indexed account, uint256 preVersion, uint256 toVersion);\\n    event MakeOpened(address indexed account, uint256 version, UFixed18 amount);\\n    event TakeOpened(address indexed account, uint256 version, UFixed18 amount);\\n    event MakeClosed(address indexed account, uint256 version, UFixed18 amount);\\n    event TakeClosed(address indexed account, uint256 version, UFixed18 amount);\\n    event ClosedUpdated(bool indexed newClosed, uint256 version);\\n\\n    error ProductInsufficientLiquidityError(UFixed18 socializationFactor);\\n    error ProductDoubleSidedError();\\n    error ProductOverClosedError();\\n    error ProductInsufficientCollateralError();\\n    error ProductInLiquidationError();\\n    error ProductMakerOverLimitError();\\n    error ProductOracleBootstrappingError();\\n    error ProductClosedError();\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function initialize(ProductInfo calldata productInfo_) external;\\n    function settle() external;\\n    function settleAccount(address account) external;\\n    function openTake(UFixed18 amount) external;\\n    function openTakeFor(address account, UFixed18 amount) external;\\n    function closeTake(UFixed18 amount) external;\\n    function closeTakeFor(address account, UFixed18 amount) external;\\n    function openMake(UFixed18 amount) external;\\n    function openMakeFor(address account, UFixed18 amount) external;\\n    function closeMake(UFixed18 amount) external;\\n    function closeMakeFor(address account, UFixed18 amount) external;\\n    function closeAll(address account) external;\\n    function maintenance(address account) external view returns (UFixed18);\\n    function maintenanceNext(address account) external view returns (UFixed18);\\n    function isClosed(address account) external view returns (bool);\\n    function isLiquidating(address account) external view returns (bool);\\n    function position(address account) external view returns (Position memory);\\n    function pre(address account) external view returns (PrePosition memory);\\n    function latestVersion() external view returns (uint256);\\n    function positionAtVersion(uint256 oracleVersion) external view returns (Position memory);\\n    function pre() external view returns (PrePosition memory);\\n    function valueAtVersion(uint256 oracleVersion) external view returns (Accumulator memory);\\n    function shareAtVersion(uint256 oracleVersion) external view returns (Accumulator memory);\\n    function latestVersion(address account) external view returns (uint256);\\n    function rate(Position memory position) external view returns (Fixed18);\\n    function closed() external view returns (bool);\\n    function updateClosed(bool newClosed) external;\\n    function updateOracle(IOracleProvider newOracle) external;\\n}\\n\",\"keccak256\":\"0x8e53ea97d8d59519adcbc2aa3600b5e51de1d59efec485a88eca8b574a35a00f\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial/contracts/interfaces/types/Accumulator.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/Fixed18.sol\\\";\\nimport \\\"./PackedAccumulator.sol\\\";\\n\\n/// @dev Accumulator type\\nstruct Accumulator {\\n    /// @dev maker accumulator per share\\n    Fixed18 maker;\\n    /// @dev taker accumulator per share\\n    Fixed18 taker;\\n}\\nusing AccumulatorLib for Accumulator global;\\n\\n/**\\n * @title AccountAccumulatorLib\\n * @notice Library that surfaces math operations for the Accumulator type.\\n * @dev Accumulators track the cumulative change in position value over time for the maker and taker positions\\n *      respectively. Account-level accumulators can then use two of these values `a` and `a'` to compute the\\n *      change in position value since last sync. This change in value is then used to compute P&L and fees.\\n */\\nlibrary AccumulatorLib {\\n    /**\\n     * @notice Creates a packed accumulator from an accumulator\\n     * @param self an accumulator\\n     * @return New packed accumulator\\n     */\\n    function pack(Accumulator memory self) internal pure returns (PackedAccumulator memory) {\\n        return PackedAccumulator({maker: self.maker.pack(), taker: self.taker.pack()});\\n    }\\n\\n    /**\\n     * @notice Adds two accumulators together\\n     * @param a The first accumulator to sum\\n     * @param b The second accumulator to sum\\n     * @return The resulting summed accumulator\\n     */\\n    function add(Accumulator memory a, Accumulator memory b) internal pure returns (Accumulator memory) {\\n        return Accumulator({maker: a.maker.add(b.maker), taker: a.taker.add(b.taker)});\\n    }\\n\\n    /**\\n     * @notice Subtracts accumulator `b` from `a`\\n     * @param a The accumulator to subtract from\\n     * @param b The accumulator to subtract\\n     * @return The resulting subtracted accumulator\\n     */\\n    function sub(Accumulator memory a, Accumulator memory b) internal pure returns (Accumulator memory) {\\n        return Accumulator({maker: a.maker.sub(b.maker), taker: a.taker.sub(b.taker)});\\n    }\\n\\n    /**\\n     * @notice Multiplies two accumulators together\\n     * @param a The first accumulator to multiply\\n     * @param b The second accumulator to multiply\\n     * @return The resulting multiplied accumulator\\n     */\\n    function mul(Accumulator memory a, Accumulator memory b) internal pure returns (Accumulator memory) {\\n        return Accumulator({maker: a.maker.mul(b.maker), taker: a.taker.mul(b.taker)});\\n    }\\n\\n    /**\\n     * @notice Sums the maker and taker together from a single accumulator\\n     * @param self The struct to operate on\\n     * @return The sum of its maker and taker\\n     */\\n    function sum(Accumulator memory self) internal pure returns (Fixed18) {\\n        return self.maker.add(self.taker);\\n    }\\n}\\n\",\"keccak256\":\"0x7ccd0a72aa593cefb9f4337cf312799f357b82fcb3f0379de0dc503d1cb7e387\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial/contracts/interfaces/types/PackedAccumulator.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/PackedFixed18.sol\\\";\\nimport \\\"./Accumulator.sol\\\";\\n\\n/// @dev PackedAccumulator type\\nstruct PackedAccumulator {\\n    /// @dev maker accumulator per share\\n    PackedFixed18 maker;\\n    /// @dev taker accumulator per share\\n    PackedFixed18 taker;\\n}\\nusing PackedAccumulatorLib for PackedAccumulator global;\\n\\n/**\\n * @title PackedAccumulatorLib\\n * @dev A packed version of the Accumulator which takes up a single storage slot using `PackedFixed18` values.\\n * @notice Library for the packed Accumulator type.\\n */\\nlibrary PackedAccumulatorLib {\\n    /**\\n     * @notice Creates an accumulator from a packed accumulator\\n     * @param self packed accumulator\\n     * @return New accumulator\\n     */\\n    function unpack(PackedAccumulator memory self) internal pure returns (Accumulator memory) {\\n        return Accumulator({maker: self.maker.unpack(), taker: self.taker.unpack()});\\n    }\\n}\\n\",\"keccak256\":\"0xd83f2822d4f6c818087a232b54007730992c34ff77377fc307a282f886e7cf65\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial/contracts/interfaces/types/PackedPosition.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/PackedUFixed18.sol\\\";\\nimport \\\"./Position.sol\\\";\\n\\n/// @dev PackedPosition type\\nstruct PackedPosition {\\n    /// @dev Quantity of the maker position\\n    PackedUFixed18 maker;\\n    /// @dev Quantity of the taker position\\n    PackedUFixed18 taker;\\n}\\nusing PackedPositionLib for PackedPosition global;\\n\\n/**\\n * @title PackedPositionLib\\n * @dev A packed version of the Position which takes up a single storage slot using `PackedFixed18` values.\\n * @notice Library for the packed Position type.\\n */\\nlibrary PackedPositionLib {\\n    /**\\n     * @notice Creates an position from a packed position\\n     * @param self packed position\\n     * @return New position\\n     */\\n    function unpack(PackedPosition memory self) internal pure returns (Position memory) {\\n        return Position({maker: self.maker.unpack(), taker: self.taker.unpack()});\\n    }\\n}\\n\",\"keccak256\":\"0x04968e6794f6244cb3415cea111d640273a81faea957872988d0cb580f45df1e\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial/contracts/interfaces/types/PayoffDefinition.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../../interfaces/IContractPayoffProvider.sol\\\";\\n\\n/// @dev PayoffDefinition tyoe\\nstruct PayoffDefinition {\\n  PayoffDefinitionLib.PayoffType payoffType;\\n  PayoffDefinitionLib.PayoffDirection payoffDirection;\\n  bytes30 data;\\n}\\nusing PayoffDefinitionLib for PayoffDefinition global;\\ntype PayoffDefinitionStorage is bytes32;\\nusing PayoffDefinitionStorageLib for PayoffDefinitionStorage global;\\n\\n/**\\n * @title PayoffDefinitionLib\\n * @dev Library that surfaces logic for PayoffDefinition type functionality\\n * @notice Library for the PayoffDefinition type. Performs validity and price transformation\\n            based on the payoff definition type.\\n */\\nlibrary PayoffDefinitionLib {\\n  using Address for address;\\n\\n  error PayoffDefinitionUnsupportedTransform(PayoffType payoffType, PayoffDirection payoffDirection);\\n  error PayoffDefinitionNotContract(PayoffType payoffType, bytes30 data);\\n\\n  /// @dev Payoff function type enum\\n  enum PayoffType { PASSTHROUGH, CONTRACT }\\n  enum PayoffDirection { LONG, SHORT }\\n\\n  /**\\n   * @notice Checks validity of the payoff definition\\n   * @param self a payoff definition\\n   * @return Whether the payoff definition is valid for it's given type\\n   */\\n  function valid(PayoffDefinition memory self) internal view returns (bool) {\\n    if (self.payoffType == PayoffType.CONTRACT) return address(_providerContract(self)).isContract();\\n\\n    // All other payoff types should have no data\\n    return uint(bytes32(self.data)) == 0;\\n  }\\n\\n  /**\\n   * @notice Transforms a price based on the payoff definition\\n   * @param self a payoff definition\\n   * @param price raw oracle price\\n   * @return Price transformed by the payoff definition function\\n   */\\n  function transform(\\n    PayoffDefinition memory self,\\n    Fixed18 price\\n  ) internal view returns (Fixed18) {\\n    PayoffType payoffType = self.payoffType;\\n    PayoffDirection payoffDirection = self.payoffDirection;\\n    Fixed18 transformedPrice;\\n\\n    // First get the price depending on the type\\n    if (payoffType == PayoffType.PASSTHROUGH) transformedPrice = price;\\n    else if (payoffType == PayoffType.CONTRACT) transformedPrice =  _payoffFromContract(self, price);\\n    else revert PayoffDefinitionUnsupportedTransform(payoffType, payoffDirection);\\n\\n    // Then transform it depending on the direction flag\\n    if (self.payoffDirection == PayoffDirection.LONG) return transformedPrice;\\n    else if (self.payoffDirection == PayoffDirection.SHORT) return transformedPrice.mul(Fixed18Lib.NEG_ONE);\\n    else revert PayoffDefinitionUnsupportedTransform(payoffType, payoffDirection);\\n  }\\n\\n  /**\\n   * @notice Parses the data field into an address\\n   * @dev Reverts if payoffType is not CONTRACT\\n   * @param self a payoff definition\\n   * @return IContractPayoffProvider address\\n   */\\n  function _providerContract(\\n    PayoffDefinition memory self\\n  ) private pure returns (IContractPayoffProvider) {\\n    if (self.payoffType != PayoffType.CONTRACT) revert PayoffDefinitionNotContract(self.payoffType, self.data);\\n    // Shift to pull the last 20 bytes, then cast to an address\\n    return IContractPayoffProvider(address(bytes20(self.data << 80)));\\n  }\\n\\n  /**\\n   * @notice Performs a price transformation by calling the underlying payoff contract\\n   * @param self a payoff definition\\n   * @param price raw oracle price\\n   * @return Price transformed by the payoff definition function on the contract\\n   */\\n  function _payoffFromContract(\\n    PayoffDefinition memory self,\\n    Fixed18 price\\n  ) private view returns (Fixed18) {\\n    bytes memory ret = address(_providerContract(self)).functionStaticCall(\\n      abi.encodeCall(IContractPayoffProvider.payoff, price)\\n    );\\n    return Fixed18.wrap(abi.decode(ret, (int256)));\\n  }\\n}\\n\\n/**\\n * @title PayoffDefinitionStorageLib\\n * @notice Library that surfaces storage read and writes for the PayoffDefinition type\\n */\\nlibrary PayoffDefinitionStorageLib {\\n    function read(PayoffDefinitionStorage self) internal view returns (PayoffDefinition memory) {\\n        return _storagePointer(self);\\n    }\\n\\n    function store(PayoffDefinitionStorage self, PayoffDefinition memory value) internal {\\n        PayoffDefinition storage storagePointer = _storagePointer(self);\\n\\n        storagePointer.payoffType = value.payoffType;\\n        storagePointer.payoffDirection = value.payoffDirection;\\n        storagePointer.data = value.data;\\n    }\\n\\n    function _storagePointer(\\n      PayoffDefinitionStorage self\\n    ) private pure returns (PayoffDefinition storage pointer) {\\n        assembly { pointer.slot := self } // solhint-disable-line no-inline-assembly\\n    }\\n}\\n\",\"keccak256\":\"0x99f9b5d5facba16885a375beac2a05129e7b23a8cceee048a7affd7f12a18a8f\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial/contracts/interfaces/types/PendingFeeUpdates.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\n\\n/// @dev PendingFeeUpdates type. Fees can be between 0 and 1 ** 10^18, so uint64 is sufficient\\nstruct PendingFeeUpdates {\\n    bool makerFeeUpdated;\\n    uint64 pendingMakerFee;\\n    bool takerFeeUpdated;\\n    uint64 pendingTakerFee;\\n    bool positionFeeUpdated;\\n    uint64 pendingPositionFee;\\n}\\nusing PendingFeeUpdatesLib for PendingFeeUpdates global;\\ntype PendingFeeUpdatesStorage is bytes32;\\nusing PendingFeeUpdatesStorageLib for PendingFeeUpdatesStorage global;\\n\\n/**\\n * @title PendingFeeUpdatesLib\\n * @dev Library that surfaces convenience functions for the PendingFeeUpdates type\\n * @notice Library for the PendingFeeUpdates type. Allows for setting and reading fee updates and clearing state\\n */\\nlibrary PendingFeeUpdatesLib {\\n    error PendingFeeUpdatesUnsupportedValue(UFixed18 value);\\n\\n    /**\\n     * @notice Updates the pending maker fee to `newMakerFee` and sets the `makerFeeUpdated` flag\\n     * @dev Reverts if `newMakerFee` is invalid\\n     * @param self PendingFeeUpdates struct\\n     * @param newMakerFee new maker fee value\\n     */\\n    function updateMakerFee(PendingFeeUpdates memory self, UFixed18 newMakerFee) internal pure {\\n        if (UFixed18.unwrap(newMakerFee) > type(uint64).max) revert PendingFeeUpdatesUnsupportedValue(newMakerFee);\\n        self.pendingMakerFee = uint64(UFixed18.unwrap(newMakerFee));\\n        self.makerFeeUpdated = true;\\n    }\\n\\n    /// @dev Returns the UFixed18-wrapped pending maker fee\\n    function makerFee(PendingFeeUpdates memory self) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(uint256(self.pendingMakerFee));\\n    }\\n\\n    /**\\n     * @notice Updates the pending taker fee to `newTakerFee` and sets the `takerFeeUpdated` flag\\n     * @dev Reverts if `newTakerFee` is invalid\\n     * @param self PendingFeeUpdates struct\\n     * @param newTakerFee new taker fee value\\n     */\\n    function updateTakerFee(PendingFeeUpdates memory self, UFixed18 newTakerFee) internal pure {\\n        if (UFixed18.unwrap(newTakerFee) > type(uint64).max) revert PendingFeeUpdatesUnsupportedValue(newTakerFee);\\n        self.pendingTakerFee = uint64(UFixed18.unwrap(newTakerFee));\\n        self.takerFeeUpdated = true;\\n    }\\n\\n    /// @dev Returns the UFixed18-wrapped pending taker fee\\n    function takerFee(PendingFeeUpdates memory self) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(uint256(self.pendingTakerFee));\\n    }\\n\\n    /**\\n     * @notice Updates the pending position fee to `newPositionFee` and sets the `positionFeeUpdated` flag\\n     * @dev Reverts if `newPositionFee` is invalid\\n     * @param self PendingFeeUpdates struct\\n     * @param newPositionFee new position fee value\\n     */\\n    function updatePositionFee(PendingFeeUpdates memory self, UFixed18 newPositionFee) internal pure {\\n        if (UFixed18.unwrap(newPositionFee) > type(uint64).max) revert PendingFeeUpdatesUnsupportedValue(newPositionFee);\\n        self.pendingPositionFee = uint64(UFixed18.unwrap(newPositionFee));\\n        self.positionFeeUpdated = true;\\n    }\\n\\n    /// @dev Returns the UFixed18-wrapped pending position fee\\n    function positionFee(PendingFeeUpdates memory self) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(uint256(self.pendingPositionFee));\\n    }\\n\\n    /// @dev Returns true if any of the updated flags are true\\n    function hasUpdates(PendingFeeUpdates memory self) internal pure returns (bool) {\\n        return self.makerFeeUpdated || self.takerFeeUpdated || self.positionFeeUpdated;\\n    }\\n\\n    /// @dev Resets all struct values to defaults\\n    function clear(PendingFeeUpdates memory self) internal pure {\\n        self.makerFeeUpdated = false;\\n        self.pendingMakerFee = 0;\\n        self.takerFeeUpdated = false;\\n        self.pendingTakerFee = 0;\\n        self.positionFeeUpdated = false;\\n        self.pendingPositionFee = 0;\\n    }\\n}\\n\\n/**\\n * @title PendingFeeUpdatesStorageLib\\n * @notice Library that surfaces storage read and writes for the PendingFeeUpdates type\\n */\\nlibrary PendingFeeUpdatesStorageLib {\\n    struct PendingFeeUpdatesStoragePointer {\\n        PendingFeeUpdates value;\\n    }\\n\\n    function read(PendingFeeUpdatesStorage self) internal view returns (PendingFeeUpdates memory) {\\n        return _storagePointer(self).value;\\n    }\\n\\n    function store(PendingFeeUpdatesStorage self, PendingFeeUpdates memory value) internal {\\n        _storagePointer(self).value = value;\\n    }\\n\\n    function _storagePointer(\\n        PendingFeeUpdatesStorage self\\n    ) private pure returns (PendingFeeUpdatesStoragePointer storage pointer) {\\n        /// @solidity memory-safe-assembly\\n        assembly { pointer.slot := self } // solhint-disable-line no-inline-assembly\\n    }\\n}\\n\",\"keccak256\":\"0xd98c681bdd6e1808e311615b3c4ac3b557ce5ec461f7b1cc645a51590eaf6f93\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial/contracts/interfaces/types/Position.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"../IProduct.sol\\\";\\nimport \\\"./Accumulator.sol\\\";\\nimport \\\"./PrePosition.sol\\\";\\nimport \\\"./PackedPosition.sol\\\";\\n\\n/// @dev Position type\\nstruct Position {\\n    /// @dev Quantity of the maker position\\n    UFixed18 maker;\\n    /// @dev Quantity of the taker position\\n    UFixed18 taker;\\n}\\nusing PositionLib for Position global;\\n\\n/**\\n * @title PositionLib\\n * @notice Library that surfaces math and settlement computations for the Position type.\\n * @dev Positions track the current quantity of the account's maker and taker positions respectively\\n *      denominated as a unit of the product's payoff function.\\n */\\nlibrary PositionLib {\\n    /**\\n     * @notice Creates a packed position from an position\\n     * @param self A position\\n     * @return New packed position\\n     */\\n    function pack(Position memory self) internal pure returns (PackedPosition memory) {\\n        return PackedPosition({maker: self.maker.pack(), taker: self.taker.pack()});\\n    }\\n\\n    /**\\n     * @notice Returns whether the position is fully empty\\n     * @param self A position\\n     * @return Whether the position is empty\\n     */\\n    function isEmpty(Position memory self) internal pure returns (bool) {\\n        return self.maker.isZero() && self.taker.isZero();\\n    }\\n\\n    /**\\n     * @notice Adds position `a` and `b` together, returning the result\\n     * @param a The first position to sum\\n     * @param b The second position to sum\\n     * @return Resulting summed position\\n     */\\n    function add(Position memory a, Position memory b) internal pure returns (Position memory) {\\n        return Position({maker: a.maker.add(b.maker), taker: a.taker.add(b.taker)});\\n    }\\n\\n    /**\\n     * @notice Subtracts position `b` from `a`, returning the result\\n     * @param a The position to subtract from\\n     * @param b The position to subtract\\n     * @return Resulting subtracted position\\n     */\\n    function sub(Position memory a, Position memory b) internal pure returns (Position memory) {\\n        return Position({maker: a.maker.sub(b.maker), taker: a.taker.sub(b.taker)});\\n    }\\n\\n    /**\\n     * @notice Multiplies position `self` by accumulator `accumulator` and returns the resulting accumulator\\n     * @param self The Position to operate on\\n     * @param accumulator The accumulator to multiply by\\n     * @return Resulting multiplied accumulator\\n     */\\n    function mul(Position memory self, Accumulator memory accumulator) internal pure returns (Accumulator memory) {\\n        return Accumulator({\\n            maker: Fixed18Lib.from(self.maker).mul(accumulator.maker),\\n            taker: Fixed18Lib.from(self.taker).mul(accumulator.taker)\\n        });\\n    }\\n\\n    /**\\n     * @notice Scales position `self` by fixed-decimal `scale` and returns the resulting position\\n     * @param self The Position to operate on\\n     * @param scale The Fixed-decimal to scale by\\n     * @return Resulting scaled position\\n     */\\n    function mul(Position memory self, UFixed18 scale) internal pure returns (Position memory) {\\n        return Position({maker: self.maker.mul(scale), taker: self.taker.mul(scale)});\\n    }\\n\\n    /**\\n     * @notice Divides position `self` by `b` and returns the resulting accumulator\\n     * @param self The Position to operate on\\n     * @param b The number to divide by\\n     * @return Resulting divided accumulator\\n     */\\n    function div(Position memory self, uint256 b) internal pure returns (Accumulator memory) {\\n        return Accumulator({\\n            maker: Fixed18Lib.from(self.maker).div(Fixed18Lib.from(UFixed18Lib.from(b))),\\n            taker: Fixed18Lib.from(self.taker).div(Fixed18Lib.from(UFixed18Lib.from(b)))\\n        });\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of `self`'s maker and taker values\\n     * @param self The struct to operate on\\n     * @return Resulting maximum value\\n     */\\n    function max(Position memory self) internal pure returns (UFixed18) {\\n        return UFixed18Lib.max(self.maker, self.taker);\\n    }\\n\\n    /**\\n     * @notice Sums the maker and taker together from a single position\\n     * @param self The struct to operate on\\n     * @return The sum of its maker and taker\\n     */\\n    function sum(Position memory self) internal pure returns (UFixed18) {\\n        return self.maker.add(self.taker);\\n    }\\n\\n    /**\\n     * @notice Computes the next position after the pending-settlement position delta is included\\n     * @param self The current Position\\n     * @param pre The pending-settlement position delta\\n     * @return Next Position\\n     */\\n    function next(Position memory self, PrePosition memory pre) internal pure returns (Position memory) {\\n        return sub(add(self, pre.openPosition), pre.closePosition);\\n    }\\n\\n    /**\\n     * @notice Returns the settled position at oracle version `toOracleVersion`\\n     * @dev Checks if a new position is ready to be settled based on the provided `toOracleVersion`\\n     *      and `pre` and returns accordingly\\n     * @param self The current Position\\n     * @param pre The pending-settlement position delta\\n     * @param toOracleVersion The oracle version to settle to\\n     * @return Settled position at oracle version\\n     * @return Whether a new position was settled\\n     */\\n    function settled(\\n        Position memory self,\\n        PrePosition memory pre,\\n        IOracleProvider.OracleVersion memory toOracleVersion\\n    ) internal pure returns (Position memory, bool) {\\n        return pre.canSettle(toOracleVersion) ? (next(self, pre), true) : (self, false);\\n    }\\n\\n    /**\\n     * @notice Returns the socialization factor for the current position\\n     * @dev Socialization account for the case where `taker` > `maker` temporarily due to a liquidation\\n     *      on the maker side. This dampens the taker's exposure pro-rata to ensure that the maker side\\n     *      is never exposed over 1 x short.\\n     * @param self The Position to operate on\\n     * @return Socialization factor\\n     */\\n    function socializationFactor(Position memory self) internal pure returns (UFixed18) {\\n        return self.taker.isZero() ? UFixed18Lib.ONE : UFixed18Lib.min(UFixed18Lib.ONE, self.maker.div(self.taker));\\n    }\\n}\\n\",\"keccak256\":\"0x367918730021f3d6b7035f40c53b00b4316eb5e7fa409ed6285ba6d49971aab1\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial/contracts/interfaces/types/PrePosition.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"@equilibria/perennial-oracle/contracts/interfaces/IOracleProvider.sol\\\";\\nimport \\\"./Position.sol\\\";\\nimport \\\"../IProduct.sol\\\";\\n\\n/// @dev PrePosition type\\nstruct PrePosition {\\n    /// @dev Oracle version at which the new position delta was recorded\\n    uint256 oracleVersion;\\n\\n    /// @dev Size of position to open at oracle version\\n    Position openPosition;\\n\\n    /// @dev Size of position to close at oracle version\\n    Position closePosition;\\n}\\nusing PrePositionLib for PrePosition global;\\n\\n/**\\n * @title PrePositionLib\\n * @notice Library that manages a pre-settlement position delta.\\n * @dev PrePositions track the currently awaiting-settlement deltas to a settled Position. These are\\n *      Primarily necessary to introduce lag into the settlement system such that oracle lag cannot be\\n *      gamed to a user's advantage. When a user opens or closes a new position, it sits as a PrePosition\\n *      for one oracle version until it's settle into the Position, making it then effective. PrePositions\\n *      are automatically settled at the correct oracle version even if a flywheel call doesn't happen until\\n *      several version into the future by using the historical version lookups in the corresponding \\\"Versioned\\\"\\n *      global state types.\\n */\\nlibrary PrePositionLib {\\n    /**\\n     * @notice Returns whether there is no pending-settlement position delta\\n     * @param self The struct to operate on\\n     * @return Whether the pending-settlement position delta is empty\\n     */\\n    function isEmpty(PrePosition memory self) internal pure returns (bool) {\\n        return self.openPosition.isEmpty() && self.closePosition.isEmpty();\\n    }\\n\\n    /**\\n     * @notice Increments the maker side of the open position delta\\n     * @param self The struct to operate on\\n     * @param currentVersion The current oracle version index\\n     * @param amount The position amount to open\\n     */\\n    function openMake(PrePosition storage self, uint256 currentVersion, UFixed18 amount) internal {\\n        self.openPosition.maker = self.openPosition.maker.add(amount);\\n        self.oracleVersion = currentVersion;\\n    }\\n\\n    /**\\n     * @notice Increments the maker side of the close position delta\\n     * @param self The struct to operate on\\n     * @param currentVersion The current oracle version index\\n     * @param amount The maker position amount to close\\n     */\\n    function closeMake(PrePosition storage self, uint256 currentVersion, UFixed18 amount) internal {\\n        self.closePosition.maker = self.closePosition.maker.add(amount);\\n        self.oracleVersion = currentVersion;\\n    }\\n\\n    /**\\n     * @notice Increments the taker side of the open position delta\\n     * @param self The struct to operate on\\n     * @param currentVersion The current oracle version index\\n     * @param amount The taker position amount to open\\n     */\\n    function openTake(PrePosition storage self, uint256 currentVersion, UFixed18 amount) internal {\\n        self.openPosition.taker = self.openPosition.taker.add(amount);\\n        self.oracleVersion = currentVersion;\\n    }\\n\\n    /**\\n     * @notice Increments the taker side of the close position delta\\n     * @param self The struct to operate on\\n     * @param currentVersion The current oracle version index\\n     * @param amount The taker position amount to close\\n     */\\n    function closeTake(PrePosition storage self, uint256 currentVersion, UFixed18 amount) internal {\\n        self.closePosition.taker = self.closePosition.taker.add(amount);\\n        self.oracleVersion = currentVersion;\\n    }\\n\\n    /**\\n     * @notice Returns whether the the pending position delta can be settled at version `toOracleVersion`\\n     * @dev Pending-settlement positions deltas can be settled (1) oracle version after they are recorded\\n     * @param self The struct to operate on\\n     * @param toOracleVersion The potential oracle version to settle\\n     * @return Whether the position delta can be settled\\n     */\\n    function canSettle(\\n        PrePosition memory self,\\n        IOracleProvider.OracleVersion memory toOracleVersion\\n    ) internal pure returns (bool) {\\n        return !isEmpty(self) && toOracleVersion.version > self.oracleVersion;\\n    }\\n\\n    /**\\n     * @notice Computes the fee incurred for opening or closing the pending-settlement position\\n     * @dev Must be called from a valid product to get the proper fee amounts\\n     * @param self The struct to operate on\\n     * @param latestOracleVersion The oracle version at which position was modified\\n     * @return The maker / taker fee incurred\\n     */\\n    function computeFee(\\n        PrePosition memory self,\\n        IOracleProvider.OracleVersion memory latestOracleVersion\\n    ) internal view returns (Position memory) {\\n        Position memory positionDelta = self.openPosition.add(self.closePosition);\\n\\n        (UFixed18 makerNotional, UFixed18 takerNotional) = (\\n            Fixed18Lib.from(positionDelta.maker).mul(latestOracleVersion.price).abs(),\\n            Fixed18Lib.from(positionDelta.taker).mul(latestOracleVersion.price).abs()\\n        );\\n\\n        IProduct product = IProduct(address(this));\\n        return Position(makerNotional.mul(product.makerFee()), takerNotional.mul(product.takerFee()));\\n    }\\n\\n    /**\\n     * @notice Computes the next oracle version to settle\\n     * @dev - If there is no pending-settlement position delta, returns the current oracle version\\n     *      - Otherwise returns the oracle version at which the pending-settlement position delta can be first settled\\n     *\\n     *      Corresponds to point (b) in the Position settlement flow\\n     * @param self The struct to operate on\\n     * @param currentVersion The current oracle version index\\n     * @return Next oracle version to settle\\n     */\\n    function settleVersion(PrePosition storage self, uint256 currentVersion) internal view returns (uint256) {\\n        uint256 _oracleVersion = self.oracleVersion;\\n        return _oracleVersion == 0 ? currentVersion : _oracleVersion + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x4d4443c34648f0352ed7c26ce8b837b6c7613169e53e95d92c8c59ee9e335692\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial/contracts/interfaces/types/ProgramInfo.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/token/types/Token18.sol\\\";\\nimport \\\"../IProduct.sol\\\";\\nimport \\\"./Position.sol\\\";\\nimport \\\"./Accumulator.sol\\\";\\n\\n/// @dev ProgramInfo type\\nstruct ProgramInfo {\\n    /// @dev Coordinator for this program\\n    uint256 coordinatorId;\\n\\n    /// @dev Amount of total maker and taker rewards\\n    Position amount;\\n\\n    /// @dev start timestamp of the program\\n    uint256 start;\\n\\n    /// @dev duration of the program (in seconds)\\n    uint256 duration;\\n\\n    /**\\n     * @dev Reward ERC20 token contract\\n     * @notice Perennial does not support non-standard ERC20s as reward tokens for incentive programs, including,\\n                but not limited to: fee on transfer and rebase tokens. Using such a non-standard token will likely\\n                result in loss of funds.\\n     */\\n    Token18 token;\\n}\\nusing ProgramInfoLib for ProgramInfo global;\\n\\n/**\\n * @title ProgramInfoLib\\n * @notice Library that snapshots the static information for a single program.\\n * @dev This information does not change during the operation of a program.\\n */\\nlibrary ProgramInfoLib {\\n    uint256 private constant MIN_DURATION = 1 days;\\n    uint256 private constant MAX_DURATION = 2 * 365 days;\\n\\n    error ProgramInvalidStartError();\\n    error ProgramInvalidDurationError();\\n\\n    /**\\n     * @notice Validates and creates a new Program\\n     * @dev Reverts for invalid programInfos\\n     * @param programInfo Un-sanitized static program information\\n     */\\n    function validate(ProgramInfo memory programInfo) internal view {\\n        if (isStarted(programInfo, block.timestamp)) revert ProgramInvalidStartError();\\n        if (programInfo.duration < MIN_DURATION || programInfo.duration > MAX_DURATION) revert ProgramInvalidDurationError();\\n    }\\n\\n    /**\\n     * @notice Computes a new program info with the fee taken out of the amount\\n     * @param programInfo Original program info\\n     * @param incentivizationFee The incentivization fee\\n     * @return New program info\\n     * @return Fee amount\\n     */\\n    function deductFee(ProgramInfo memory programInfo, UFixed18 incentivizationFee)\\n    internal pure returns (ProgramInfo memory, UFixed18) {\\n        Position memory newProgramAmount = programInfo.amount.mul(UFixed18Lib.ONE.sub(incentivizationFee));\\n        UFixed18 programFeeAmount = programInfo.amount.sub(newProgramAmount).sum();\\n        programInfo.amount = newProgramAmount;\\n        return (programInfo, programFeeAmount);\\n    }\\n\\n    /**\\n     * @notice Returns the maker and taker amounts per position share\\n     * @param self The ProgramInfo to operate on\\n     * @return programFee Amounts per share\\n     */\\n    function amountPerShare(ProgramInfo memory self) internal pure returns (Accumulator memory) {\\n        return self.amount.div(self.duration);\\n    }\\n\\n    /**\\n     * @notice Returns whether the program has started by timestamp `timestamp`\\n     * @param self The ProgramInfo to operate on\\n     * @param timestamp Timestamp to check for\\n     * @return Whether the program has started\\n     */\\n    function isStarted(ProgramInfo memory self, uint256 timestamp) internal pure returns (bool) {\\n        return timestamp >= self.start;\\n    }\\n\\n    /**\\n     * @notice Returns whether the program is completed by timestamp `timestamp`\\n     * @param self The ProgramInfo to operate on\\n     * @param timestamp Timestamp to check for\\n     * @return Whether the program is completed\\n     */\\n    function isComplete(ProgramInfo memory self, uint256 timestamp) internal pure returns (bool) {\\n        return timestamp >= (self.start + self.duration);\\n    }\\n}\\n\",\"keccak256\":\"0x280fcaf931b49abaec46b95ccbabaaf856a4b8e8d036413c9c3b3af25585d161\",\"license\":\"Apache-2.0\"},\"@equilibria/root/control/unstructured/UInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../../storage/UStorage.sol\\\";\\n\\n/**\\n * @title UInitializable\\n * @notice Library to manage the initialization lifecycle of upgradeable contracts\\n * @dev `UInitializable` allows the creation of pseudo-constructors for upgradeable contracts. One\\n *      `initializer` should be declared per top-level contract. Child contracts can use the `onlyInitializer`\\n *      modifier to tag their internal initialization functions to ensure that they can only be called\\n *      from a top-level `initializer` or a constructor.\\n */\\nabstract contract UInitializable {\\n    error UInitializableZeroVersionError();\\n    error UInitializableAlreadyInitializedError(uint256 version);\\n    error UInitializableNotInitializingError();\\n\\n    event Initialized(uint256 version);\\n\\n    /// @dev The initialized flag\\n    Uint256Storage private constant _version = Uint256Storage.wrap(keccak256(\\\"equilibria.root.UInitializable.version\\\"));\\n\\n    /// @dev The initializing flag\\n    BoolStorage private constant _initializing = BoolStorage.wrap(keccak256(\\\"equilibria.root.UInitializable.initializing\\\"));\\n\\n    /// @dev Can only be called once per version, `version` is 1-indexed\\n    modifier initializer(uint256 version) {\\n        if (version == 0) revert UInitializableZeroVersionError();\\n        if (_version.read() >= version) revert UInitializableAlreadyInitializedError(version);\\n\\n        _version.store(version);\\n        _initializing.store(true);\\n\\n        _;\\n\\n        _initializing.store(false);\\n        emit Initialized(version);\\n    }\\n\\n    /// @dev Can only be called from an initializer or constructor\\n    modifier onlyInitializer() {\\n        if (!_constructing() && !_initializing.read()) revert UInitializableNotInitializingError();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns whether the contract is currently being constructed\\n     * @dev {Address.isContract} returns false for contracts currently in the process of being constructed\\n     * @return Whether the contract is currently being constructed\\n     */\\n    function _constructing() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd2743d8fcc220ed2ccdc0bba1db0a3e107741bd5c0cac47ca8c0b5a00ba2fd7f\",\"license\":\"Apache-2.0\"},\"@equilibria/root/curve/CurveMath.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../number/types/UFixed18.sol\\\";\\nimport \\\"../number/types/Fixed18.sol\\\";\\n\\n/**\\n * @title CurveMath\\n * @notice Library for managing math operations for utilization curves.\\n */\\nlibrary CurveMath {\\n    error CurveMathOutOfBoundsError();\\n\\n    /**\\n     * @notice Computes a linear interpolation between two points\\n     * @param startX First point's x-coordinate\\n     * @param startY First point's y-coordinate\\n     * @param endX Second point's x-coordinate\\n     * @param endY Second point's y-coordinate\\n     * @param targetX x-coordinate to interpolate\\n     * @return y-coordinate for `targetX` along the line from (`startX`, `startY`) -> (`endX`, `endY`)\\n     */\\n    function linearInterpolation(\\n        UFixed18 startX,\\n        Fixed18 startY,\\n        UFixed18 endX,\\n        Fixed18 endY,\\n        UFixed18 targetX\\n    ) internal pure returns (Fixed18) {\\n        if (targetX.lt(startX) || targetX.gt(endX)) revert CurveMathOutOfBoundsError();\\n\\n        UFixed18 xRange = endX.sub(startX);\\n        Fixed18 yRange = endY.sub(startY);\\n        UFixed18 xRatio = targetX.sub(startX).div(xRange);\\n        return yRange.mul(Fixed18Lib.from(xRatio)).add(startY);\\n    }\\n}\\n\",\"keccak256\":\"0x60d159f9ddf0dbe81124ecad58bba734b4cf82877637ff8d9d7f3e92f2da4ded\",\"license\":\"Apache-2.0\"},\"@equilibria/root/curve/types/JumpRateUtilizationCurve.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../CurveMath.sol\\\";\\nimport \\\"../../number/types/PackedUFixed18.sol\\\";\\nimport \\\"../../number/types/PackedFixed18.sol\\\";\\n\\n/// @dev JumpRateUtilizationCurve type\\nstruct JumpRateUtilizationCurve {\\n    PackedFixed18 minRate;\\n    PackedFixed18 maxRate;\\n    PackedFixed18 targetRate;\\n    PackedUFixed18 targetUtilization;\\n}\\nusing JumpRateUtilizationCurveLib for JumpRateUtilizationCurve global;\\ntype JumpRateUtilizationCurveStorage is bytes32;\\nusing JumpRateUtilizationCurveStorageLib for JumpRateUtilizationCurveStorage global;\\n\\n/**\\n * @title JumpRateUtilizationCurveLib\\n * @notice Library for the Jump Rate utilization curve type\\n */\\nlibrary JumpRateUtilizationCurveLib {\\n    /**\\n     * @notice Computes the corresponding rate for a utilization ratio\\n     * @param utilization The utilization ratio\\n     * @return The corresponding rate\\n     */\\n    function compute(JumpRateUtilizationCurve memory self, UFixed18 utilization) internal pure returns (Fixed18) {\\n        UFixed18 targetUtilization = self.targetUtilization.unpack();\\n        if (utilization.lt(targetUtilization)) {\\n            return CurveMath.linearInterpolation(\\n                UFixed18Lib.ZERO,\\n                self.minRate.unpack(),\\n                targetUtilization,\\n                self.targetRate.unpack(),\\n                utilization\\n            );\\n        }\\n        if (utilization.lt(UFixed18Lib.ONE)) {\\n            return CurveMath.linearInterpolation(\\n                targetUtilization,\\n                self.targetRate.unpack(),\\n                UFixed18Lib.ONE,\\n                self.maxRate.unpack(),\\n                utilization\\n            );\\n        }\\n        return self.maxRate.unpack();\\n    }\\n}\\n\\nlibrary JumpRateUtilizationCurveStorageLib {\\n    function read(JumpRateUtilizationCurveStorage self) internal view returns (JumpRateUtilizationCurve memory) {\\n        return _storagePointer(self);\\n    }\\n\\n    function store(JumpRateUtilizationCurveStorage self, JumpRateUtilizationCurve memory value) internal {\\n        JumpRateUtilizationCurve storage storagePointer = _storagePointer(self);\\n\\n        storagePointer.minRate = value.minRate;\\n        storagePointer.maxRate = value.maxRate;\\n        storagePointer.targetRate = value.targetRate;\\n        storagePointer.targetUtilization = value.targetUtilization;\\n    }\\n\\n    function _storagePointer(JumpRateUtilizationCurveStorage self)\\n    private pure returns (JumpRateUtilizationCurve storage pointer) {\\n        assembly { pointer.slot := self }\\n    }\\n}\",\"keccak256\":\"0xae202813874bc306d51b3dab8194c86f6483bb20bf1f673ddaee16aa8de567ff\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/Fixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport \\\"./UFixed18.sol\\\";\\nimport \\\"./PackedFixed18.sol\\\";\\n\\n/// @dev Fixed18 type\\ntype Fixed18 is int256;\\nusing Fixed18Lib for Fixed18 global;\\ntype Fixed18Storage is bytes32;\\nusing Fixed18StorageLib for Fixed18Storage global;\\n\\n/**\\n * @title Fixed18Lib\\n * @notice Library for the signed fixed-decimal type.\\n */\\nlibrary Fixed18Lib {\\n    error Fixed18OverflowError(uint256 value);\\n    error Fixed18PackingOverflowError(int256 value);\\n    error Fixed18PackingUnderflowError(int256 value);\\n\\n    int256 private constant BASE = 1e18;\\n    Fixed18 public constant ZERO = Fixed18.wrap(0);\\n    Fixed18 public constant ONE = Fixed18.wrap(BASE);\\n    Fixed18 public constant NEG_ONE = Fixed18.wrap(-1 * BASE);\\n    Fixed18 public constant MAX = Fixed18.wrap(type(int256).max);\\n    Fixed18 public constant MIN = Fixed18.wrap(type(int256).min);\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from an unsigned fixed-decimal\\n     * @param a Unsigned fixed-decimal\\n     * @return New signed fixed-decimal\\n     */\\n    function from(UFixed18 a) internal pure returns (Fixed18) {\\n        uint256 value = UFixed18.unwrap(a);\\n        if (value > uint256(type(int256).max)) revert Fixed18OverflowError(value);\\n        return Fixed18.wrap(int256(value));\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a sign and an unsigned fixed-decimal\\n     * @param s Sign\\n     * @param m Unsigned fixed-decimal magnitude\\n     * @return New signed fixed-decimal\\n     */\\n    function from(int256 s, UFixed18 m) internal pure returns (Fixed18) {\\n        if (s > 0) return from(m);\\n        if (s < 0) return Fixed18.wrap(-1 * Fixed18.unwrap(from(m)));\\n        return ZERO;\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a signed integer\\n     * @param a Signed number\\n     * @return New signed fixed-decimal\\n     */\\n    function from(int256 a) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(a * BASE);\\n    }\\n\\n    /**\\n     * @notice Creates a packed signed fixed-decimal from an signed fixed-decimal\\n     * @param a signed fixed-decimal\\n     * @return New packed signed fixed-decimal\\n     */\\n    function pack(Fixed18 a) internal pure returns (PackedFixed18) {\\n        int256 value = Fixed18.unwrap(a);\\n        if (value > type(int128).max) revert Fixed18PackingOverflowError(value);\\n        if (value < type(int128).min) revert Fixed18PackingUnderflowError(value);\\n        return PackedFixed18.wrap(int128(value));\\n    }\\n\\n    /**\\n     * @notice Returns whether the signed fixed-decimal is equal to zero.\\n     * @param a Signed fixed-decimal\\n     * @return Whether the signed fixed-decimal is zero.\\n     */\\n    function isZero(Fixed18 a) internal pure returns (bool) {\\n        return Fixed18.unwrap(a) == 0;\\n    }\\n\\n    /**\\n     * @notice Adds two signed fixed-decimals `a` and `b` together\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting summed signed fixed-decimal\\n     */\\n    function add(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) + Fixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts signed fixed-decimal `b` from `a`\\n     * @param a Signed fixed-decimal to subtract from\\n     * @param b Signed fixed-decimal to subtract\\n     * @return Resulting subtracted signed fixed-decimal\\n     */\\n    function sub(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) - Fixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two signed fixed-decimals `a` and `b` together\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting multiplied signed fixed-decimal\\n     */\\n    function mul(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) * Fixed18.unwrap(b) / BASE);\\n    }\\n\\n    /**\\n     * @notice Divides signed fixed-decimal `a` by `b`\\n     * @param a Signed fixed-decimal to divide\\n     * @param b Signed fixed-decimal to divide by\\n     * @return Resulting divided signed fixed-decimal\\n     */\\n    function div(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) * BASE / Fixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0`, `MAX` for `n/0`, and `MIN` for `-n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDiv(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        if (isZero(b)) {\\n            if (gt(a, ZERO)) return MAX;\\n            if (lt(a, ZERO)) return MIN;\\n            return ONE;\\n        } else {\\n            return div(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First signed fixed-decimal\\n     * @param b Signed number to multiply by\\n     * @param c Signed number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(Fixed18 a, int256 b, int256 c) internal pure returns (Fixed18) {\\n        return muldiv(a, Fixed18.wrap(b), Fixed18.wrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First signed fixed-decimal\\n     * @param b Signed fixed-decimal to multiply by\\n     * @param c Signed fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(Fixed18 a, Fixed18 b, Fixed18 c) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) * Fixed18.unwrap(b) / Fixed18.unwrap(c));\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is equal to `b`\\n     */\\n    function eq(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 1;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is greater than `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is greater than `b`\\n     */\\n    function gt(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 2;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is less than `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is less than `b`\\n     */\\n    function lt(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 0;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is greater than or equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is greater than or equal to `b`\\n     */\\n    function gte(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return gt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is less than or equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is less than or equal to `b`\\n     */\\n    function lte(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return lt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Compares the signed fixed-decimals `a` and `b`\\n     * @dev Returns: 2 for greater than\\n     *               1 for equal to\\n     *               0 for less than\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Compare result of `a` and `b`\\n     */\\n    function compare(Fixed18 a, Fixed18 b) internal pure returns (uint256) {\\n        (int256 au, int256 bu) = (Fixed18.unwrap(a), Fixed18.unwrap(b));\\n        if (au > bu) return 2;\\n        if (au < bu) return 0;\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns a signed fixed-decimal representing the ratio of `a` over `b`\\n     * @param a First signed number\\n     * @param b Second signed number\\n     * @return Ratio of `a` over `b`\\n     */\\n    function ratio(int256 a, int256 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(a * BASE / b);\\n    }\\n\\n    /**\\n     * @notice Returns the minimum of signed fixed-decimals `a` and `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Minimum of `a` and `b`\\n     */\\n    function min(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(SignedMath.min(Fixed18.unwrap(a), Fixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of signed fixed-decimals `a` and `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Maximum of `a` and `b`\\n     */\\n    function max(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(SignedMath.max(Fixed18.unwrap(a), Fixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Converts the signed fixed-decimal into an integer, truncating any decimal portion\\n     * @param a Signed fixed-decimal\\n     * @return Truncated signed number\\n     */\\n    function truncate(Fixed18 a) internal pure returns (int256) {\\n        return Fixed18.unwrap(a) / BASE;\\n    }\\n\\n    /**\\n     * @notice Returns the sign of the signed fixed-decimal\\n     * @dev Returns: -1 for negative\\n     *                0 for zero\\n     *                1 for positive\\n     * @param a Signed fixed-decimal\\n     * @return Sign of the signed fixed-decimal\\n     */\\n    function sign(Fixed18 a) internal pure returns (int256) {\\n        if (Fixed18.unwrap(a) > 0) return 1;\\n        if (Fixed18.unwrap(a) < 0) return -1;\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Returns the absolute value of the signed fixed-decimal\\n     * @param a Signed fixed-decimal\\n     * @return Absolute value of the signed fixed-decimal\\n     */\\n    function abs(Fixed18 a) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(SignedMath.abs(Fixed18.unwrap(a)));\\n    }\\n}\\n\\nlibrary Fixed18StorageLib {\\n    function read(Fixed18Storage self) internal view returns (Fixed18 value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Fixed18Storage self, Fixed18 value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x613587461ef3437ef33229cdda7d34ea746278721baf06e20b2e43977f43174d\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/PackedFixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./Fixed18.sol\\\";\\n\\n/// @dev PackedFixed18 type\\ntype PackedFixed18 is int128;\\nusing PackedFixed18Lib for PackedFixed18 global;\\n\\n/**\\n * @title PackedFixed18Lib\\n * @dev A packed version of the Fixed18 which takes up half the storage space (two PackedFixed18 can be packed\\n *      into a single slot). Only valid within the range -1.7014118e+20 <= x <= 1.7014118e+20.\\n * @notice Library for the packed signed fixed-decimal type.\\n */\\nlibrary PackedFixed18Lib {\\n    PackedFixed18 public constant MAX = PackedFixed18.wrap(type(int128).max);\\n    PackedFixed18 public constant MIN = PackedFixed18.wrap(type(int128).min);\\n\\n    /**\\n     * @notice Creates an unpacked signed fixed-decimal from a packed signed fixed-decimal\\n     * @param self packed signed fixed-decimal\\n     * @return New unpacked signed fixed-decimal\\n     */\\n    function unpack(PackedFixed18 self) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(int256(PackedFixed18.unwrap(self)));\\n    }\\n}\\n\",\"keccak256\":\"0xb52960cc8e3132e45d342bbbb1c6a96219022cd8557997933bd8250170268b64\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/PackedUFixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./UFixed18.sol\\\";\\n\\n/// @dev PackedUFixed18 type\\ntype PackedUFixed18 is uint128;\\nusing PackedUFixed18Lib for PackedUFixed18 global;\\n\\n/**\\n * @title PackedUFixed18Lib\\n * @dev A packed version of the UFixed18 which takes up half the storage space (two PackedUFixed18 can be packed\\n *      into a single slot). Only valid within the range 0 <= x <= 3.4028237e+20.\\n * @notice Library for the packed unsigned fixed-decimal type.\\n */\\nlibrary PackedUFixed18Lib {\\n    PackedUFixed18 public constant MAX = PackedUFixed18.wrap(type(uint128).max);\\n\\n    /**\\n     * @notice Creates an unpacked unsigned fixed-decimal from a packed unsigned fixed-decimal\\n     * @param self packed unsigned fixed-decimal\\n     * @return New unpacked unsigned fixed-decimal\\n     */\\n    function unpack(PackedUFixed18 self) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(uint256(PackedUFixed18.unwrap(self)));\\n    }\\n}\\n\",\"keccak256\":\"0xb5c5cd32d6530b2fe75228b6be32ebcb7762f6d7988b85a6b85a289ce8256d51\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/UFixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./Fixed18.sol\\\";\\nimport \\\"./PackedUFixed18.sol\\\";\\n\\n/// @dev UFixed18 type\\ntype UFixed18 is uint256;\\nusing UFixed18Lib for UFixed18 global;\\ntype UFixed18Storage is bytes32;\\nusing UFixed18StorageLib for UFixed18Storage global;\\n\\n/**\\n * @title UFixed18Lib\\n * @notice Library for the unsigned fixed-decimal type.\\n */\\nlibrary UFixed18Lib {\\n    error UFixed18UnderflowError(int256 value);\\n    error UFixed18PackingOverflowError(uint256 value);\\n\\n    uint256 private constant BASE = 1e18;\\n    UFixed18 public constant ZERO = UFixed18.wrap(0);\\n    UFixed18 public constant ONE = UFixed18.wrap(BASE);\\n    UFixed18 public constant MAX = UFixed18.wrap(type(uint256).max);\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a signed fixed-decimal\\n     * @param a Signed fixed-decimal\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(Fixed18 a) internal pure returns (UFixed18) {\\n        int256 value = Fixed18.unwrap(a);\\n        if (value < 0) revert UFixed18UnderflowError(value);\\n        return UFixed18.wrap(uint256(value));\\n    }\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a unsigned integer\\n     * @param a Unsigned number\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(uint256 a) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(a * BASE);\\n    }\\n\\n    /**\\n     * @notice Creates a packed unsigned fixed-decimal from an unsigned fixed-decimal\\n     * @param a unsigned fixed-decimal\\n     * @return New packed unsigned fixed-decimal\\n     */\\n    function pack(UFixed18 a) internal pure returns (PackedUFixed18) {\\n        uint256 value = UFixed18.unwrap(a);\\n        if (value > type(uint128).max) revert UFixed18PackingOverflowError(value);\\n        return PackedUFixed18.wrap(uint128(value));\\n    }\\n\\n    /**\\n     * @notice Returns whether the unsigned fixed-decimal is equal to zero.\\n     * @param a Unsigned fixed-decimal\\n     * @return Whether the unsigned fixed-decimal is zero.\\n     */\\n    function isZero(UFixed18 a) internal pure returns (bool) {\\n        return UFixed18.unwrap(a) == 0;\\n    }\\n\\n    /**\\n     * @notice Adds two unsigned fixed-decimals `a` and `b` together\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting summed unsigned fixed-decimal\\n     */\\n    function add(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) + UFixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts unsigned fixed-decimal `b` from `a`\\n     * @param a Unsigned fixed-decimal to subtract from\\n     * @param b Unsigned fixed-decimal to subtract\\n     * @return Resulting subtracted unsigned fixed-decimal\\n     */\\n    function sub(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) - UFixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two unsigned fixed-decimals `a` and `b` together\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting multiplied unsigned fixed-decimal\\n     */\\n    function mul(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) * UFixed18.unwrap(b) / BASE);\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function div(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) * BASE / UFixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0` and `MAX` for `n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDiv(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        if (isZero(b)) {\\n            return isZero(a) ? ONE : MAX;\\n        } else {\\n            return div(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned number to multiply by\\n     * @param c Unsigned number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(UFixed18 a, uint256 b, uint256 c) internal pure returns (UFixed18) {\\n        return muldiv(a, UFixed18.wrap(b), UFixed18.wrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned fixed-decimal to multiply by\\n     * @param c Unsigned fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(UFixed18 a, UFixed18 b, UFixed18 c) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) * UFixed18.unwrap(b) / UFixed18.unwrap(c));\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is equal to `b`\\n     */\\n    function eq(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 1;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is greater than `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is greater than `b`\\n     */\\n    function gt(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 2;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is less than `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is less than `b`\\n     */\\n    function lt(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 0;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is greater than or equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is greater than or equal to `b`\\n     */\\n    function gte(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return gt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is less than or equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is less than or equal to `b`\\n     */\\n    function lte(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return lt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Compares the unsigned fixed-decimals `a` and `b`\\n     * @dev Returns: 2 for greater than\\n     *               1 for equal to\\n     *               0 for less than\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Compare result of `a` and `b`\\n     */\\n    function compare(UFixed18 a, UFixed18 b) internal pure returns (uint256) {\\n        (uint256 au, uint256 bu) = (UFixed18.unwrap(a), UFixed18.unwrap(b));\\n        if (au > bu) return 2;\\n        if (au < bu) return 0;\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns a unsigned fixed-decimal representing the ratio of `a` over `b`\\n     * @param a First unsigned number\\n     * @param b Second unsigned number\\n     * @return Ratio of `a` over `b`\\n     */\\n    function ratio(uint256 a, uint256 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(a * BASE / b);\\n    }\\n\\n    /**\\n     * @notice Returns the minimum of unsigned fixed-decimals `a` and `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Minimum of `a` and `b`\\n     */\\n    function min(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(Math.min(UFixed18.unwrap(a), UFixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of unsigned fixed-decimals `a` and `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Maximum of `a` and `b`\\n     */\\n    function max(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(Math.max(UFixed18.unwrap(a), UFixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Converts the unsigned fixed-decimal into an integer, truncating any decimal portion\\n     * @param a Unsigned fixed-decimal\\n     * @return Truncated unsigned number\\n     */\\n    function truncate(UFixed18 a) internal pure returns (uint256) {\\n        return UFixed18.unwrap(a) / BASE;\\n    }\\n}\\n\\nlibrary UFixed18StorageLib {\\n    function read(UFixed18Storage self) internal view returns (UFixed18 value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(UFixed18Storage self, UFixed18 value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8ebef1e6c717f565b9ed545a876b5692b4007e6485c99f39d363f7405e591792\",\"license\":\"Apache-2.0\"},\"@equilibria/root/storage/UStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../number/types/UFixed18.sol\\\";\\n\\n/// @dev Stored boolean slot\\ntype BoolStorage is bytes32;\\nusing BoolStorageLib for BoolStorage global;\\n\\n/// @dev Stored uint256 slot\\ntype Uint256Storage is bytes32;\\nusing Uint256StorageLib for Uint256Storage global;\\n\\n/// @dev Stored int256 slot\\ntype Int256Storage is bytes32;\\nusing Int256StorageLib for Int256Storage global;\\n\\n/// @dev Stored address slot\\ntype AddressStorage is bytes32;\\nusing AddressStorageLib for AddressStorage global;\\n\\n/// @dev Stored bytes32 slot\\ntype Bytes32Storage is bytes32;\\nusing Bytes32StorageLib for Bytes32Storage global;\\n\\n/**\\n * @title BoolStorageLib\\n * @notice Library to manage storage and retrival of a boolean at a fixed storage slot\\n */\\nlibrary BoolStorageLib {\\n    /**\\n     * @notice Retrieves the stored value\\n     * @param self Storage slot\\n     * @return value Stored bool value\\n     */\\n    function read(BoolStorage self) internal view returns (bool value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    /**\\n     * @notice Stores the value at the specific slot\\n     * @param self Storage slot\\n     * @param value boolean value to store\\n     */\\n    function store(BoolStorage self, bool value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\\n/**\\n * @title Uint256StorageLib\\n * @notice Library to manage storage and retrival of an uint256 at a fixed storage slot\\n */\\nlibrary Uint256StorageLib {\\n    /**\\n     * @notice Retrieves the stored value\\n     * @param self Storage slot\\n     * @return value Stored uint256 value\\n     */\\n    function read(Uint256Storage self) internal view returns (uint256 value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    /**\\n     * @notice Stores the value at the specific slot\\n     * @param self Storage slot\\n     * @param value uint256 value to store\\n     */\\n    function store(Uint256Storage self, uint256 value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\\n/**\\n * @title Int256StorageLib\\n * @notice Library to manage storage and retrival of an int256 at a fixed storage slot\\n */\\nlibrary Int256StorageLib {\\n    /**\\n     * @notice Retrieves the stored value\\n     * @param self Storage slot\\n     * @return value Stored int256 value\\n     */\\n    function read(Int256Storage self) internal view returns (int256 value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    /**\\n     * @notice Stores the value at the specific slot\\n     * @param self Storage slot\\n     * @param value int256 value to store\\n     */\\n    function store(Int256Storage self, int256 value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\\n/**\\n * @title AddressStorageLib\\n * @notice Library to manage storage and retrival of an address at a fixed storage slot\\n */\\nlibrary AddressStorageLib {\\n    /**\\n     * @notice Retrieves the stored value\\n     * @param self Storage slot\\n     * @return value Stored address value\\n     */\\n    function read(AddressStorage self) internal view returns (address value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    /**\\n     * @notice Stores the value at the specific slot\\n     * @param self Storage slot\\n     * @param value address value to store\\n     */\\n    function store(AddressStorage self, address value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\\n/**\\n * @title Bytes32StorageLib\\n * @notice Library to manage storage and retrival of a bytes32 at a fixed storage slot\\n */\\nlibrary Bytes32StorageLib {\\n    /**\\n     * @notice Retrieves the stored value\\n     * @param self Storage slot\\n     * @return value Stored bytes32 value\\n     */\\n    function read(Bytes32Storage self) internal view returns (bytes32 value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    /**\\n     * @notice Stores the value at the specific slot\\n     * @param self Storage slot\\n     * @param value bytes32 value to store\\n     */\\n    function store(Bytes32Storage self, bytes32 value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe2b8491d1b5aa93f7e059e1a8f156b0ab37fef9ed973be97a64f2eabfc2cc172\",\"license\":\"Apache-2.0\"},\"@equilibria/root/token/types/Token18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../number/types/UFixed18.sol\\\";\\n\\n/// @dev Token18\\ntype Token18 is address;\\nusing Token18Lib for Token18 global;\\ntype Token18Storage is bytes32;\\nusing Token18StorageLib for Token18Storage global;\\n\\n/**\\n * @title Token18Lib\\n * @notice Library to manage 18-decimal ERC20s that is compliant with the fixed-decimal types.\\n * @dev Maintains significant gas savings over other Token implementations since no conversion take place\\n */\\nlibrary Token18Lib {\\n    using SafeERC20 for IERC20;\\n\\n    Token18 public constant ZERO = Token18.wrap(address(0));\\n\\n    /**\\n     * @notice Returns whether a token is the zero address\\n     * @param self Token to check for\\n     * @return Whether the token is the zero address\\n     */\\n    function isZero(Token18 self) internal pure returns (bool) {\\n        return Token18.unwrap(self) == Token18.unwrap(ZERO);\\n    }\\n\\n    /**\\n     * @notice Returns whether the two tokens are equal\\n     * @param a First token to compare\\n     * @param b Second token to compare\\n     * @return Whether the two tokens are equal\\n     */\\n    function eq(Token18 a, Token18 b) internal pure returns (bool) {\\n        return Token18.unwrap(a) ==  Token18.unwrap(b);\\n    }\\n\\n    /**\\n     * @notice Approves `grantee` to spend infinite tokens from the caller\\n     * @param self Token to transfer\\n     * @param grantee Address to allow spending\\n     */\\n    function approve(Token18 self, address grantee) internal {\\n        IERC20(Token18.unwrap(self)).safeApprove(grantee, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Approves `grantee` to spend `amount` tokens from the caller\\n     * @dev There are important race conditions to be aware of when using this function\\n            with values other than 0. This will revert if moving from non-zero to non-zero amounts\\n            See https://github.com/OpenZeppelin/openzeppelin-contracts/blob/a55b7d13722e7ce850b626da2313f3e66ca1d101/contracts/token/ERC20/IERC20.sol#L57\\n     * @param self Token to transfer\\n     * @param grantee Address to allow spending\\n     * @param amount Amount of tokens to approve to spend\\n     */\\n    function approve(Token18 self, address grantee, UFixed18 amount) internal {\\n        IERC20(Token18.unwrap(self)).safeApprove(grantee, UFixed18.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Transfers all held tokens from the caller to the `recipient`\\n     * @param self Token to transfer\\n     * @param recipient Address to receive the tokens\\n     */\\n    function push(Token18 self, address recipient) internal {\\n        push(self, recipient, balanceOf(self, address(this)));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the caller to the `recipient`\\n     * @param self Token to transfer\\n     * @param recipient Address to transfer tokens to\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function push(Token18 self, address recipient, UFixed18 amount) internal {\\n        IERC20(Token18.unwrap(self)).safeTransfer(recipient, UFixed18.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the `benefactor` to the caller\\n     * @dev Reverts if trying to pull Ether\\n     * @param self Token to transfer\\n     * @param benefactor Address to transfer tokens from\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function pull(Token18 self, address benefactor, UFixed18 amount) internal {\\n        IERC20(Token18.unwrap(self)).safeTransferFrom(benefactor, address(this), UFixed18.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the `benefactor` to `recipient`\\n     * @dev Reverts if trying to pull Ether\\n     * @param self Token to transfer\\n     * @param benefactor Address to transfer tokens from\\n     * @param recipient Address to transfer tokens to\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function pullTo(Token18 self, address benefactor, address recipient, UFixed18 amount) internal {\\n        IERC20(Token18.unwrap(self)).safeTransferFrom(benefactor, recipient, UFixed18.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Returns the name of the token\\n     * @param self Token to check for\\n     * @return Token name\\n     */\\n    function name(Token18 self) internal view returns (string memory) {\\n        return IERC20Metadata(Token18.unwrap(self)).name();\\n    }\\n\\n    /**\\n     * @notice Returns the symbol of the token\\n     * @param self Token to check for\\n     * @return Token symbol\\n     */\\n    function symbol(Token18 self) internal view returns (string memory) {\\n        return IERC20Metadata(Token18.unwrap(self)).symbol();\\n    }\\n\\n    /**\\n     * @notice Returns the `self` token balance of the caller\\n     * @param self Token to check for\\n     * @return Token balance of the caller\\n     */\\n    function balanceOf(Token18 self) internal view returns (UFixed18) {\\n        return balanceOf(self, address(this));\\n    }\\n\\n    /**\\n     * @notice Returns the `self` token balance of `account`\\n     * @param self Token to check for\\n     * @param account Account to check\\n     * @return Token balance of the account\\n     */\\n    function balanceOf(Token18 self, address account) internal view returns (UFixed18) {\\n        return UFixed18.wrap(IERC20(Token18.unwrap(self)).balanceOf(account));\\n    }\\n}\\n\\nlibrary Token18StorageLib {\\n    function read(Token18Storage self) internal view returns (Token18 value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Token18Storage self, Token18 value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6b12afaece814f0ab186200a4729e93eb685a21d3e9b5a3372ff283a7ad5dc23\",\"license\":\"Apache-2.0\"},\"@equilibria/root/token/types/Token6.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../../number/types/UFixed18.sol\\\";\\n\\n/// @dev Token6\\ntype Token6 is address;\\nusing Token6Lib for Token6 global;\\ntype Token6Storage is bytes32;\\nusing Token6StorageLib for Token6Storage global;\\n\\n/**\\n * @title Token6Lib\\n * @notice Library to manage 6-decimal ERC20s that is compliant with the fixed-decimal types.\\n * @dev Automatically converts from Base-6 token amounts to Base-18 UFixed18 amounts, with optional rounding\\n */\\nlibrary Token6Lib {\\n    using SafeERC20 for IERC20;\\n\\n    Token6 public constant ZERO = Token6.wrap(address(0));\\n\\n    uint256 private constant OFFSET = 1e12;\\n\\n    /**\\n     * @notice Returns whether a token is the zero address\\n     * @param self Token to check for\\n     * @return Whether the token is the zero address\\n     */\\n    function isZero(Token6 self) internal pure returns (bool) {\\n        return Token6.unwrap(self) == Token6.unwrap(ZERO);\\n    }\\n\\n    /**\\n     * @notice Returns whether the two tokens are equal\\n     * @param a First token to compare\\n     * @param b Second token to compare\\n     * @return Whether the two tokens are equal\\n     */\\n    function eq(Token6 a, Token6 b) internal pure returns (bool) {\\n        return Token6.unwrap(a) ==  Token6.unwrap(b);\\n    }\\n\\n    /**\\n     * @notice Approves `grantee` to spend infinite tokens from the caller\\n     * @param self Token to transfer\\n     * @param grantee Address to allow spending\\n     */\\n    function approve(Token6 self, address grantee) internal {\\n        IERC20(Token6.unwrap(self)).safeApprove(grantee, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Approves `grantee` to spend `amount` tokens from the caller\\n     * @dev There are important race conditions to be aware of when using this function\\n            with values other than 0. This will revert if moving from non-zero to non-zero amounts\\n            See https://github.com/OpenZeppelin/openzeppelin-contracts/blob/a55b7d13722e7ce850b626da2313f3e66ca1d101/contracts/token/ERC20/IERC20.sol#L57\\n     * @param self Token to transfer\\n     * @param grantee Address to allow spending\\n     * @param amount Amount of tokens to approve to spend\\n     */\\n    function approve(Token6 self, address grantee, UFixed18 amount) internal {\\n        IERC20(Token6.unwrap(self)).safeApprove(grantee, toTokenAmount(amount, false));\\n    }\\n\\n    /**\\n     * @notice Approves `grantee` to spend `amount` tokens from the caller\\n     * @dev There are important race conditions to be aware of when using this function\\n            with values other than 0. This will revert if moving from non-zero to non-zero amounts\\n            See https://github.com/OpenZeppelin/openzeppelin-contracts/blob/a55b7d13722e7ce850b626da2313f3e66ca1d101/contracts/token/ERC20/IERC20.sol#L57\\n     * @param self Token to transfer\\n     * @param grantee Address to allow spending\\n     * @param amount Amount of tokens to approve to spend\\n     * @param roundUp Whether to round decimal token amount up to the next unit\\n     */\\n    function approve(Token6 self, address grantee, UFixed18 amount, bool roundUp) internal {\\n        IERC20(Token6.unwrap(self)).safeApprove(grantee, toTokenAmount(amount, roundUp));\\n    }\\n\\n    /**\\n     * @notice Transfers all held tokens from the caller to the `recipient`\\n     * @param self Token to transfer\\n     * @param recipient Address to receive the tokens\\n     */\\n    function push(Token6 self, address recipient) internal {\\n        push(self, recipient, balanceOf(self, address(this)));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the caller to the `recipient`\\n     * @param self Token to transfer\\n     * @param recipient Address to transfer tokens to\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function push(Token6 self, address recipient, UFixed18 amount) internal {\\n        IERC20(Token6.unwrap(self)).safeTransfer(recipient, toTokenAmount(amount, false));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the caller to the `recipient`\\n     * @param self Token to transfer\\n     * @param recipient Address to transfer tokens to\\n     * @param amount Amount of tokens to transfer\\n     * @param roundUp Whether to round decimal token amount up to the next unit\\n     */\\n    function push(Token6 self, address recipient, UFixed18 amount, bool roundUp) internal {\\n        IERC20(Token6.unwrap(self)).safeTransfer(recipient, toTokenAmount(amount, roundUp));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the `benefactor` to the caller\\n     * @dev Reverts if trying to pull Ether\\n     * @param self Token to transfer\\n     * @param benefactor Address to transfer tokens from\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function pull(Token6 self, address benefactor, UFixed18 amount) internal {\\n        IERC20(Token6.unwrap(self)).safeTransferFrom(benefactor, address(this), toTokenAmount(amount, false));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the `benefactor` to the caller\\n     * @dev Reverts if trying to pull Ether\\n     * @param self Token to transfer\\n     * @param benefactor Address to transfer tokens from\\n     * @param amount Amount of tokens to transfer\\n     * @param roundUp Whether to round decimal token amount up to the next unit\\n     */\\n    function pull(Token6 self, address benefactor, UFixed18 amount, bool roundUp) internal {\\n        IERC20(Token6.unwrap(self)).safeTransferFrom(benefactor, address(this), toTokenAmount(amount, roundUp));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the `benefactor` to `recipient`\\n     * @dev Reverts if trying to pull Ether\\n     * @param self Token to transfer\\n     * @param benefactor Address to transfer tokens from\\n     * @param recipient Address to transfer tokens to\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function pullTo(Token6 self, address benefactor, address recipient, UFixed18 amount) internal {\\n        IERC20(Token6.unwrap(self)).safeTransferFrom(benefactor, recipient, toTokenAmount(amount, false));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the `benefactor` to `recipient`\\n     * @dev Reverts if trying to pull Ether\\n     * @param self Token to transfer\\n     * @param benefactor Address to transfer tokens from\\n     * @param recipient Address to transfer tokens to\\n     * @param amount Amount of tokens to transfer\\n     * @param roundUp Whether to round decimal token amount up to the next unit\\n     */\\n    function pullTo(Token6 self, address benefactor, address recipient, UFixed18 amount, bool roundUp) internal {\\n        IERC20(Token6.unwrap(self)).safeTransferFrom(benefactor, recipient, toTokenAmount(amount, roundUp));\\n    }\\n\\n    /**\\n     * @notice Returns the name of the token\\n     * @param self Token to check for\\n     * @return Token name\\n     */\\n    function name(Token6 self) internal view returns (string memory) {\\n        return IERC20Metadata(Token6.unwrap(self)).name();\\n    }\\n\\n    /**\\n     * @notice Returns the symbol of the token\\n     * @param self Token to check for\\n     * @return Token symbol\\n     */\\n    function symbol(Token6 self) internal view returns (string memory) {\\n        return IERC20Metadata(Token6.unwrap(self)).symbol();\\n    }\\n\\n    /**\\n     * @notice Returns the `self` token balance of the caller\\n     * @param self Token to check for\\n     * @return Token balance of the caller\\n     */\\n    function balanceOf(Token6 self) internal view returns (UFixed18) {\\n        return balanceOf(self, address(this));\\n    }\\n\\n    /**\\n     * @notice Returns the `self` token balance of `account`\\n     * @param self Token to check for\\n     * @param account Account to check\\n     * @return Token balance of the account\\n     */\\n    function balanceOf(Token6 self, address account) internal view returns (UFixed18) {\\n        return fromTokenAmount(IERC20(Token6.unwrap(self)).balanceOf(account));\\n    }\\n\\n    /**\\n     * @notice Converts the unsigned fixed-decimal amount into the token amount according to\\n     *         it's defined decimals\\n     * @dev Provides the ability to \\\"round up\\\" the token amount which is useful in situations where\\n     *      are swapping one token for another and don't want to give away \\\"free\\\" units due to rounding\\n     *      errors in the favor of the user.\\n     * @param amount Amount to convert\\n     * @param roundUp Whether to round decimal token amount up to the next unit\\n     * @return Normalized token amount\\n     */\\n    function toTokenAmount(UFixed18 amount, bool roundUp) private pure returns (uint256) {\\n        return roundUp ? Math.ceilDiv(UFixed18.unwrap(amount), OFFSET) : UFixed18.unwrap(amount) / OFFSET;\\n    }\\n\\n    /**\\n     * @notice Converts the token amount into the unsigned fixed-decimal amount according to\\n     *         it's defined decimals\\n     * @param amount Token amount to convert\\n     * @return Normalized unsigned fixed-decimal amount\\n     */\\n    function fromTokenAmount(uint256 amount) private pure returns (UFixed18) {\\n        return UFixed18.wrap(amount * OFFSET);\\n    }\\n}\\n\\nlibrary Token6StorageLib {\\n    function read(Token6Storage self) internal view returns (Token6 value) {\\n        assembly {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Token6Storage self, Token6 value) internal {\\n        assembly {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5ec7bee45a0e13f91ab2399472cf11136496073ad470cd70244855e12a7b6e65\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb3ebde1c8d27576db912d87c3560dab14adfb9cd001be95890ec4ba035e652e7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c8063505bd3da116100f9578063c96f14b811610097578063d905777e11610071578063d905777e14610521578063dd62ed3e14610551578063f77c479114610581578063fff6cae91461059f576101c4565b8063c96f14b8146104c7578063d6c946ea146104e5578063d8dfeb4514610503576101c4565b80637bde82f2116100d35780637bde82f21461042d57806395d89b4114610449578063a9059cbb14610467578063c6e6f59214610497576101c4565b8063505bd3da146103b15780636e553f65146103e157806370a08231146103fd576101c4565b806323b872dd1161016657806338bea4cb1161014057806338bea4cb1461032957806338d52e0f14610347578063402d267d146103655780634cd88b7614610395576101c4565b806323b872dd146102bd578063251f47c1146102ed578063313ce5671461030b576101c4565b806307bfce37116101a257806307bfce3714610235578063095ea7b31461025357806318160ddd146102835780631e83409a146102a1576101c4565b806301e1d114146101c957806306fdde03146101e757806307a2d13a14610205575b600080fd5b6101d16105a9565b6040516101de9190614799565b60405180910390f35b6101ef6105c8565b6040516101fc919061484d565b60405180910390f35b61021f600480360381019061021a91906148af565b610656565b60405161022c9190614799565b60405180910390f35b61023d61069c565b60405161024a9190614951565b60405180910390f35b61026d600480360381019061026891906149aa565b6106c0565b60405161027a9190614a05565b60405180910390f35b61028b6107b2565b6040516102989190614799565b60405180910390f35b6102bb60048036038101906102b69190614a20565b6107d1565b005b6102d760048036038101906102d29190614a4d565b6109be565b6040516102e49190614a05565b60405180910390f35b6102f56109ec565b6040516103029190614799565b60405180910390f35b610313610a10565b6040516103209190614abc565b60405180910390f35b610331610a19565b60405161033e9190614951565b60405180910390f35b61034f610a3d565b60405161035c9190614af8565b60405180910390f35b61037f600480360381019061037a9190614a20565b610a61565b60405161038c9190614799565b60405180910390f35b6103af60048036038101906103aa9190614c48565b610a82565b005b6103cb60048036038101906103c69190614a20565b610c8a565b6040516103d89190614799565b60405180910390f35b6103fb60048036038101906103f69190614cc0565b610cab565b005b61041760048036038101906104129190614a20565b610ed4565b6040516104249190614799565b60405180910390f35b61044760048036038101906104429190614cc0565b610ef5565b005b610451611121565b60405161045e919061484d565b60405180910390f35b610481600480360381019061047c91906149aa565b6111af565b60405161048e9190614a05565b60405180910390f35b6104b160048036038101906104ac91906148af565b6111d1565b6040516104be9190614799565b60405180910390f35b6104cf611217565b6040516104dc9190614799565b60405180910390f35b6104ed611236565b6040516104fa9190614799565b60405180910390f35b61050b61125a565b6040516105189190614d21565b60405180910390f35b61053b60048036038101906105369190614a20565b61127e565b6040516105489190614799565b60405180910390f35b61056b60048036038101906105669190614d3c565b6112a4565b6040516105789190614799565b60405180910390f35b6105896112c9565b6040516105969190614d9d565b60405180910390f35b6105a76112ed565b005b6000806105b6600061130a565b5090506105c281611526565b91505090565b600080546105d590614de7565b80601f016020809104026020016040519081016040528092919081815260200182805461060190614de7565b801561064e5780601f106106235761010080835404028352916020019161064e565b820191906000526020600020905b81548152906001019060200180831161063157829003601f168201915b505050505081565b600080610663600061130a565b50905061066f81611526565b610678826115c1565b8260200183604001828152508281525050506106948184611602565b915050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516107a09190614799565b60405180910390a36001905092915050565b6000806107bf600061130a565b5090506107cb816115c1565b91505090565b60006107dc82611644565b5090506000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600060065490506000600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108828282611c0b90919063ffffffff16565b6006819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f70eb43c4a8ae8c40502dcf22436c509c28d6ff421cf07c491be56984bd987068846040516108e59190614799565b60405180910390a3600082905060008060006108ff611c21565b925092509250600061092c8261091e8587611de890919063ffffffff16565b611de890919063ffffffff16565b90506109418682611dfe90919063ffffffff16565b1561095e5761095b818787611e149092919063ffffffff16565b94505b6109688886611e36565b6109b389867f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16611e4d9092919063ffffffff16565b505050505050505050565b60006109c984611644565b50506109d6843384611e7d565b6109e1848484612045565b600190509392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006012905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080610a6e600061130a565b509050610a7a816121d9565b915050919050565b600160008103610abe576040517fb66146bd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80610ae87f5db5abc19987c2b3729df7961b62b6bb0bae886dd47e3ce25bb3a3af34c6d80b61228e565b10610b2a57806040517f1e7a9d95000000000000000000000000000000000000000000000000000000008152600401610b219190614e27565b60405180910390fd5b610b5d817f5db5abc19987c2b3729df7961b62b6bb0bae886dd47e3ce25bb3a3af34c6d80b61229990919063ffffffff16565b610b9160017fad57d7911b7e3d6c3c79a68ba909a7f4ba41f9485e5207b12dee0d0c6af5398c6122a090919063ffffffff16565b8260009081610ba09190614fc2565b508160019081610bb09190614fc2565b50610c1a7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166122a790919063ffffffff16565b610c4e60007fad57d7911b7e3d6c3c79a68ba909a7f4ba41f9485e5207b12dee0d0c6af5398c6122a090919063ffffffff16565b7fbe9b076dc5b65990cca9dd9d7366682482e7817a6f6bc7f4faf4dc32af497f3281604051610c7d9190614e27565b60405180910390a1505050565b600080610c968361130a565b915050610ca381846122f6565b915050919050565b6000610cb682611644565b509050610cd4610cc5826121d9565b8461242c90919063ffffffff16565b15610d0b576040517f6726139b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d2083600754611de890919063ffffffff16565b6007819055508060000151600981905550610d8383600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611de890919063ffffffff16565b600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508060000151600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7836000015186604051610e71929190615094565b60405180910390a3610ec433847f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166124439092919063ffffffff16565b610ecf816000611e36565b505050565b600080610ee08361130a565b915050610eed8184612475565b915050919050565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f3457610f33813384611e7d565b5b600080610f4083611644565b91509150610f61610f528383866125ab565b8561242c90919063ffffffff16565b15610f98576040517f457c19da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610fad84600854611de890919063ffffffff16565b600881905550816000015160098190555061101084600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611de890919063ffffffff16565b600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160000151600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fa28d80c9910787c0c058ed9b50c577f1389264bf61563fa45529e0771976f5628460000151876040516110fe929190615094565b60405180910390a361111083856125d8565b61111b826000611e36565b50505050565b6001805461112e90614de7565b80601f016020809104026020016040519081016040528092919081815260200182805461115a90614de7565b80156111a75780601f1061117c576101008083540402835291602001916111a7565b820191906000526020600020905b81548152906001019060200180831161118a57829003601f168201915b505050505081565b60006111ba33611644565b50506111c7338484612045565b6001905092915050565b6000806111de600061130a565b5090506111ea81611526565b6111f3826115c1565b82602001836040018281525082815250505061120f81846126f2565b915050919050565b600080611224600061130a565b50905061123081612734565b91505090565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080600061128c8461130a565b9150915061129b8282866125ab565b92505050919050565b6002602052816000526040600020602052806000526040600020600091509150505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006112f96000611644565b509050611307816000611e36565b50565b611312614719565b61131a614719565b60006114427f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c07f47d46040518163ffffffff1660e01b8152600401602060405180830381865afa15801561138a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ae91906150e9565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c07f47d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611419573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143d91906150e9565b612775565b9050604051806060016040528082815260200161146060095461278e565b8152602001611470600954612bf6565b81525060405180606001604052808381526020016114cc600c60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461278e565b8152602001611519600c60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612bf6565b8152509250925050915091565b600080600080611534611c21565b925092509250600080611562836115548688611de890919063ffffffff16565b611de890919063ffffffff16565b61157f6007546115718a612734565b611de890919063ffffffff16565b91509150611596818361242c90919063ffffffff16565b6115a15760006115b5565b6115b48183611c0b90919063ffffffff16565b5b95505050505050919050565b60006009548260000151036115da5760045490506115fd565b6115fa6115e9836007546126f2565b600454611de890919063ffffffff16565b90505b919050565b60006116118360400151612c16565b1561161e5781905061163e565b61163b8360200151846040015184611e149092919063ffffffff16565b90505b92915050565b61164c614719565b611654614719565b61165d83612c22565b8092508193505050600954826000015111156119fe57611698611693600454611685856115c1565b611c0b90919063ffffffff16565b612ec8565b6116a182612734565b6006819055506000600781905550600060088190555081600001516009819055506040518060c001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b7648fb9306040518263ffffffff1660e01b81526004016117269190615125565b6040805180830381865afa158015611742573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176691906151aa565b6000015181526020017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b7648fb9306040518263ffffffff1660e01b81526004016117c89190615125565b6040805180830381865afa1580156117e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180891906151aa565b60000151815260200160045481526020017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663cc218ece307f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b81526004016118949291906151d7565b602060405180830381865afa1580156118b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d59190615200565b81526020017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663cc218ece307f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b81526004016119559291906151d7565b602060405180830381865afa158015611972573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119969190615200565b81526020016119a484611526565b815250600d600084600001518152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a082015181600501559050505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611a7d5750600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548160000151115b15611c0657611ae683611ae1600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611ad38588612475565b611c0b90919063ffffffff16565b612ee6565b611af081846122f6565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508060000151600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b915091565b60008183611c19919061525c565b905092915050565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663cc218ece307f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b8152600401611ca19291906151d7565b602060405180830381865afa158015611cbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce29190615200565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663cc218ece307f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b8152600401611d5d9291906151d7565b602060405180830381865afa158015611d7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9e9190615200565b611ddd7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16612fe5565b925092509250909192565b60008183611df69190615290565b905092915050565b600080611e0b8484612ff8565b14905092915050565b6000818385611e2391906152e6565b611e2d919061536f565b90509392505050565b611e3f81613036565b611e4982826132ca565b5050565b611e7882828573ffffffffffffffffffffffffffffffffffffffff1661359e9092919063ffffffff16565b505050565b611f2c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461362490919063ffffffff16565b61204057611fbf81600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c0b90919063ffffffff16565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b505050565b61209781600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c0b90919063ffffffff16565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061212c81600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611de890919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516121cc9190614799565b60405180910390a3505050565b60006121e48261363b565b156121f25760009050612289565b600061221160075461220385611526565b611de890919063ffffffff16565b9050612246817f000000000000000000000000000000000000000000000000000000000000000061242c90919063ffffffff16565b612251576000612285565b612284817f0000000000000000000000000000000000000000000000000000000000000000611c0b90919063ffffffff16565b5b9150505b919050565b600081549050919050565b8082555050565b8082555050565b6122f2817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8473ffffffffffffffffffffffffffffffffffffffff1661392f9092919063ffffffff16565b5050565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483600001510361238957600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050612426565b6124236123d584600b60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611602565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611de890919063ffffffff16565b90505b92915050565b6000600261243a8484612ff8565b14905092915050565b6124708230838673ffffffffffffffffffffffffffffffffffffffff16613a7e909392919063ffffffff16565b505050565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483600001510361250857600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506125a5565b6125a261255484600a60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546126f2565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611de890919063ffffffff16565b90505b92915050565b60006125b68461363b565b156125c457600090506125d1565b6125ce8383612475565b90505b9392505050565b61262a81600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611c0b90919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061268281600454611c0b90919063ffffffff16565b600481905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516126e69190614799565b60405180910390a35050565b60006127018360200151612c16565b1561270e5781905061272e565b61272b8360400151846020015184611e149092919063ffffffff16565b90505b92915050565b600060095482600001510361274d576006549050612770565b61276d61275c83600854611602565b600654611de890919063ffffffff16565b90505b919050565b60008183106127845781612786565b825b905092915050565b60008061298d6127f8670de0b6b3a76400007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6127cb91906153aa565b6127ea600d600088815260200190815260200160002060030154613b07565b613b7a90919063ffffffff16565b61297f61281a600d600088815260200190815260200160002060000154613b07565b6129717f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166320fe9c3c896040518263ffffffff1660e01b81526004016128769190614e27565b6040805180830381865afa158015612892573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b6919061553d565b600001517f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166320fe9c3c60018b6129039190615290565b6040518263ffffffff1660e01b815260040161291f9190614e27565b6040805180830381865afa15801561293b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295f919061553d565b60000151613ba390919063ffffffff16565b613b7a90919063ffffffff16565b613bb990919063ffffffff16565b90506000612b8d6129f8670de0b6b3a76400007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6129cb91906153aa565b6129ea600d600089815260200190815260200160002060040154613b07565b613b7a90919063ffffffff16565b612b7f612a1a600d600089815260200190815260200160002060010154613b07565b612b717f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166320fe9c3c8a6040518263ffffffff1660e01b8152600401612a769190614e27565b6040805180830381865afa158015612a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ab6919061553d565b600001517f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166320fe9c3c60018c612b039190615290565b6040518263ffffffff1660e01b8152600401612b1f9190614e27565b6040805180830381865afa158015612b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5f919061553d565b60000151613ba390919063ffffffff16565b613b7a90919063ffffffff16565b613bb990919063ffffffff16565b9050612bed612be86000612bda84612bcc87612bbe600d60008d815260200190815260200160002060050154613b07565b613bcd90919063ffffffff16565b613bcd90919063ffffffff16565b613bb990919063ffffffff16565b613be3565b92505050919050565b6000600d6000838152602001908152602001600020600201549050919050565b60008082149050919050565b612c2a614719565b612c32614719565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f667f897306040518263ffffffff1660e01b8152600401612c8b9190615125565b600060405180830381600087803b158015612ca557600080fd5b505af1158015612cb9573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f667f897306040518263ffffffff1660e01b8152600401612d169190615125565b600060405180830381600087803b158015612d3057600080fd5b505af1158015612d44573d6000803e3d6000fd5b5050505060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638e480b20306040518263ffffffff1660e01b8152600401612da39190615125565b602060405180830381865afa158015612dc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612de491906150e9565b90506040518060600160405280828152602001612e0260095461278e565b8152602001612e12600954612bf6565b8152506040518060600160405280838152602001612e6e600c60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461278e565b8152602001612ebb600c60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612bf6565b8152509250925050915091565b612edd81600454611de890919063ffffffff16565b60048190555050565b612f3881600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611de890919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051612fd99190614799565b60405180910390a35050565b6000612ff18230613c38565b9050919050565b60008060008484915091508082111561301657600292505050613030565b8082101561302957600092505050613030565b6001925050505b92915050565b6000806000613043611c21565b925092509250600061308285613074846130668789611de890919063ffffffff16565b611de890919063ffffffff16565b611c0b90919063ffffffff16565b905060006130a1671bc16d674ec8000083613cbc90919063ffffffff16565b90506131447f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ba2de9bc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613111573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131359190615200565b82611dfe90919063ffffffff16565b1561314e57600090505b600080613164868861242c90919063ffffffff16565b6131af577f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006131f2565b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000005b9150915061325b827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146132535787613255565b885b85613ce5565b6132c0817f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146132b857876132ba565b885b85613ce5565b5050505050505050565b60006132e7826132d985611526565b611c0b90919063ffffffff16565b9050600061330a613305600854600454611de890919063ffffffff16565b612c16565b6133545761334f61333e60045461332e600854600454611de890919063ffffffff16565b85611e149092919063ffffffff16565b600754611de890919063ffffffff16565b61336a565b61336982600754611de890919063ffffffff16565b5b9050613427613418671bc16d674ec800007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ba2de9bc6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156133e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061340a9190615200565b613e9790919063ffffffff16565b82611dfe90919063ffffffff16565b1561343157600090505b60006134dd7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16637ece075d87600001516040518263ffffffff1660e01b81526004016134939190614e27565b606060405180830381865afa1580156134b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134d491906155ce565b60400151613ec0565b90506000613540671bc16d674ec80000613532846135247f000000000000000000000000000000000000000000000000000000000000000088613e9790919063ffffffff16565b613cbc90919063ffffffff16565b613cbc90919063ffffffff16565b905061356c7f000000000000000000000000000000000000000000000000000000000000000082613ed2565b6135967f000000000000000000000000000000000000000000000000000000000000000082613ed2565b505050505050565b61361f8363a9059cbb60e01b84846040516024016135bd9291906155fb565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614375565b505050565b600060016136328484612ff8565b14905092915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166382df39de307f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b81526004016136b89291906151d7565b602060405180830381865afa1580156136d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f99190615650565b806137bc57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166382df39de307f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b815260040161377a9291906151d7565b602060405180830381865afa158015613797573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137bb9190615650565b5b8061385d57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166358ca6f98306040518263ffffffff1660e01b815260040161381b9190615125565b602060405180830381865afa158015613838573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061385c9190615650565b5b806138fe57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166358ca6f98306040518263ffffffff1660e01b81526004016138bc9190615125565b602060405180830381865afa1580156138d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138fd9190615650565b5b8061392857506139118260400151612c16565b15801561392757506139268260200151612c16565b5b5b9050919050565b60008114806139b9575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b815260040161397692919061567d565b602060405180830381865afa158015613993573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139b791906150e9565b145b6139f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139ef90615718565b60405180910390fd5b613a798363095ea7b360e01b8484604051602401613a179291906155fb565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614375565b505050565b613b01846323b872dd60e01b858585604051602401613a9f93929190615738565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614375565b50505050565b6000808290507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811115613b7157806040517ea07eb5000000000000000000000000000000000000000000000000000000008152600401613b689190614e27565b60405180910390fd5b80915050919050565b6000670de0b6b3a76400008284613b9191906153aa565b613b9b919061576f565b905092915050565b60008183613bb191906157d9565b905092915050565b6000613bc5838361443c565b905092915050565b60008183613bdb919061586d565b905092915050565b6000808290506000811215613c2f57806040517f501f289e000000000000000000000000000000000000000000000000000000008152600401613c269190615910565b60405180910390fd5b80915050919050565b60008273ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b8152600401613c739190615125565b602060405180830381865afa158015613c90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cb491906150e9565b905092915050565b600081670de0b6b3a764000084613cd391906152e6565b613cdd919061536f565b905092915050565b613cf8818361242c90919063ffffffff16565b15613d9f577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c3b35a7e3085613d4e8587611c0b90919063ffffffff16565b6040518463ffffffff1660e01b8152600401613d6c9392919061592b565b600060405180830381600087803b158015613d8657600080fd5b505af1158015613d9a573d6000803e3d6000fd5b505050505b613db28183611dfe90919063ffffffff16565b15613e59577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f213159c3085613e088686611c0b90919063ffffffff16565b6040518463ffffffff1660e01b8152600401613e269392919061592b565b600060405180830381600087803b158015613e4057600080fd5b505af1158015613e54573d6000803e3d6000fd5b505050505b7fdf43c689abc8d83e86b74634bbe0ba590e2ecb34f3f432a612c6edef3e532cbd8382604051613e8a929190615962565b60405180910390a1505050565b6000670de0b6b3a76400008284613eae91906152e6565b613eb8919061536f565b905092915050565b6000613ecb82614456565b9050919050565b6000613fd88373ffffffffffffffffffffffffffffffffffffffff16631e0c6fb9306040518263ffffffff1660e01b8152600401613f109190615125565b60a060405180830381865afa158015613f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f5191906159ef565b8473ffffffffffffffffffffffffffffffffffffffff1663b7648fb9306040518263ffffffff1660e01b8152600401613f8a9190615125565b6040805180830381865afa158015613fa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fca91906151aa565b61447290919063ffffffff16565b60000151905060006141478473ffffffffffffffffffffffffffffffffffffffff166359ea287d6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561402e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061405291906159ef565b8573ffffffffffffffffffffffffffffffffffffffff16639a427d038773ffffffffffffffffffffffffffffffffffffffff1663c07f47d46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156140b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140dd91906150e9565b6040518263ffffffff1660e01b81526004016140f99190614e27565b6040805180830381865afa158015614115573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061413991906151aa565b61447290919063ffffffff16565b60000151905060008473ffffffffffffffffffffffffffffffffffffffff1663193775676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561419a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141be9190615200565b905060006141d5838361242c90919063ffffffff16565b6141e05760006141f4565b6141f38383611c0b90919063ffffffff16565b5b90506142098486611dfe90919063ffffffff16565b1561428c578573ffffffffffffffffffffffffffffffffffffffff166359218fe961423d8787611c0b90919063ffffffff16565b6040518263ffffffff1660e01b81526004016142599190614799565b600060405180830381600087803b15801561427357600080fd5b505af1158015614287573d6000803e3d6000fd5b505050505b61429f848661242c90919063ffffffff16565b15614334578573ffffffffffffffffffffffffffffffffffffffff1663d7d7d6b86142e5836142d7888a611c0b90919063ffffffff16565b61449d90919063ffffffff16565b6040518263ffffffff1660e01b81526004016143019190614799565b600060405180830381600087803b15801561431b57600080fd5b505af115801561432f573d6000803e3d6000fd5b505050505b7f814d2340073b1f05a68bb3f6aab82bfc4eea78f35f7c2332caddf0c35865331e8686604051614365929190615962565b60405180910390a1505050505050565b60006143d7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166144b19092919063ffffffff16565b905060008151111561443757808060200190518101906143f79190615650565b614436576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161442d90615a8e565b60405180910390fd5b5b505050565b60008183121561444c578161444e565b825b905092915050565b600080821215614469578160000361446b565b815b9050919050565b61447a61473a565b61449561448b8484602001516144c9565b8360400151614522565b905092915050565b60006144a98383612775565b905092915050565b60606144c0848460008561457b565b90509392505050565b6144d161473a565b60405180604001604052806144f784600001518660000151611de890919063ffffffff16565b815260200161451784602001518660200151611de890919063ffffffff16565b815250905092915050565b61452a61473a565b604051806040016040528061455084600001518660000151611c0b90919063ffffffff16565b815260200161457084602001518660200151611c0b90919063ffffffff16565b815250905092915050565b6060824710156145c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016145b790615b20565b60405180910390fd5b6145c98561468f565b614608576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016145ff90615b8c565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516146319190615bf3565b60006040518083038185875af1925050503d806000811461466e576040519150601f19603f3d011682016040523d82523d6000602084013e614673565b606091505b50915091506146838282866146b2565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606083156146c257829050614712565b6000835111156146d55782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614709919061484d565b60405180910390fd5b9392505050565b60405180606001604052806000815260200160008152602001600081525090565b604051806040016040528060008152602001600081525090565b6000819050919050565b6000819050919050565b600061478361477e61477984614754565b61475e565b614754565b9050919050565b61479381614768565b82525050565b60006020820190506147ae600083018461478a565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156147ee5780820151818401526020810190506147d3565b838111156147fd576000848401525b50505050565b6000601f19601f8301169050919050565b600061481f826147b4565b61482981856147bf565b93506148398185602086016147d0565b61484281614803565b840191505092915050565b600060208201905081810360008301526148678184614814565b905092915050565b6000604051905090565b600080fd5b600080fd5b61488c81614754565b811461489757600080fd5b50565b6000813590506148a981614883565b92915050565b6000602082840312156148c5576148c4614879565b5b60006148d38482850161489a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061491761491261490d846148dc565b61475e565b6148dc565b9050919050565b6000614929826148fc565b9050919050565b600061493b8261491e565b9050919050565b61494b81614930565b82525050565b60006020820190506149666000830184614942565b92915050565b6000614977826148dc565b9050919050565b6149878161496c565b811461499257600080fd5b50565b6000813590506149a48161497e565b92915050565b600080604083850312156149c1576149c0614879565b5b60006149cf85828601614995565b92505060206149e08582860161489a565b9150509250929050565b60008115159050919050565b6149ff816149ea565b82525050565b6000602082019050614a1a60008301846149f6565b92915050565b600060208284031215614a3657614a35614879565b5b6000614a4484828501614995565b91505092915050565b600080600060608486031215614a6657614a65614879565b5b6000614a7486828701614995565b9350506020614a8586828701614995565b9250506040614a968682870161489a565b9150509250925092565b600060ff82169050919050565b614ab681614aa0565b82525050565b6000602082019050614ad16000830184614aad565b92915050565b6000614ae28261491e565b9050919050565b614af281614ad7565b82525050565b6000602082019050614b0d6000830184614ae9565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b614b5582614803565b810181811067ffffffffffffffff82111715614b7457614b73614b1d565b5b80604052505050565b6000614b8761486f565b9050614b938282614b4c565b919050565b600067ffffffffffffffff821115614bb357614bb2614b1d565b5b614bbc82614803565b9050602081019050919050565b82818337600083830152505050565b6000614beb614be684614b98565b614b7d565b905082815260208101848484011115614c0757614c06614b18565b5b614c12848285614bc9565b509392505050565b600082601f830112614c2f57614c2e614b13565b5b8135614c3f848260208601614bd8565b91505092915050565b60008060408385031215614c5f57614c5e614879565b5b600083013567ffffffffffffffff811115614c7d57614c7c61487e565b5b614c8985828601614c1a565b925050602083013567ffffffffffffffff811115614caa57614ca961487e565b5b614cb685828601614c1a565b9150509250929050565b60008060408385031215614cd757614cd6614879565b5b6000614ce58582860161489a565b9250506020614cf685828601614995565b9150509250929050565b6000614d0b8261491e565b9050919050565b614d1b81614d00565b82525050565b6000602082019050614d366000830184614d12565b92915050565b60008060408385031215614d5357614d52614879565b5b6000614d6185828601614995565b9250506020614d7285828601614995565b9150509250929050565b6000614d878261491e565b9050919050565b614d9781614d7c565b82525050565b6000602082019050614db26000830184614d8e565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680614dff57607f821691505b602082108103614e1257614e11614db8565b5b50919050565b614e2181614754565b82525050565b6000602082019050614e3c6000830184614e18565b92915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302614ea47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614e67565b614eae8683614e67565b95508019841693508086168417925050509392505050565b6000819050919050565b614ed983614768565b614eed614ee582614ec6565b848454614e74565b825550505050565b600090565b614f02614ef5565b614f0d818484614ed0565b505050565b5b81811015614f3157614f26600082614efa565b600181019050614f13565b5050565b601f821115614f7657614f4781614e42565b614f5084614e57565b81016020851015614f5f578190505b614f73614f6b85614e57565b830182614f12565b50505b505050565b600082821c905092915050565b6000614f9960001984600802614f7b565b1980831691505092915050565b6000614fb28383614f88565b9150826002028217905092915050565b614fcb826147b4565b67ffffffffffffffff811115614fe457614fe3614b1d565b5b614fee8254614de7565b614ff9828285614f35565b600060209050601f83116001811461502c576000841561501a578287015190505b6150248582614fa6565b86555061508c565b601f19841661503a86614e42565b60005b828110156150625784890151825560018201915060208501945060208101905061503d565b8683101561507f578489015161507b601f891682614f88565b8355505b6001600288020188555050505b505050505050565b60006040820190506150a96000830185614e18565b6150b6602083018461478a565b9392505050565b6150c681614754565b81146150d157600080fd5b50565b6000815190506150e3816150bd565b92915050565b6000602082840312156150ff576150fe614879565b5b600061510d848285016150d4565b91505092915050565b61511f8161496c565b82525050565b600060208201905061513a6000830184615116565b92915050565b600080fd5b60008151905061515481614883565b92915050565b6000604082840312156151705761516f615140565b5b61517a6040614b7d565b9050600061518a84828501615145565b600083015250602061519e84828501615145565b60208301525092915050565b6000604082840312156151c0576151bf614879565b5b60006151ce8482850161515a565b91505092915050565b60006040820190506151ec6000830185615116565b6151f96020830184614942565b9392505050565b60006020828403121561521657615215614879565b5b600061522484828501615145565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061526782614754565b915061527283614754565b9250828210156152855761528461522d565b5b828203905092915050565b600061529b82614754565b91506152a683614754565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156152db576152da61522d565b5b828201905092915050565b60006152f182614754565b91506152fc83614754565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156153355761533461522d565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061537a82614754565b915061538583614754565b92508261539557615394615340565b5b828204905092915050565b6000819050919050565b60006153b5826153a0565b91506153c0836153a0565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156153ff576153fe61522d565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561543c5761543b61522d565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156154795761547861522d565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156154b6576154b561522d565b5b828202905092915050565b6154ca816153a0565b81146154d557600080fd5b50565b6000815190506154e7816154c1565b92915050565b60006040828403121561550357615502615140565b5b61550d6040614b7d565b9050600061551d848285016154d8565b6000830152506020615531848285016154d8565b60208301525092915050565b60006040828403121561555357615552614879565b5b6000615561848285016154ed565b91505092915050565b6000606082840312156155805761557f615140565b5b61558a6060614b7d565b9050600061559a848285016150d4565b60008301525060206155ae848285016150d4565b60208301525060406155c2848285016154d8565b60408301525092915050565b6000606082840312156155e4576155e3614879565b5b60006155f28482850161556a565b91505092915050565b60006040820190506156106000830185615116565b61561d6020830184614e18565b9392505050565b61562d816149ea565b811461563857600080fd5b50565b60008151905061564a81615624565b92915050565b60006020828403121561566657615665614879565b5b60006156748482850161563b565b91505092915050565b60006040820190506156926000830185615116565b61569f6020830184615116565b9392505050565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b60006157026036836147bf565b915061570d826156a6565b604082019050919050565b60006020820190508181036000830152615731816156f5565b9050919050565b600060608201905061574d6000830186615116565b61575a6020830185615116565b6157676040830184614e18565b949350505050565b600061577a826153a0565b9150615785836153a0565b92508261579557615794615340565b5b600160000383147f8000000000000000000000000000000000000000000000000000000000000000831416156157ce576157cd61522d565b5b828205905092915050565b60006157e4826153a0565b91506157ef836153a0565b9250827f80000000000000000000000000000000000000000000000000000000000000000182126000841215161561582a5761582961522d565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0182136000841216156158625761586161522d565b5b828203905092915050565b6000615878826153a0565b9150615883836153a0565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313600083121516156158be576158bd61522d565b5b817f80000000000000000000000000000000000000000000000000000000000000000383126000831216156158f6576158f561522d565b5b828201905092915050565b61590a816153a0565b82525050565b60006020820190506159256000830184615901565b92915050565b60006060820190506159406000830186615116565b61594d6020830185614942565b61595a604083018461478a565b949350505050565b60006040820190506159776000830185614942565b615984602083018461478a565b9392505050565b600060a082840312156159a1576159a0615140565b5b6159ab6060614b7d565b905060006159bb848285016150d4565b60008301525060206159cf8482850161515a565b60208301525060606159e38482850161515a565b60408301525092915050565b600060a08284031215615a0557615a04614879565b5b6000615a138482850161598b565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000615a78602a836147bf565b9150615a8382615a1c565b604082019050919050565b60006020820190508181036000830152615aa781615a6b565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000615b0a6026836147bf565b9150615b1582615aae565b604082019050919050565b60006020820190508181036000830152615b3981615afd565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000615b76601d836147bf565b9150615b8182615b40565b602082019050919050565b60006020820190508181036000830152615ba581615b69565b9050919050565b600081519050919050565b600081905092915050565b6000615bcd82615bac565b615bd78185615bb7565b9350615be78185602086016147d0565b80840191505092915050565b6000615bff8284615bc2565b91508190509291505056fea2646970667358221220d60f16ace69cba68360e079520583a6ff05e8364760e2e388eda867ba6fe84d864736f6c634300080f0033",
  "devdoc": {
    "details": "Vault deploys and rebalances collateral between the corresponding long and short markets, while attempting to      maintain `targetLeverage` with its open positions at any given time. Deposits are only gated in so much as to cap      the maximum amount of assets in the vault.      The vault has a \"delayed mint\" mechanism for shares on deposit. After depositing to the vault, a user must wait      until the next settlement of the underlying products in order for shares to be reflected in the getters.      The shares will be fully reflected in contract state when the next settlement occurs on the vault itself.      Similarly, when redeeming shares, underlying assets are not claimable until a settlement occurs.      Each state changing interaction triggers the `settle` flywheel in order to bring the vault to the      desired state.      In the event that there is not a settlement for a long period of time, keepers can call the `sync` method to      force settlement and rebalancing. This is most useful to prevent vault liquidation due to PnL changes      causing the vault to be in an unhealthy state (far away from target leverage)",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "amount": "Amount of shares that spender can operate on",
          "spender": "Address which can spend operate on shares"
        },
        "returns": {
          "_0": "bool true if the approval was successful, otherwise reverts"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "Account to query balance of"
        },
        "returns": {
          "_0": "Number of shares held by `account`"
        }
      },
      "claim(address)": {
        "params": {
          "account": "The account to claim for"
        }
      },
      "convertToAssets(uint256)": {
        "params": {
          "shares": "Number of shares to convert to assets"
        },
        "returns": {
          "_0": "Amount of assets for the given shares"
        }
      },
      "convertToShares(uint256)": {
        "params": {
          "assets": "Number of assets to convert to shares"
        },
        "returns": {
          "_0": "Amount of shares for the given assets"
        }
      },
      "decimals()": {
        "returns": {
          "_0": "Decimal places of the share share token"
        }
      },
      "deposit(uint256,address)": {
        "params": {
          "account": "The account to deposit on behalf of",
          "assets": "The amount of assets to deposit"
        }
      },
      "initialize(string,string)": {
        "params": {
          "name_": "ERC20 asset name",
          "symbol_": "ERC20 asset symbol"
        }
      },
      "maxDeposit(address)": {
        "details": "Only exact when vault is synced, otherwise approximate",
        "returns": {
          "_0": "Maximum available deposit amount"
        }
      },
      "maxRedeem(address)": {
        "details": "Only exact when vault is synced, otherwise approximate",
        "params": {
          "account": "The account to redeem for"
        },
        "returns": {
          "_0": "Maximum available redeemable amount"
        }
      },
      "redeem(uint256,address)": {
        "details": "Does not return any assets to the user due to delayed settlement. Use `claim` to claim assets      If account is not msg.sender, requires prior spending approval",
        "params": {
          "account": "The account to redeem on behalf of",
          "shares": "The amount of shares to redeem"
        }
      },
      "sync()": {
        "details": "Should be called by a keeper when the vault approaches a liquidation state on either side"
      },
      "totalAssets()": {
        "returns": {
          "_0": "Amount of assets held by the vault"
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "Amount of shares currently issued"
        }
      },
      "totalUnclaimed()": {
        "returns": {
          "_0": "Total unclaimed assets in vault"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "Amount of shares to send",
          "to": "Address to send shares to"
        },
        "returns": {
          "_0": "bool true if the transfer was successful, otherwise reverts"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "Amount of shares to send",
          "from": "Address to send shares from",
          "to": "Address to send shares to"
        },
        "returns": {
          "_0": "bool true if the transfer was successful, otherwise reverts"
        }
      },
      "unclaimed(address)": {
        "params": {
          "account": "Account to query unclaimed balance of"
        },
        "returns": {
          "_0": "`account`'s unclaimed assets"
        }
      }
    },
    "stateVariables": {
      "_balanceOf": {
        "details": "Mapping of shares of the vault per user"
      },
      "_deposit": {
        "details": "Deposits that have not been settled, or have been settled but not yet processed by this contract"
      },
      "_deposits": {
        "details": "Mapping of pending (not yet converted to shares) per user"
      },
      "_latestVersion": {
        "details": "The latest version that a pending deposit or redemption has been placed"
      },
      "_latestVersions": {
        "details": "Mapping of the latest version that a pending deposit or redemption has been placed per user"
      },
      "_redemption": {
        "details": "Redemptions that have not been settled, or have been settled but not yet processed by this contract"
      },
      "_redemptions": {
        "details": "Mapping of pending (not yet withdrawn) per user"
      },
      "_totalSupply": {
        "details": "Total number of shares across all users"
      },
      "_totalUnclaimed": {
        "details": "Mapping of unclaimed underlying of the vault per user"
      },
      "_unclaimed": {
        "details": "Mapping of unclaimed underlying of the vault per user"
      },
      "_versions": {
        "details": "Mapping of versions of the vault state at a given oracle version"
      },
      "allowance": {
        "details": "Mapping of allowance across all users"
      },
      "asset": {
        "details": "The underlying asset of the vault"
      },
      "collateral": {
        "details": "The address of the Perennial collateral contract"
      },
      "controller": {
        "details": "The address of the Perennial controller contract"
      },
      "long": {
        "details": "The address of the Perennial product on the long side"
      },
      "maxCollateral": {
        "details": "The collateral cap for the vault"
      },
      "name": {
        "details": "The ERC20 name of the vault"
      },
      "short": {
        "details": "The address of the Perennial product on the short side"
      },
      "symbol": {
        "details": "The ERC20 symbol of the vault"
      },
      "targetLeverage": {
        "details": "The target leverage amount for the vault"
      }
    },
    "title": "BalancedVault",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Sets `amount` as the allowance of `spender` over the caller's shares"
      },
      "balanceOf(address)": {
        "notice": "Number of shares held by `account`"
      },
      "claim(address)": {
        "notice": "Claims all claimable assets for account, sending assets to account"
      },
      "convertToAssets(uint256)": {
        "notice": "Converts a given amount of shares to assets"
      },
      "convertToShares(uint256)": {
        "notice": "Converts a given amount of assets to shares"
      },
      "decimals()": {
        "notice": "Returns the decimals places of the share token"
      },
      "deposit(uint256,address)": {
        "notice": "Deposits `assets` assets into the vault, returning shares to `account` after the deposit settles."
      },
      "initialize(string,string)": {
        "notice": "Initializes the contract state"
      },
      "maxDeposit(address)": {
        "notice": "The maximum available deposit amount"
      },
      "maxRedeem(address)": {
        "notice": "The maximum available redeemable amount"
      },
      "redeem(uint256,address)": {
        "notice": "Redeems `shares` shares from the vault"
      },
      "sync()": {
        "notice": "Rebalances the collateral and position of the vault without a deposit or withdraw"
      },
      "totalAssets()": {
        "notice": "The total amount of assets currently held by the vault"
      },
      "totalSupply()": {
        "notice": "The total amount of shares currently issued"
      },
      "totalUnclaimed()": {
        "notice": "Total unclaimed assets in vault"
      },
      "transfer(address,uint256)": {
        "notice": "Moves `amount` shares from the caller's account to `to`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Moves `amount` shares from `from to `to`"
      },
      "unclaimed(address)": {
        "notice": "`account`'s unclaimed assets"
      }
    },
    "notice": "ERC4626 vault that manages a 50-50 position between long-short markets of the same payoff on Perennial.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 226,
        "contract": "@equilibria/perennial-vaults/contracts/BalancedVault.sol:BalancedVault",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 229,
        "contract": "@equilibria/perennial-vaults/contracts/BalancedVault.sol:BalancedVault",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 237,
        "contract": "@equilibria/perennial-vaults/contracts/BalancedVault.sol:BalancedVault",
        "label": "allowance",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_userDefinedValueType(UFixed18)7104))"
      },
      {
        "astId": 243,
        "contract": "@equilibria/perennial-vaults/contracts/BalancedVault.sol:BalancedVault",
        "label": "_balanceOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_userDefinedValueType(UFixed18)7104)"
      },
      {
        "astId": 247,
        "contract": "@equilibria/perennial-vaults/contracts/BalancedVault.sol:BalancedVault",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "4",
        "type": "t_userDefinedValueType(UFixed18)7104"
      },
      {
        "astId": 253,
        "contract": "@equilibria/perennial-vaults/contracts/BalancedVault.sol:BalancedVault",
        "label": "_unclaimed",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_userDefinedValueType(UFixed18)7104)"
      },
      {
        "astId": 257,
        "contract": "@equilibria/perennial-vaults/contracts/BalancedVault.sol:BalancedVault",
        "label": "_totalUnclaimed",
        "offset": 0,
        "slot": "6",
        "type": "t_userDefinedValueType(UFixed18)7104"
      },
      {
        "astId": 261,
        "contract": "@equilibria/perennial-vaults/contracts/BalancedVault.sol:BalancedVault",
        "label": "_deposit",
        "offset": 0,
        "slot": "7",
        "type": "t_userDefinedValueType(UFixed18)7104"
      },
      {
        "astId": 265,
        "contract": "@equilibria/perennial-vaults/contracts/BalancedVault.sol:BalancedVault",
        "label": "_redemption",
        "offset": 0,
        "slot": "8",
        "type": "t_userDefinedValueType(UFixed18)7104"
      },
      {
        "astId": 268,
        "contract": "@equilibria/perennial-vaults/contracts/BalancedVault.sol:BalancedVault",
        "label": "_latestVersion",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 274,
        "contract": "@equilibria/perennial-vaults/contracts/BalancedVault.sol:BalancedVault",
        "label": "_deposits",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_userDefinedValueType(UFixed18)7104)"
      },
      {
        "astId": 280,
        "contract": "@equilibria/perennial-vaults/contracts/BalancedVault.sol:BalancedVault",
        "label": "_redemptions",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_userDefinedValueType(UFixed18)7104)"
      },
      {
        "astId": 285,
        "contract": "@equilibria/perennial-vaults/contracts/BalancedVault.sol:BalancedVault",
        "label": "_latestVersions",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 291,
        "contract": "@equilibria/perennial-vaults/contracts/BalancedVault.sol:BalancedVault",
        "label": "_versions",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(Version)2363_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_userDefinedValueType(UFixed18)7104))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => UFixed18))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_userDefinedValueType(UFixed18)7104)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_userDefinedValueType(UFixed18)7104)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => UFixed18)",
        "numberOfBytes": "32",
        "value": "t_userDefinedValueType(UFixed18)7104"
      },
      "t_mapping(t_uint256,t_struct(Version)2363_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IBalancedVault.Version)",
        "numberOfBytes": "32",
        "value": "t_struct(Version)2363_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Version)2363_storage": {
        "encoding": "inplace",
        "label": "struct IBalancedVault.Version",
        "members": [
          {
            "astId": 2347,
            "contract": "@equilibria/perennial-vaults/contracts/BalancedVault.sol:BalancedVault",
            "label": "longPosition",
            "offset": 0,
            "slot": "0",
            "type": "t_userDefinedValueType(UFixed18)7104"
          },
          {
            "astId": 2350,
            "contract": "@equilibria/perennial-vaults/contracts/BalancedVault.sol:BalancedVault",
            "label": "shortPosition",
            "offset": 0,
            "slot": "1",
            "type": "t_userDefinedValueType(UFixed18)7104"
          },
          {
            "astId": 2353,
            "contract": "@equilibria/perennial-vaults/contracts/BalancedVault.sol:BalancedVault",
            "label": "totalShares",
            "offset": 0,
            "slot": "2",
            "type": "t_userDefinedValueType(UFixed18)7104"
          },
          {
            "astId": 2356,
            "contract": "@equilibria/perennial-vaults/contracts/BalancedVault.sol:BalancedVault",
            "label": "longAssets",
            "offset": 0,
            "slot": "3",
            "type": "t_userDefinedValueType(UFixed18)7104"
          },
          {
            "astId": 2359,
            "contract": "@equilibria/perennial-vaults/contracts/BalancedVault.sol:BalancedVault",
            "label": "shortAssets",
            "offset": 0,
            "slot": "4",
            "type": "t_userDefinedValueType(UFixed18)7104"
          },
          {
            "astId": 2362,
            "contract": "@equilibria/perennial-vaults/contracts/BalancedVault.sol:BalancedVault",
            "label": "totalAssets",
            "offset": 0,
            "slot": "5",
            "type": "t_userDefinedValueType(UFixed18)7104"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_userDefinedValueType(UFixed18)7104": {
        "encoding": "inplace",
        "label": "UFixed18",
        "numberOfBytes": "32"
      }
    }
  }
}