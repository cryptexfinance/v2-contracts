{
  "address": "0x057cD3082EfED32d5C907801BF3628B27D88fD80",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "RoundIdMissing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "next",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x99caa3a87ea3d87a197a8a4e59f37f717f7c3b639ed71b5a9622a4b2638345cb",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x057cD3082EfED32d5C907801BF3628B27D88fD80",
    "transactionIndex": 1,
    "gasUsed": "3422369",
    "logsBloom": "0x
    "blockHash": "0x8b069a8ac5c26f091007880f5d31a8a3d44649f32d8c28be54201bbe9c76f29f",
    "transactionHash": "0x99caa3a87ea3d87a197a8a4e59f37f717f7c3b639ed71b5a9622a4b2638345cb",
    "logs": [],
    "blockNumber": 14016973,
    "cumulativeGasUsed": "3422369",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e67c40f21fc61758444f62140005fb1d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"RoundIdMissing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"next\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/ChainlinkTCAPAggregatorV3.sol\":\"ChainlinkTCAPAggregatorV3\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/mocks/ChainlinkTCAPAggregatorV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ncontract ChainlinkTCAPAggregatorV3 {\\n  struct RoundData {\\n      uint80 roundId;\\n      uint80 answeredInRound;\\n      int256 answer;\\n      uint256 startedAt;\\n      uint256 updatedAt;\\n  }\\n  mapping(uint80 => RoundData) roundDataHistory;\\n  error RoundIdMissing();\\n  RoundData _latestRoundData = RoundData({\\n    roundId: uint80(18446744073709551734),\\n    answer: int256(122149510910889330000),\\n    startedAt: uint256(1679508968),\\n    updatedAt: uint256(1679508968),\\n    answeredInRound: uint80(18446744073709551734)\\n  });\\n\\n  constructor() {\\n    roundDataHistory[_latestRoundData.roundId] = _latestRoundData;\\n  }\\n\\n  function decimals() external view returns (uint8) {\\n    return uint8(8);\\n  }\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    ) {\\n    RoundData memory roundData = roundDataHistory[_roundId];\\n    if(roundData.roundId != _roundId)\\n      revert RoundIdMissing();\\n    roundId = _roundId;\\n    answer = roundData.answer;\\n    startedAt = roundData.startedAt;\\n    updatedAt = roundData.updatedAt;\\n    answeredInRound = roundData.answeredInRound;\\n  }\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    ) {\\n    roundId = _latestRoundData.roundId;\\n    answer = _latestRoundData.answer;\\n    startedAt = _latestRoundData.startedAt;\\n    updatedAt = _latestRoundData.updatedAt;\\n    answeredInRound = _latestRoundData.answeredInRound;\\n  }\\n\\n  function next() external {\\n    _latestRoundData.roundId = _latestRoundData.roundId + 1;\\n    _latestRoundData.answer = (_latestRoundData.answer * 101) / 100;\\n    _latestRoundData.startedAt = _latestRoundData.startedAt + 1000;\\n    _latestRoundData.updatedAt = _latestRoundData.updatedAt + 1000;\\n    _latestRoundData.answeredInRound = _latestRoundData.answeredInRound + 1;\\n    roundDataHistory[_latestRoundData.roundId] = _latestRoundData;\\n  }\\n}\\n\",\"keccak256\":\"0x04a01ee99db6166e16cc837bbd4dc82c11ed7571a3f26023a381e5a343dc720f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526040518060a001604052806801000000000000007669ffffffffffffffffffff1681526020016801000000000000007669ffffffffffffffffffff16815260200168069f2a3cff63428550815260200163641b45e8815260200163641b45e8815250600160008201518160000160006101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff160217905550602082015181600001600a6101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff16021790555060408201518160010155606082015181600201556080820151816003015550503480156100fa57600080fd5b506001600080600160000160009054906101000a900469ffffffffffffffffffff1669ffffffffffffffffffff1669ffffffffffffffffffff1681526020019081526020016000206000820160009054906101000a900469ffffffffffffffffffff168160000160006101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff16021790555060008201600a9054906101000a900469ffffffffffffffffffff1681600001600a6101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff160217905550600182015481600101556002820154816002015560038201548160030155905050610875806102046000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063313ce567146100515780634c8fe5261461006f5780639a6fc8f514610079578063feaf968c146100ad575b600080fd5b6100596100cf565b60405161006691906104a7565b60405180910390f35b6100776100d8565b005b610093600480360381019061008e9190610509565b6102dd565b6040516100a4959493929190610577565b60405180910390f35b6100b5610429565b6040516100c6959493929190610577565b60405180910390f35b60006008905090565b60018060000160009054906101000a900469ffffffffffffffffffff166100ff91906105f9565b600160000160006101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff1602179055506064606560018001546101419190610639565b61014b919061077f565b60018001819055506103e860016002015461016691906107e9565b6001600201819055506103e860016003015461018291906107e9565b600160030181905550600180600001600a9054906101000a900469ffffffffffffffffffff166101b291906105f9565b6001600001600a6101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff1602179055506001600080600160000160009054906101000a900469ffffffffffffffffffff1669ffffffffffffffffffff1669ffffffffffffffffffff1681526020019081526020016000206000820160009054906101000a900469ffffffffffffffffffff168160000160006101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff16021790555060008201600a9054906101000a900469ffffffffffffffffffff1681600001600a6101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff160217905550600182015481600101556002820154816002015560038201548160030155905050565b6000806000806000806000808869ffffffffffffffffffff1669ffffffffffffffffffff1681526020019081526020016000206040518060a00160405290816000820160009054906101000a900469ffffffffffffffffffff1669ffffffffffffffffffff1669ffffffffffffffffffff16815260200160008201600a9054906101000a900469ffffffffffffffffffff1669ffffffffffffffffffff1669ffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505090508669ffffffffffffffffffff16816000015169ffffffffffffffffffff1614610400576040517f6f455e9200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b869550806040015194508060600151935080608001519250806020015191505091939590929450565b6000806000806000600160000160009054906101000a900469ffffffffffffffffffff16945060018001549350600160020154925060016003015491506001600001600a9054906101000a900469ffffffffffffffffffff1690509091929394565b600060ff82169050919050565b6104a18161048b565b82525050565b60006020820190506104bc6000830184610498565b92915050565b600080fd5b600069ffffffffffffffffffff82169050919050565b6104e6816104c7565b81146104f157600080fd5b50565b600081359050610503816104dd565b92915050565b60006020828403121561051f5761051e6104c2565b5b600061052d848285016104f4565b91505092915050565b61053f816104c7565b82525050565b6000819050919050565b61055881610545565b82525050565b6000819050919050565b6105718161055e565b82525050565b600060a08201905061058c6000830188610536565b610599602083018761054f565b6105a66040830186610568565b6105b36060830185610568565b6105c06080830184610536565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610604826104c7565b915061060f836104c7565b92508269ffffffffffffffffffff0382111561062e5761062d6105ca565b5b828201905092915050565b600061064482610545565b915061064f83610545565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561068e5761068d6105ca565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156106cb576106ca6105ca565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610708576107076105ca565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610745576107446105ca565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061078a82610545565b915061079583610545565b9250826107a5576107a4610750565b5b600160000383147f8000000000000000000000000000000000000000000000000000000000000000831416156107de576107dd6105ca565b5b828205905092915050565b60006107f48261055e565b91506107ff8361055e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610834576108336105ca565b5b82820190509291505056fea2646970667358221220ce1641dd20f8d8dd4b5063dd89d4fc8caf42e089bf686d31ec8f37367000dc3264736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063313ce567146100515780634c8fe5261461006f5780639a6fc8f514610079578063feaf968c146100ad575b600080fd5b6100596100cf565b60405161006691906104a7565b60405180910390f35b6100776100d8565b005b610093600480360381019061008e9190610509565b6102dd565b6040516100a4959493929190610577565b60405180910390f35b6100b5610429565b6040516100c6959493929190610577565b60405180910390f35b60006008905090565b60018060000160009054906101000a900469ffffffffffffffffffff166100ff91906105f9565b600160000160006101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff1602179055506064606560018001546101419190610639565b61014b919061077f565b60018001819055506103e860016002015461016691906107e9565b6001600201819055506103e860016003015461018291906107e9565b600160030181905550600180600001600a9054906101000a900469ffffffffffffffffffff166101b291906105f9565b6001600001600a6101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff1602179055506001600080600160000160009054906101000a900469ffffffffffffffffffff1669ffffffffffffffffffff1669ffffffffffffffffffff1681526020019081526020016000206000820160009054906101000a900469ffffffffffffffffffff168160000160006101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff16021790555060008201600a9054906101000a900469ffffffffffffffffffff1681600001600a6101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff160217905550600182015481600101556002820154816002015560038201548160030155905050565b6000806000806000806000808869ffffffffffffffffffff1669ffffffffffffffffffff1681526020019081526020016000206040518060a00160405290816000820160009054906101000a900469ffffffffffffffffffff1669ffffffffffffffffffff1669ffffffffffffffffffff16815260200160008201600a9054906101000a900469ffffffffffffffffffff1669ffffffffffffffffffff1669ffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505090508669ffffffffffffffffffff16816000015169ffffffffffffffffffff1614610400576040517f6f455e9200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b869550806040015194508060600151935080608001519250806020015191505091939590929450565b6000806000806000600160000160009054906101000a900469ffffffffffffffffffff16945060018001549350600160020154925060016003015491506001600001600a9054906101000a900469ffffffffffffffffffff1690509091929394565b600060ff82169050919050565b6104a18161048b565b82525050565b60006020820190506104bc6000830184610498565b92915050565b600080fd5b600069ffffffffffffffffffff82169050919050565b6104e6816104c7565b81146104f157600080fd5b50565b600081359050610503816104dd565b92915050565b60006020828403121561051f5761051e6104c2565b5b600061052d848285016104f4565b91505092915050565b61053f816104c7565b82525050565b6000819050919050565b61055881610545565b82525050565b6000819050919050565b6105718161055e565b82525050565b600060a08201905061058c6000830188610536565b610599602083018761054f565b6105a66040830186610568565b6105b36060830185610568565b6105c06080830184610536565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610604826104c7565b915061060f836104c7565b92508269ffffffffffffffffffff0382111561062e5761062d6105ca565b5b828201905092915050565b600061064482610545565b915061064f83610545565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561068e5761068d6105ca565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156106cb576106ca6105ca565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610708576107076105ca565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610745576107446105ca565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061078a82610545565b915061079583610545565b9250826107a5576107a4610750565b5b600160000383147f8000000000000000000000000000000000000000000000000000000000000000831416156107de576107dd6105ca565b5b828205905092915050565b60006107f48261055e565b91506107ff8361055e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610834576108336105ca565b5b82820190509291505056fea2646970667358221220ce1641dd20f8d8dd4b5063dd89d4fc8caf42e089bf686d31ec8f37367000dc3264736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5644,
        "contract": "contracts/mocks/ChainlinkTCAPAggregatorV3.sol:ChainlinkTCAPAggregatorV3",
        "label": "roundDataHistory",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint80,t_struct(RoundData)5639_storage)"
      },
      {
        "astId": 5671,
        "contract": "contracts/mocks/ChainlinkTCAPAggregatorV3.sol:ChainlinkTCAPAggregatorV3",
        "label": "_latestRoundData",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(RoundData)5639_storage"
      }
    ],
    "types": {
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint80,t_struct(RoundData)5639_storage)": {
        "encoding": "mapping",
        "key": "t_uint80",
        "label": "mapping(uint80 => struct ChainlinkTCAPAggregatorV3.RoundData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoundData)5639_storage"
      },
      "t_struct(RoundData)5639_storage": {
        "encoding": "inplace",
        "label": "struct ChainlinkTCAPAggregatorV3.RoundData",
        "members": [
          {
            "astId": 5630,
            "contract": "contracts/mocks/ChainlinkTCAPAggregatorV3.sol:ChainlinkTCAPAggregatorV3",
            "label": "roundId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint80"
          },
          {
            "astId": 5632,
            "contract": "contracts/mocks/ChainlinkTCAPAggregatorV3.sol:ChainlinkTCAPAggregatorV3",
            "label": "answeredInRound",
            "offset": 10,
            "slot": "0",
            "type": "t_uint80"
          },
          {
            "astId": 5634,
            "contract": "contracts/mocks/ChainlinkTCAPAggregatorV3.sol:ChainlinkTCAPAggregatorV3",
            "label": "answer",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 5636,
            "contract": "contracts/mocks/ChainlinkTCAPAggregatorV3.sol:ChainlinkTCAPAggregatorV3",
            "label": "startedAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5638,
            "contract": "contracts/mocks/ChainlinkTCAPAggregatorV3.sol:ChainlinkTCAPAggregatorV3",
            "label": "updatedAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint80": {
        "encoding": "inplace",
        "label": "uint80",
        "numberOfBytes": "10"
      }
    }
  }
}